<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HslCommunication</name>
    </assembly>
    <members>
        <member name="T:HslCommunication.BasicFramework.FormPortraitSelect">
            <summary>
            一个正方形图形选择窗口，可以获取指定的分辨率
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPortraitSelect.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.FormPortraitSelect.HasPicture">
            <summary>
            是否有图片存在
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.FormPortraitSelect.RectangleSelected">
            <summary>
            已选择的图形大小
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.FormPortraitSelect.RectangleImage">
            <summary>
            在控件显示的图片的大小，按照比例缩放以后
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPortraitSelect.LoadPictureFile(System.String)">
            <summary>
            增加一张图片的路径
            </summary>
            <param name="picPath"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPortraitSelect.GetSpecifiedSizeImage(System.Int32)">
            <summary>
            获取指定大小的图片，该图片将会按照比例压缩
            </summary>
            <param name="size">图片的横向分辨率</param>
            <returns>缩放后的图形</returns>
        </member>
        <member name="F:HslCommunication.BasicFramework.FormPortraitSelect.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPortraitSelect.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPortraitSelect.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.FormSupport">
            <summary>
            作者的技术支持的窗口界面
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormSupport.#ctor">
            <summary>
            实例化一个默认的界面
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.FormSupport.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormSupport.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormSupport.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftCacheArrayBase">
            <summary>
            内存队列的基类
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftCacheArrayBase.DataBytes">
            <summary>
            字节数据流
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftCacheArrayBase.ArrayLength">
            <summary>
            数据的长度
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftCacheArrayBase.HybirdLock">
            <summary>
            数据数组变动时的数据锁
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftCacheArrayBase.LoadFromBytes(System.Byte[])">
            <summary>
            用于从保存的数据对象初始化的
            </summary>
            <param name="dataSave"></param>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftCacheArrayBase.GetAllData">
            <summary>
            获取原本的数据字节
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftCacheArrayLong">
            <summary>
            一个内存队列缓存的类，数据类型为Int64
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftCacheArrayLong.DataArray">
            <summary>
            数据的本身面貌
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftCacheArrayLong.#ctor(System.Int32,System.Int32)">
            <summary>
            实例化一个数据对象
            </summary>
            <param name="capacity"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftCacheArrayLong.LoadFromBytes(System.Byte[])">
            <summary>
            用于从保存的数据对象初始化的
            </summary>
            <param name="dataSave"></param>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftCacheArrayLong.AddValue(System.Int64)">
            <summary>
            线程安全的添加数据
            </summary>
            <param name="value">值</param>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftCacheArrayInt">
            <summary>
            一个内存队列缓存的类，数据类型为Int32
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftCacheArrayInt.DataArray">
            <summary>
            数据的本身面貌
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftCacheArrayInt.#ctor(System.Int32,System.Int32)">
            <summary>
            实例化一个数据对象
            </summary>
            <param name="capacity"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftCacheArrayInt.LoadFromBytes(System.Byte[])">
            <summary>
            用于从保存的数据对象初始化的
            </summary>
            <param name="dataSave"></param>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftCacheArrayInt.AddValue(System.Int32)">
            <summary>
            线程安全的添加数据
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftCacheArrayInt.GetIntArray">
            <summary>
            安全的获取数组队列
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.Exception`1">
            <summary>
            一个自定义的支持序列化反序列化的异常类，具体用法参照第四版《CLR Via C#》P414
            </summary>
            <typeparam name="TExceptionArgs"></typeparam>
        </member>
        <member name="F:HslCommunication.BasicFramework.Exception`1.c_args">
            <summary>
            用于反序列化的
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.Exception`1.Args">
            <summary>
            消息
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.Exception`1.#ctor(System.String,System.Exception)">
            <summary>
            实例化一个异常对象
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.Exception`1.#ctor(`0,System.String,System.Exception)">
            <summary>
            实例化一个异常对象
            </summary>
            <param name="args"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.Exception`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            获取存储对象的序列化数据
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:HslCommunication.BasicFramework.Exception`1.Message">
            <summary>
            获取描述当前异常的消息
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.Exception`1.Equals(System.Object)">
            <summary>
            确定指定的object是否等于当前的object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.Exception`1.GetHashCode">
            <summary>
            用作特定类型的哈希函数
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.ExceptionArgs">
            <summary>
            异常消息基类
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.ExceptionArgs.Message">
            <summary>
            获取消息文本
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.FormAuthorAdvertisement">
            <summary>
            显示作者一些信息的类，应当在软件系统中提供一处链接显示原作者信息，或者以彩蛋方式实现
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAuthorAdvertisement.#ctor">
            <summary>
            实例化一个窗口，显示作者的相关信息
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.FormAuthorAdvertisement.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAuthorAdvertisement.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAuthorAdvertisement.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.FormAuthorize">
            <summary>
            用来测试版软件授权的窗口
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAuthorize.#ctor(HslCommunication.BasicFramework.SoftAuthorize,System.String,System.Func{System.String,System.String})">
            <summary>
            实例化授权注册窗口
            </summary>
            <param name="authorize"></param>
            <param name="aboutCode">提示关于怎么获取注册码的信息</param>
            <param name="encrypt">加密的方法</param>
        </member>
        <member name="F:HslCommunication.BasicFramework.FormAuthorize.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAuthorize.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAuthorize.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.FormPopup">
            <summary>
            一个用于消息弹出显示的类
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.AddNewForm(HslCommunication.BasicFramework.FormPopup)">
            <summary>
            新增一个显示的弹出窗口
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.ResetLocation">
            <summary>
            重置所有弹出窗口的位置
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.#ctor">
            <summary>
            实例化一个窗口信息弹出的对象
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.#ctor(System.String)">
            <summary>
            实例化一个窗口信息弹出的对象
            </summary>
            <param name="infotext">需要显示的文本</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.#ctor(System.String,System.Drawing.Color)">
            <summary>
            实例化一个窗口信息弹出的对象
            </summary>
            <param name="infotext">需要显示的文本</param>
            <param name="infocolor">文本的颜色</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.#ctor(System.String,System.Drawing.Color,System.Int32)">
            <summary>
            实例化一个窗口信息弹出的对象
            </summary>
            <param name="infotext">需要显示的文本</param>
            <param name="infocolor">文本的颜色</param>
            <param name="existTime">指定窗口多少时间后消失，单位毫秒</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.LocationUpMove">
            <summary>
            窗体的位置进行向上调整
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.LocationUpMove(System.Int32)">
            <summary>
            窗体的位置进行向上调整
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.FormPopup.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftAnimation">
            <summary>
            系统框架支持的一些常用的动画特效
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftAnimation.TimeFragment">
            <summary>
            最小的时间片段
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAnimation.BeginBackcolorAnimation(System.Windows.Forms.Control,System.Drawing.Color,System.Int32)">
            <summary>
            调整控件背景色
            </summary>
            <param name="control">控件</param>
            <param name="color">设置的颜色</param>
            <param name="time">时间</param>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftAuthorize">
            <summary>
            软件授权类
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.#ctor">
            <summary>
            实例化一个软件授权类
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftAuthorize.TextCode">
            <summary>
            注册码描述文本
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftAuthorize.IsReleaseVersion">
            <summary>
            是否正式发行版，是的话就取消授权
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftAuthorize.HasLoadByFile">
            <summary>
            指示是否加载过文件信息
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftAuthorize.IsSoftTrial">
            <summary>
            指示系统是否处于试用运行
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.GetMachineCodeString">
            <summary>
            获取本机的机器码
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.ToSaveString">
            <summary>
            获取需要保存的数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.LoadByString(System.String)">
            <summary>
            从字符串加载数据
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.SaveToFile">
            <summary>
            使用特殊加密算法加密数据
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.LoadByFile">
            <summary>
            使用特殊解密算法解密数据
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.CheckAuthorize(System.String,System.Func{System.String,System.String})">
            <summary>
            检查该注册码是否是正确的注册码
            </summary>
            <param name="code"></param>
            <param name="encrypt">数据加密的方法，必须用户指定</param>
            <returns>是否注册成功</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.IsAuthorizeSuccess(System.Func{System.String,System.String})">
            <summary>
            检测授权是否成功
            </summary>
            <param name="encrypt">数据加密的方法，必须用户指定</param>
            <returns>是否成功授权</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.GetInfo">
            <summary>
            获取本计算机唯一的机器码
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.ISoftFileSaveBase">
            <summary>
            支持字符串信息加载存储的接口，定义了几个通用的方法
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.ISoftFileSaveBase.ToSaveString">
            <summary>
            获取需要保存的数据，需要重写实现
            </summary>
            <returns>需要存储的信息</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.ISoftFileSaveBase.LoadByString(System.String)">
            <summary>
            从字符串加载数据，需要重写实现
            </summary>
            <param name="content">字符串数据</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.ISoftFileSaveBase.LoadByFile">
            <summary>
            不使用解密方法从文件读取数据
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.ISoftFileSaveBase.SaveToFile">
            <summary>
            不使用加密方法保存数据到文件
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.ISoftFileSaveBase.FileSavePath">
            <summary>
            文件路径的存储
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftFileSaveBase">
            <summary>
            文件存储功能的基类，包含了文件存储路径，存储方法等
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftFileSaveBase.#ctor">
            <summary>
            实例化一个文件存储的基类
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftFileSaveBase.LogHeaderText">
            <summary>
            在日志保存时的标记当前调用类的信息
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftFileSaveBase.ToSaveString">
            <summary>
            获取需要保存的数据，需要重写实现
            </summary>
            <returns>需要存储的信息</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftFileSaveBase.LoadByString(System.String)">
            <summary>
            从字符串加载数据，需要重写实现
            </summary>
            <param name="content">字符串数据</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftFileSaveBase.LoadByFile">
            <summary>
            不使用解密方法从文件读取数据
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftFileSaveBase.LoadByFile(System.Converter{System.String,System.String})">
            <summary>
            使用用户自定义的解密方法从文件读取数据
            </summary>
            <param name="decrypt">用户自定义的解密方法</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftFileSaveBase.SaveToFile">
            <summary>
            不使用加密方法保存数据到文件
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftFileSaveBase.SaveToFile(System.Converter{System.String,System.String})">
            <summary>
            使用用户自定义的加密方法保存数据到文件
            </summary>
            <param name="encrypt">用户自定义的加密方法</param>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftFileSaveBase.FileSavePath">
            <summary>
            文件存储的路径
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftFileSaveBase.ILogNet">
            <summary>
            日志记录类
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftBasic">
            <summary>
            一个软件基础类，提供常用的一些静态方法
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.CalculateFileMD5(System.String)">
            <summary>
            获取文件的md5码
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.CalculateStreamMD5(System.IO.Stream)">
            <summary>
            获取数据流的md5码
            </summary>
            <param name="stream">数据流，可以是内存流，也可以是文件流</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.CalculateStreamMD5(System.Drawing.Bitmap)">
            <summary>
            获取内存图片的md5码
            </summary>
            <param name="bitmap">内存图片</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.GetSizeDescription(System.Int64)">
            <summary>
            从一个字节大小返回带单位的描述
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.AddArrayData``1(``0[]@,``0[],System.Int32)">
            <summary>
            一个通用的数组新增个数方法，会自动判断越界情况，越界的情况下，会自动的截断或是填充
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="array">原数据</param>
            <param name="data">等待新增的数据</param>
            <param name="max">原数据的最大值</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ArrayExpandToLength``1(``0[],System.Int32)">
            <summary>
            将一个数组进行扩充到指定长度，或是缩短到指定长度
            </summary>
            <typeparam name="T">数组的类型</typeparam>
            <param name="data">原先数据的数据</param>
            <param name="length">新数组的长度</param>
            <returns>新数组长度信息</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ArrayExpandToLengthEven``1(``0[])">
            <summary>
            将一个数组进行扩充到偶数长度
            </summary>
            <typeparam name="T">数组的类型</typeparam>
            <param name="data">原先数据的数据</param>
            <returns>新数组长度信息</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.IsTwoBytesEquel(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            判断两个字节的指定部分是否相同
            </summary>
            <param name="b1">第一个字节</param>
            <param name="start1">第一个字节的起始位置</param>
            <param name="b2">第二个字节</param>
            <param name="start2">第二个字节的起始位置</param>
            <param name="length">校验的长度</param>
            <returns>返回是否相等</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.IsByteTokenEquel(System.Byte[],System.Guid)">
            <summary>
            判断两个数据的令牌是否相等
            </summary>
            <param name="head">字节数据</param>
            <param name="token">GUID数据</param>
            <returns>返回是否相等</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.IsTwoTokenEquel(System.Guid,System.Guid)">
            <summary>
            判断两个数据的令牌是否相等
            </summary>
            <param name="token1">第一个令牌</param>
            <param name="token2">第二个令牌</param>
            <returns>返回是否相等</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.GetEnumValues``1">
            <summary>
            获取一个枚举类型的所有枚举值，可直接应用于组合框数据
            </summary>
            <typeparam name="TEnum">枚举的类型值</typeparam>
            <returns>枚举值数组</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.GetValueFromJsonObject``1(Newtonsoft.Json.Linq.JObject,System.String,``0)">
            <summary>
            一个泛型方法，提供json对象的数据读取
            </summary>
            <typeparam name="T">读取的泛型</typeparam>
            <param name="json">json对象</param>
            <param name="value_name">值名称</param>
            <param name="default_value">默认值</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.JsonSetValue``1(Newtonsoft.Json.Linq.JObject,System.String,``0)">
            <summary>
            一个泛型方法，提供json对象的数据写入
            </summary>
            <typeparam name="T">写入的泛型</typeparam>
            <param name="json">json对象</param>
            <param name="property">值名称</param>
            <param name="value">值数据</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ShowExceptionMessage(System.Exception)">
            <summary>
            显示一个完整的错误信息
            </summary>
            <param name="ex">异常对象</param>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ShowExceptionMessage(System.String,System.Exception)">
            <summary>
            显示一个完整的错误信息，和额外的字符串描述信息
            </summary>
            <param name="extraMsg">额外的描述信息</param>
            <param name="ex">异常对象</param>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.GetExceptionMessage(System.Exception)">
            <summary>
            获取一个异常的完整错误信息
            </summary>
            <param name="ex">异常对象</param>
            <returns>完整的字符串数据</returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.GetExceptionMessage(System.String,System.Exception)">
            <summary>
            获取一个异常的完整错误信息，和额外的字符串描述信息
            </summary>
            <param name="extraMsg">额外的信息</param>
            <param name="ex">异常对象</param>
            <returns>完整的字符串数据</returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ByteToHexString(System.Byte[])">
            <summary>
            字节数据转化成16进制表示的字符串
            </summary>
            <param name="InBytes">字节数组</param>
            <returns>返回的字符串</returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ByteToHexString(System.Byte[],System.Char)">
            <summary>
            字节数据转化成16进制表示的字符串
            </summary>
            <param name="InBytes">字节数组</param>
            <param name="segment">分割符</param>
            <returns>返回的字符串</returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ByteToHexString(System.String)">
            <summary>
            字符串数据转化成16进制表示的字符串
            </summary>
            <param name="InString">输入的字符串数据</param>
            <returns>返回的字符串</returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.HexStringToBytes(System.String)">
            <summary>
            将16进制的字符串转化成Byte数据，将检测每2个字符转化，也就是说，中间可以是任意字符
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.BoolArrayToByte(System.Boolean[])">
            <summary>
            将bool数组转换到byte数组
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ByteToBoolArray(System.Byte[],System.Int32)">
            <summary>
            从Byte数组中提取位数组
            </summary>
            <param name="InBytes">原先的字节数组</param>
            <param name="length">想要转换的长度，如果超出自动会缩小到数组最大长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ByteToShortArray(System.Byte[],System.Boolean)">
            <summary>
            从byte数组中提取出short数组，并指定是否需要高地位置换
            </summary>
            <param name="InBytes"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ByteToUShortArray(System.Byte[],System.Boolean)">
            <summary>
            从byte数组中提取出ushort数组，并指定是否需要高地位置换
            </summary>
            <param name="InBytes"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftBasic.FrameworkVersion">
            <summary>
            设置或获取系统框架的版本号
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.DeepClone(System.Object)">
            <summary>
            使用序列化反序列化深度克隆一个对象
            </summary>
            <param name="oringinal"></param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.GetUniqueStringByGuidAndRandom">
            <summary>
            获取一串唯一的随机字符串，长度为20，由Guid码和4位数的随机数组成，保证字符串的唯一性
            </summary>
            <returns>随机字符串数据</returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftMail">
            <summary>
            软件的邮箱类，用于发送邮箱数据，连续发送10次失败则禁止发送
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftMail.SoftMailSendFailedCount">
            <summary>
            系统连续发送失败的次数，为了不影响系统，连续三次失败就禁止发送
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftMail.MailSystem163">
            <summary>
            系统提供一个默认的163邮箱发送账号，只要更改接收地址即可发送服务，可能会被拦截
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftMail.MailSystemQQ">
            <summary>
            系统提供一个默认的QQ邮箱发送账号，只要更改接收地址即可发送服务，发送成功概率比较高
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.#ctor(System.Action{System.Net.Mail.SmtpClient},System.String,System.String)">
            <summary>
            实例化一个邮箱发送类，需要指定初始化信息
            </summary>
            <param name="mailIni">初始化的方法</param>
            <param name="addr_From">发送地址，应该和账户匹配</param>
            <param name="addr_to">邮件接收地址</param>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftMail.smtpClient">
            <summary>
            系统的邮件发送客户端
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftMail.MailFromAddress">
            <summary>
            发送邮件的地址
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftMail.MailSendAddress">
            <summary>
            邮件发送的地址
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.SendMail(System.Exception)">
            <summary>
            发生BUG至邮件地址，需要提前指定发送地址，否则失败
            </summary>
            <param name="ex">异常的BUG，同样试用兼容类型</param>
            <returns>是否发送成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.SendMail(System.String,System.String)">
            <summary>
            发送邮件至地址，需要提前指定发送地址，否则失败
            </summary>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <returns>是否发送成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.SendMail(System.String,System.String,System.Boolean)">
            <summary>
            发送邮件至地址，需要提前指定发送地址，否则失败
            </summary>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <param name="isHtml">是否是html格式化文本</param>
            <returns>是否发送成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.SendMail(System.Exception,System.String)">
            <summary>
            发生BUG至邮件地址，需要提前指定发送地址，否则失败
            </summary>
            <param name="ex">异常的BUG，同样试用兼容类型</param>
            <param name="addtion">额外信息</param>
            <returns>是否发送成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.SendMail(System.String,System.String,System.String)">
            <summary>
            发送邮件的方法，需要指定接收地址，主题及内容
            </summary>
            <param name="addr_to">接收地址</param>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <returns>是否发送成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.SendMail(System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送邮件的方法，默认发送别名，优先级，是否HTML
            </summary>
            <param name="addr_to">接收地址</param>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <param name="isHtml">是否是html格式的内容</param>
            <returns>是否发送成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.SendMail(System.String,System.String,System.String[],System.String,System.String,System.Net.Mail.MailPriority,System.Boolean)">
            <summary>
            发送邮件的方法，需要提供完整的参数信息
            </summary>
            <param name="addr_from">发送地址</param>
            <param name="name">发送别名</param>
            <param name="addr_to">接收地址</param>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <param name="priority">优先级</param>
            <param name="isHtml">邮件内容是否是HTML语言</param>
            <returns>发生是否成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftMsgQueue`1">
            <summary>
            一个简单通用的消息队列
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMsgQueue`1.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftMsgQueue`1.all_items">
            <summary>
            所有临时存储的数据
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftMsgQueue`1.MaxCache">
            <summary>
            临时消息存储的最大条数，必须大于10
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftMsgQueue`1.CurrentItem">
            <summary>
            获取最新添加进去的数据
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftMsgQueue`1.lock_queue">
            <summary>
            将集合进行锁定
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMsgQueue`1.AddNewItem(`0)">
            <summary>
            新增一条数据
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMsgQueue`1.ToSaveString">
            <summary>
            获取存储字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMsgQueue`1.LoadByString(System.String)">
            <summary>
            获取加载字符串
            </summary>
            <param name="content"></param>
        </member>
        <member name="T:HslCommunication.BasicFramework.MessageBoard">
            <summary>
            系统的消息类，用来发送消息，和确认消息的
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.MessageBoard.NameSend">
            <summary>
            发送方名称
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.MessageBoard.NameReceive">
            <summary>
            接收方名称
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.MessageBoard.SendTime">
            <summary>
            发送时间
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.MessageBoard.Content">
            <summary>
            发送的消息内容
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.MessageBoard.HasViewed">
            <summary>
            消息是否已经被查看
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftNumericalOrder">
            <summary>
            一个用于自动流水号生成的类，必须指定保存的文件，实时保存来确认安全
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftNumericalOrder.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            实例化一个流水号生成的对象
            </summary>
            <param name="textHead">流水号的头文本</param>
            <param name="timeFormate">流水号带的时间信息</param>
            <param name="numberLength">流水号数字的标准长度，不够补0</param>
            <param name="fileSavePath">流水号存储的文本位置</param>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftNumericalOrder.CurrentIndex">
            <summary>
            当前的生成序列号
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftNumericalOrder.TextHead">
            <summary>
            流水号的文本头
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftNumericalOrder.TimeFormate">
            <summary>
            时间格式默认年月日
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftNumericalOrder.NumberLength">
            <summary>
            流水号数字应该显示的长度
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftNumericalOrder.ToSaveString">
            <summary>
            获取流水号的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftNumericalOrder.LoadByString(System.String)">
            <summary>
            加载流水号
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftNumericalOrder.ClearNumericalOrder">
            <summary>
            清除流水号计数，进行重新计数
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftNumericalOrder.GetNumericalOrder">
            <summary>
            获取流水号数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftNumericalOrder.GetNumericalOrder(System.String)">
            <summary>
            获取流水号数据
            </summary>
            <param name="textHead">指定一个新的文本头</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftNumericalOrder.GetLongOrder">
            <summary>
            单纯的获取数字形式的流水号
            </summary>
            <returns></returns>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftNumericalOrder.AsyncCoordinator">
            <summary>
            高性能存储块
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftIncrementCount">
            <summary>
            一个简单的不持久化的序号自增类，采用线程安全实现，并允许指定最大数字，到达后清空从指定数开始
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftIncrementCount.#ctor(System.Int64,System.Int64)">
            <summary>
            实例化一个自增信息的对象，包括最大值
            </summary>
            <param name="max">数据的最大值，必须指定</param>
            <param name="start">数据的起始值，默认为0</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftIncrementCount.GetCurrentValue">
            <summary>
            获取自增信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.GraphDirection">
            <summary>
            图形的方向
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.GraphDirection.Upward">
            <summary>
            向上
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.GraphDirection.Downward">
            <summary>
            向下
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.GraphDirection.Ledtward">
            <summary>
            向左
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.GraphDirection.Rightward">
            <summary>
            向右
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.Paintdata">
            <summary>
            包含整型和字符串描述的数据类型
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.Paintdata.Count">
            <summary>
            数量
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.Paintdata.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.GraphicRender">
            <summary>
            图形的呈现方式
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.GraphicRender.Histogram">
            <summary>
            直方图
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.GraphicRender.Piechart">
            <summary>
            饼图
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.GraphicRender.Linegraph">
            <summary>
            折线图
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftPainting">
            <summary>
            静态类，包含了几个常用的画图方法，获取字符串，绘制小三角等
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftPainting.GetGraphicFromArray(System.Int32[],System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            获取一个直方图
            </summary>
            <param name="array">数据数组</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="degree">刻度划分等级</param>
            <param name="lineColor">线条颜色</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftPainting.ComputePaintLocationY(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            计算绘图时的相对偏移值
            </summary>
            <param name="max">0-100分的最大值，就是指准备绘制的最大值</param>
            <param name="min">0-100分的最小值，就是指准备绘制的最小值</param>
            <param name="height">实际绘图区域的高度</param>
            <param name="value">需要绘制数据的当前值</param>
            <returns>相对于0的位置，还需要增加上面的偏值</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftPainting.ComputePaintLocationY(System.Single,System.Single,System.Int32,System.Single)">
            <summary>
            计算绘图时的相对偏移值
            </summary>
            <param name="max">0-100分的最大值，就是指准备绘制的最大值</param>
            <param name="min">0-100分的最小值，就是指准备绘制的最小值</param>
            <param name="height">实际绘图区域的高度</param>
            <param name="value">需要绘制数据的当前值</param>
            <returns>相对于0的位置，还需要增加上面的偏值</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftPainting.PaintCoordinateDivide(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Font,System.Drawing.Brush,System.Drawing.StringFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            绘制坐标系中的刻度线
            </summary>
            <param name="g"></param>
            <param name="penLine"></param>
            <param name="penDash"></param>
            <param name="font"></param>
            <param name="brush"></param>
            <param name="sf"></param>
            <param name="degree"></param>
            <param name="max"></param>
            <param name="min"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="left"></param>
            <param name="right"></param>
            <param name="up"></param>
            <param name="down"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftPainting.PaintTriangle(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.Point,System.Int32,HslCommunication.BasicFramework.GraphDirection)">
            <summary>
            根据指定的方向绘制一个箭头
            </summary>
            <param name="g"></param>
            <param name="brush"></param>
            <param name="point"></param>
            <param name="size"></param>
            <param name="direction"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftPainting.GetGraphicFromArray(HslCommunication.BasicFramework.Paintdata[],System.Int32,System.Int32,HslCommunication.BasicFramework.GraphicRender)">
            <summary>
            根据数据生成一个可视化的图形
            </summary>
            <param name="array">数据集合</param>
            <param name="width">需要绘制图形的宽度</param>
            <param name="height">需要绘制图形的高度</param>
            <param name="graphic">指定绘制成什么样子的图形</param>
            <returns>返回一个bitmap对象</returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftSecurity">
            <summary>
            字符串加密解密相关的自定义类
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSecurity.MD5Encrypt(System.String)">
            <summary>
            加密数据，采用对称加密的方式
            </summary>
            <param name="pToEncrypt">待加密的数据</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSecurity.MD5Encrypt(System.String,System.String)">
            <summary>
            加密数据，采用对称加密的方式
            </summary>
            <param name="pToEncrypt">待加密的数据</param>
            <param name="Password">密钥，长度为8，英文或数字</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSecurity.MD5Decrypt(System.String)">
            <summary>
            解密过程，使用的是对称的加密
            </summary>
            <param name="pToDecrypt">等待解密的字符</param>
            <returns>返回原密码，如果解密失败，返回‘解密失败’</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSecurity.MD5Decrypt(System.String,System.String)">
            <summary>
            解密过程，使用的是对称的加密
            </summary>
            <param name="pToDecrypt">等待解密的字符</param>
            <param name="password">密钥，长度为8，英文或数字</param>
            <returns>返回原密码，如果解密失败，返回‘解密失败’</returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftSqlOperate">
            <summary>
            数据库操作的相关类，包含了常用的方法，避免大量的重复代码
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSql(System.String,System.String)">
            <summary>
            普通的执行SQL语句，并返回影响行数，该方法应该放到try-catch代码块中
            </summary>
            <param name="conStr">数据库的连接字符串</param>
            <param name="cmdStr">sql语句，适合插入，更新，删除</param>
            <returns>返回受影响的行数</returns>
            <exception cref="T:System.Data.SqlClient.SqlException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSql(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            普通的执行SQL语句，并返回影响行数，该方法应该放到try-catch代码块中
            </summary>
            <param name="conn">数据库的连接对象</param>
            <param name="cmdStr">sql语句，适合插入，更新，删除</param>
            <returns>返回受影响的行数</returns>
            <exception cref="T:System.Data.SqlClient.SqlException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectTable(System.String,System.String)">
            <summary>
            选择数据表的执行SQL语句，并返回最终数据表，该方法应该放到try-catch代码块中
            </summary>
            <param name="conStr">数据库的连接字符串</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据表</returns>
            <exception cref="T:System.Data.SqlClient.SqlException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectTable(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            选择数据表的执行SQL语句，并返回最终数据表，该方法应该放到try-catch代码块中
            </summary>
            <param name="conn">数据库连接对象</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据表</returns>
            <exception cref="T:System.Data.SqlClient.SqlException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectEnumerable``1(System.String,System.String)">
            <summary>
            选择指定类型数据集合执行SQL语句，并返回指定类型的数据集合，该方法应该放到try-catch代码块中
            </summary>
            <param name="conStr">数据库的连接字符串</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据集合</returns>
            <exception cref="T:System.Data.SqlClient.SqlException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectEnumerable``1(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            选择指定类型数据集合执行SQL语句，并返回指定类型的数据集合，该方法应该放到try-catch代码块中
            </summary>
            <param name="conn">数据库的连接对象</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据集合</returns>
            <exception cref="T:System.Data.SqlClient.SqlException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectObject``1(System.String,System.String)">
            <summary>
            更新指定类型数据执行SQL语句，并返回指定类型的数据集合，该方法应该放到try-catch代码块中
            </summary>
            <param name="conStr">数据库的连接字符串</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据</returns>
            <exception cref="T:System.Data.SqlClient.SqlException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectObject``1(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            更新指定类型数据执行SQL语句，并返回指定类型的数据集合，该方法应该放到try-catch代码块中
            </summary>
            <param name="conn">数据库的连接对象</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据</returns>
            <exception cref="T:System.Data.SqlClient.SqlException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectCount(System.String,System.String)">
            <summary>
            用于选择聚合函数值的方法，例如Count，Average，Max，Min，Sum等最终只有一个结果值的对象
            </summary>
            <param name="conStr">数据库的连接字符串</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectCount(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            用于选择聚合函数值的方法，例如Count，Average，Max，Min，Sum等最终只有一个结果值的对象
            </summary>
            <param name="conn">数据库的连接对象</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.ISqlDataType">
            <summary>
            数据库对应类的读取接口
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.ISqlDataType.LoadBySqlDataReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            根据sdr对象初始化数据的方法
            </summary>
            <param name="sdr"></param>
        </member>
        <member name="T:HslCommunication.BasicFramework.SystemVersion">
            <summary>
            系统版本类，由三部分组成，包含了一个大版本，小版本，修订版，还有一个开发者维护的内部版
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.#ctor(System.String)">
            <summary>
            根据格式化字符串的版本号初始化
            </summary>
            <param name="VersionString">格式化的字符串，例如：1.0或1.0.0或1.0.0.0503</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            根据指定的数字实例化一个对象
            </summary>
            <param name="main">主版本</param>
            <param name="sec">次版本</param>
            <param name="edit">修订版</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            根据指定的数字实例化一个对象
            </summary>
            <param name="main">主版本</param>
            <param name="sec">次版本</param>
            <param name="edit">修订版</param>
            <param name="inner">内部版本号</param>
        </member>
        <member name="P:HslCommunication.BasicFramework.SystemVersion.MainVersion">
            <summary>
            主版本
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SystemVersion.SecondaryVersion">
            <summary>
            次版本
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SystemVersion.EditVersion">
            <summary>
            修订版
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SystemVersion.InnerVersion">
            <summary>
            内部版本号，或者是版本号表示为年月份+内部版本的表示方式
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.ToString(System.String)">
            <summary>
            根据格式化为支持返回的不同信息的版本号
            C返回1.0.0.0
            N返回1.0.0
            S返回1.0
            </summary>
            <param name="format">格式化信息</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.ToString">
            <summary>
            获取版本号的字符串形式，如果内部版本号为0，则显示时不携带
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.op_Equality(HslCommunication.BasicFramework.SystemVersion,HslCommunication.BasicFramework.SystemVersion)">
            <summary>
            判断是否相等
            </summary>
            <param name="SV1">第一个版本</param>
            <param name="SV2">第二个版本</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.op_Inequality(HslCommunication.BasicFramework.SystemVersion,HslCommunication.BasicFramework.SystemVersion)">
            <summary>
            判断是否不相等
            </summary>
            <param name="SV1">第一个版本号</param>
            <param name="SV2">第二个版本号</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.op_GreaterThan(HslCommunication.BasicFramework.SystemVersion,HslCommunication.BasicFramework.SystemVersion)">
            <summary>
            判断一个版本是否大于另一个版本
            </summary>
            <param name="SV1">第一个版本</param>
            <param name="SV2">第二个版本</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.op_LessThan(HslCommunication.BasicFramework.SystemVersion,HslCommunication.BasicFramework.SystemVersion)">
            <summary>
            判断第一个版本是否小于第二个版本
            </summary>
            <param name="SV1"></param>
            <param name="SV2"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.Equals(System.Object)">
            <summary>
            判断两个实例是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.VersionInfo">
            <summary>
            版本信息类，用于展示版本发布信息
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.VersionInfo.ReleaseDate">
            <summary>
            版本的发行日期
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.VersionInfo.UpdateDetails">
            <summary>
            版本的更新细节
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.VersionInfo.VersionNum">
            <summary>
            版本号
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.VersionInfo.ToString">
            <summary>
            获取版本号
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftZipped">
            <summary>
            一个负责压缩解压数据字节的类
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftZipped.CompressBytes(System.Byte[])">
            <summary>
            压缩字节数据
            </summary>
            <param name="bytes">等待被压缩的数据</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>压缩之后的字节数据</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftZipped.Decompress(System.Byte[])">
            <summary>
            解压压缩后的数据
            </summary>
            <param name="bytes">压缩后的数据</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>压缩前的原始字节数据</returns>
        </member>
        <member name="T:HslCommunication.Controls.UserCurve">
            <summary>
            曲线控件对象
            </summary>
            <remarks>
            详细参照如下的博客:
            </remarks>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.#ctor">
            <summary>
            实例化一个曲线显示的控件
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.ValueMaxLeft">
            <summary>
            获取或设置图形的纵坐标的最大值，该值必须大于最小值
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.ValueMinLeft">
            <summary>
            获取或设置图形的纵坐标的最小值，该值必须小于最大值
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.ValueMaxRight">
            <summary>
            获取或设置图形的纵坐标的最大值，该值必须大于最小值
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.ValueMinRight">
            <summary>
            获取或设置图形的纵坐标的最小值，该值必须小于最大值
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.ValueSegment">
            <summary>
            获取或设置图形的纵轴分段数
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.IsAbscissaStrech">
            <summary>
            获取或设置所有的数据是否强制在一个界面里显示
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.StrechDataCountMax">
            <summary>
            获取或设置拉伸模式下的最大数据量
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.IsRenderDashLine">
            <summary>
            获取或设置虚线是否进行显示
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.ColorLinesAndText">
            <summary>
            获取或设置坐标轴及相关信息文本的颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.ColorDashLines">
            <summary>
            获取或设置虚线的颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.IntervalAbscissaText">
            <summary>
            获取或设置纵向虚线的分隔情况，单位为多少个数据
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.TextAddFormat">
            <summary>
            获取或设置实时数据新增时文本相对应于时间的格式化字符串，默认HH:mm
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.Title">
            <summary>
            获取或设置图标的标题信息
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.SetCurveText(System.String[])">
            <summary>
            设置曲线的横坐标文本，适用于显示一些固定的曲线信息
            </summary>
            <param name="descriptions">应该和曲线的点数一致</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.SetLeftCurve(System.String,System.Single[])">
            <summary>
            新增或修改一条指定关键字的左参考系曲线数据，需要指定数据，颜色随机，没有数据上限，线条宽度为1
            </summary>
            <param name="key">曲线关键字</param>
            <param name="data">曲线的具体数据</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.SetLeftCurve(System.String,System.Single[],System.Drawing.Color)">
            <summary>
            新增或修改一条指定关键字的左参考系曲线数据，需要指定数据，颜色，没有数据上限，线条宽度为1
            </summary>
            <param name="key">曲线关键字</param>
            <param name="data"></param>
            <param name="lineColor"></param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.SetRightCurve(System.String,System.Single[])">
            <summary>
            新增或修改一条指定关键字的右参考系曲线数据，需要指定数据，颜色随机，没有数据上限，线条宽度为1
            </summary>
            <param name="key">曲线关键字</param>
            <param name="data"></param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.SetRightCurve(System.String,System.Single[],System.Drawing.Color)">
            <summary>
            新增或修改一条指定关键字的右参考系曲线数据，需要指定数据，颜色，没有数据上限，线条宽度为1
            </summary>
            <param name="key">曲线关键字</param>
            <param name="data"></param>
            <param name="lineColor"></param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.SetCurve(System.String,System.Boolean,System.Single[],System.Drawing.Color,System.Single)">
            <summary>
            新增或修改一条指定关键字的曲线数据，需要指定参考系及数据，颜色，线条宽度
            </summary>
            <param name="key">曲线关键字</param>
            <param name="isLeft">是否以左侧坐标轴为参照系</param>
            <param name="data">数据</param>
            <param name="lineColor">线条颜色</param>
            <param name="thickness">线条宽度</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.RemoveCurve(System.String)">
            <summary>
            移除指定关键字的曲线
            </summary>
            <param name="key">曲线关键字</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.RemoveAllCurve">
            <summary>
            移除指定关键字的曲线
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.AddCurveData(System.String,System.Single[],System.Boolean)">
            <summary>
            新增指定关键字曲线的一个数据，注意该关键字的曲线必须存在，否则无效
            </summary>
            <param name="key">新增曲线的关键字</param>
            <param name="values"></param>
            <param name="isUpdateUI">是否刷新界面</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.AddCurveData(System.String,System.Single)">
            <summary>
            新增指定关键字曲线的一个数据，注意该关键字的曲线必须存在，否则无效
            </summary>
            <param name="key">曲线的关键字</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.AddCurveData(System.String,System.Single[])">
            <summary>
            新增指定关键字曲线的一组数据，注意该关键字的曲线必须存在，否则无效
            </summary>
            <param name="key">曲线的关键字</param>
            <param name="values">数组值</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.AddCurveData(System.String[],System.Single[])">
            <summary>
            新增指定关键字数组曲线的一组数据，注意该关键字的曲线必须存在，否则无效，一个数据对应一个数组
            </summary>
            <param name="keys">曲线的关键字数组</param>
            <param name="values">数组值</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.AddLeftAuxiliary(System.Single)">
            <summary>
            新增一条左侧的辅助线，使用默认的文本颜色
            </summary>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.AddLeftAuxiliary(System.Single,System.Drawing.Color)">
            <summary>
            新增一条左侧的辅助线，使用指定的颜色
            </summary>
            <param name="value">数据值</param>
            <param name="lineColor">线条颜色</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.AddLeftAuxiliary(System.Single,System.Drawing.Color,System.Single)">
            <summary>
            新增一条左侧的辅助线
            </summary>
            <param name="value">数据值</param>
            <param name="lineColor">线条颜色</param>
            <param name="lineThickness">线条宽度</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.AddRightAuxiliary(System.Single)">
            <summary>
            新增一条右侧的辅助线，使用默认的文本颜色
            </summary>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.AddRightAuxiliary(System.Single,System.Drawing.Color)">
            <summary>
            新增一条右侧的辅助线，使用指定的颜色
            </summary>
            <param name="value">数据值</param>
            <param name="lineColor">线条颜色</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.AddRightAuxiliary(System.Single,System.Drawing.Color,System.Single)">
            <summary>
            新增一条右侧的辅助线
            </summary>
            <param name="value">数据值</param>
            <param name="lineColor">线条颜色</param>
            <param name="lineThickness">线条宽度</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.RemoveAuxiliary(System.Single)">
            <summary>
            移除所有的指定值的辅助曲线，包括左边的和右边的
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.RemoveAllAuxiliary">
            <summary>
            移除所有的辅助线
            </summary>
        </member>
        <member name="F:HslCommunication.Controls.UserCurve.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.HslCurveItem">
            <summary>
            曲线数据对象
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.HslCurveItem.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="F:HslCommunication.Controls.HslCurveItem.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.HslCurveItem.LineThickness">
            <summary>
            线条的宽度
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.HslCurveItem.LineColor">
            <summary>
            曲线颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.HslCurveItem.IsLeftFrame">
            <summary>
            是否左侧参考系，True为左侧，False为右侧
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.AuxiliaryLine">
            <summary>
            辅助线对象
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.AuxiliaryLine.Value">
            <summary>
            实际的数据值
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.AuxiliaryLine.PaintValue">
            <summary>
            实际的数据绘制
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.AuxiliaryLine.LineColor">
            <summary>
            辅助线的颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.AuxiliaryLine.PenDash">
            <summary>
            辅助线的画笔资源
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.AuxiliaryLine.LineThickness">
            <summary>
            辅助线的宽度
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.AuxiliaryLine.LineTextBrush">
            <summary>
            辅助线文本的画刷
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.AuxiliaryLine.IsLeftFrame">
            <summary>
            是否左侧参考系，True为左侧，False为右侧
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.AuxiliaryLine.Dispose">
            <summary>
            释放内存信息
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.UserGaugeChart">
            <summary>
            仪表盘控件类
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserGaugeChart.#ctor">
            <summary>
            实例化一个仪表盘控件
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserGaugeChart.GetCenterPoint">
            <summary>
            获取中心点的坐标
            </summary>
            <returns></returns>
        </member>
        <member name="P:HslCommunication.Controls.UserGaugeChart.GaugeBorder">
            <summary>
            获取或设置仪表盘的背景色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserGaugeChart.PointerColor">
            <summary>
            获取或设置指针的颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserGaugeChart.ValueStart">
            <summary>
            获取或设置数值的起始值，默认为0
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserGaugeChart.ValueMax">
            <summary>
            获取或设置数值的最大值，默认为100
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserGaugeChart.Value">
            <summary>
            获取或设置数值的当前值，应该处于最小值和最大值之间
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserGaugeChart.ValueAlarmMax">
            <summary>
            获取或设置数值的上限报警值，设置为超过最大值则无上限报警
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserGaugeChart.ValueAlarmMin">
            <summary>
            获取或设置数值的下限报警值，设置为超过最大值则无上限报警
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserGaugeChart.SegmentCount">
            <summary>
            获取或设置仪表盘的分割段数，最小为2，最大1000
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserGaugeChart.UnitText">
            <summary>
            获取或设置仪表盘的单位描述文本
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserGaugeChart.IsTextUnderPointer">
            <summary>
            获取或设置文本是否是指针的下面
            </summary>
        </member>
        <member name="F:HslCommunication.Controls.UserGaugeChart.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserGaugeChart.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.Controls.UserGaugeChart.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.UserLantern">
            <summary>
            信号灯的控件类
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserLantern.#ctor">
            <summary>
            实例化一个信号灯控件的对象
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserLantern.LanternBackground">
            <summary>
            获取或设置开关按钮的背景色
            </summary>
        </member>
        <member name="F:HslCommunication.Controls.UserLantern.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserLantern.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.Controls.UserLantern.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.UserPieChart">
            <summary>
            一个饼图的控件
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserPieChart.#ctor">
            <summary>
            实例化一个饼图的控件
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserPieChart.IsRenderPercent">
            <summary>
            是否显示百分比信息
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserPieChart.IsRenderSmall">
            <summary>
            是否在图形上显示占比非常小的文本信息
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserPieChart.GetRandomColor">
            <summary>
            随机生成颜色，该颜色相对于白色为深色颜色
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Controls.UserPieChart.SetDataSource(HslCommunication.Core.HslPieItem[])">
            <summary>
            设置显示的数据源
            </summary>
            <param name="source">特殊的显示对象</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:HslCommunication.Controls.UserPieChart.SetDataSource(System.String[],System.Int32[])">
            <summary>
            根据名称和值进行数据源的显示，两者的长度需要一致
            </summary>
            <param name="names">名称</param>
            <param name="values">值</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="F:HslCommunication.Controls.UserPieChart.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserPieChart.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.Controls.UserPieChart.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.UserSwitch">
            <summary>
            一个开关按钮类
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserSwitch.#ctor">
            <summary>
            实例化一个开关按钮对象
            </summary>
        </member>
        <member name="E:HslCommunication.Controls.UserSwitch.OnSwitchChanged">
            <summary>
            开关按钮发生变化的事件
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserSwitch.SwitchBackground">
            <summary>
            获取或设置开关按钮的背景色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserSwitch.SwitchForeground">
            <summary>
            获取或设置开关按钮的前景色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserSwitch.SwitchStatus">
            <summary>
            获取或设置开关按钮的开合状态
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserSwitch.SwitchStatusDescription">
            <summary>
            获取或设置两种开关状态的文本描述，例如：new string[]{"Off","On"}
            </summary>
        </member>
        <member name="F:HslCommunication.Controls.UserSwitch.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserSwitch.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.Controls.UserSwitch.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.UserVerticalProgress">
            <summary>
            一个直立的进度条控件，满足不同的情况使用
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserVerticalProgress.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserVerticalProgress.Cursor">
            <summary>
            获取或设置光标在控件上显示的信息
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserVerticalProgress.BackColor">
            <summary>
            获取或设置控件的背景颜色值
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserVerticalProgress.ProgressColor">
            <summary>
            获取或设置进度的颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserVerticalProgress.Max">
            <summary>
            进度条的最大值，默认为100
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserVerticalProgress.Value">
            <summary>
            当前进度条的值，不能大于最大值或小于0
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserVerticalProgress.IsTextRender">
            <summary>
            是否显示进度
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserVerticalProgress.BorderColor">
            <summary>
            设置进度条的边框颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserVerticalProgress.ValueChangeSpeed">
            <summary>
            设置进度变更的速度
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserVerticalProgress.UseAnimation">
            <summary>
            获取或设置进度条变化的时候是否采用动画效果
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserVerticalProgress.ProgressStyle">
            <summary>
            进度条的样式
            </summary>
        </member>
        <member name="F:HslCommunication.Controls.UserVerticalProgress.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserVerticalProgress.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.Controls.UserVerticalProgress.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.ProgressStyle">
            <summary>
            进度条的样式
            </summary>
        </member>
        <member name="F:HslCommunication.Controls.ProgressStyle.Vertical">
            <summary>
            竖直的，纵向的进度条
            </summary>
        </member>
        <member name="F:HslCommunication.Controls.ProgressStyle.Horizontal">
            <summary>
            水平进度条
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.UserButton">
            <summary>
            一个自定义的按钮控件
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserButton.#ctor">
            <summary>
            实例化一个按钮对象
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.UIText">
            <summary>
            设置或获取显示的文本
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.TextColor">
            <summary>
            设置或获取显示文本的颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.CornerRadius">
            <summary>
            设置按钮的圆角
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.Selected">
            <summary>
            用来设置按钮的选中状态
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.ForeColor">
            <summary>
            已经弃用
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.Text">
            <summary>
            已经弃用
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.OriginalColor">
            <summary>
            按钮的背景色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.EnableColor">
            <summary>
            按钮的背景色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.ActiveColor">
            <summary>
            鼠标挪动时的活动颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.BorderVisiable">
            <summary>
            设置按钮的边框是否可见
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.CustomerInformation">
            <summary>
            存放用户需要保存的一些额外的信息
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserButton.PerformClick">
            <summary>
            触发一次点击的事件
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘数据区
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:HslCommunication.Controls.UserButton.OnClick(System.EventArgs)">
            <summary>
            点击按钮的触发事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:HslCommunication.Controls.UserButton.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            点击的时候触发事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:HslCommunication.Controls.UserButton.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserButton.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.Controls.UserButton.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.UserClock">
            <summary>
            一个时钟控件
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserClock.#ctor">
            <summary>
            实例化一个时钟控件
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserClock.当前时间">
            <summary>
            获取时钟的当前时间
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserClock.时钟指针颜色">
            <summary>
            获取或设置时钟指针的颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserClock.分钟指针颜色">
            <summary>
            获取或设置时钟分钟指针颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserClock.秒钟指针颜色">
            <summary>
            获取或设置秒钟指针颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserClock.显示文本">
            <summary>
            获取或设置时钟的个性化文本
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserClock.显示文本字体">
            <summary>
            字体
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserClock.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘控件显示
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:HslCommunication.Controls.UserClock.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserClock.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.Controls.UserClock.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.Core.IMessage.AlienMessage">
            <summary>
            异形消息对象，用于异形客户端的注册包接收以及验证使用
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.AlienMessage.ProtocolHeadBytesLength">
            <summary>
            本协议的消息头长度
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.AlienMessage.HeadBytes">
            <summary>
            头子节信息
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.AlienMessage.ContentBytes">
            <summary>
            内容字节信息
            </summary>
        </member>
        <member name="M:HslCommunication.Core.IMessage.AlienMessage.CheckHeadBytesLegal(System.Byte[])">
            <summary>
            检查接收的数据是否合法
            </summary>
            <param name="token">令牌</param>
            <returns>是否合法</returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.AlienMessage.GetContentLengthByHeadBytes">
            <summary>
            从头子节信息中解析出接下来需要接收的数据长度
            </summary>
            <returns>接下来的数据长度</returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.AlienMessage.GetHeadBytesIdentity">
            <summary>
            获取头子节里的特殊标识
            </summary>
            <returns>标识信息</returns>
        </member>
        <member name="P:HslCommunication.Core.IMessage.AlienMessage.SendBytes">
            <summary>
            发送的字节信息
            </summary>
        </member>
        <member name="T:HslCommunication.Core.IMessage.EFORTMessage">
            <summary>
            埃夫特机器人的消息对象
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.EFORTMessage.ProtocolHeadBytesLength">
            <summary>
            消息头的指令长度
            </summary>
        </member>
        <member name="M:HslCommunication.Core.IMessage.EFORTMessage.GetContentLengthByHeadBytes">
            <summary>
            从当前的头子节文件中提取出接下来需要接收的数据长度
            </summary>
            <returns>返回接下来的数据内容长度</returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.EFORTMessage.CheckHeadBytesLegal(System.Byte[])">
            <summary>
            检查头子节的合法性
            </summary>
            <param name="token">特殊的令牌，有些特殊消息的验证</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.EFORTMessage.GetHeadBytesIdentity">
            <summary>
            获取头子节里的消息标识
            </summary>
            <returns></returns>
        </member>
        <member name="P:HslCommunication.Core.IMessage.EFORTMessage.HeadBytes">
            <summary>
            消息头字节
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.EFORTMessage.ContentBytes">
            <summary>
            消息内容字节
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.EFORTMessage.SendBytes">
            <summary>
            发送的字节信息
            </summary>
        </member>
        <member name="T:HslCommunication.Core.IMessage.FetchWriteMessage">
            <summary>
            西门子Fetch/Write消息解析协议
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.FetchWriteMessage.ProtocolHeadBytesLength">
            <summary>
            消息头的指令长度
            </summary>
        </member>
        <member name="M:HslCommunication.Core.IMessage.FetchWriteMessage.GetContentLengthByHeadBytes">
            <summary>
            从当前的头子节文件中提取出接下来需要接收的数据长度
            </summary>
            <returns>返回接下来的数据内容长度</returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.FetchWriteMessage.CheckHeadBytesLegal(System.Byte[])">
            <summary>
            检查头子节的合法性
            </summary>
            <param name="token">特殊的令牌，有些特殊消息的验证</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.FetchWriteMessage.GetHeadBytesIdentity">
            <summary>
            获取头子节里的消息标识
            </summary>
            <returns></returns>
        </member>
        <member name="P:HslCommunication.Core.IMessage.FetchWriteMessage.HeadBytes">
            <summary>
            消息头字节
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.FetchWriteMessage.ContentBytes">
            <summary>
            消息内容字节
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.FetchWriteMessage.SendBytes">
            <summary>
            发送的字节信息
            </summary>
        </member>
        <member name="T:HslCommunication.Core.IMessage.FinsMessage">
            <summary>
            用于欧姆龙通信的Fins协议的消息解析规则
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.FinsMessage.ProtocolHeadBytesLength">
            <summary>
            消息头的指令长度
            </summary>
        </member>
        <member name="M:HslCommunication.Core.IMessage.FinsMessage.GetContentLengthByHeadBytes">
            <summary>
            从当前的头子节文件中提取出接下来需要接收的数据长度
            </summary>
            <returns>返回接下来的数据内容长度</returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.FinsMessage.CheckHeadBytesLegal(System.Byte[])">
            <summary>
            检查头子节的合法性
            </summary>
            <param name="token">特殊的令牌，有些特殊消息的验证</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.FinsMessage.GetHeadBytesIdentity">
            <summary>
            获取头子节里的消息标识
            </summary>
            <returns></returns>
        </member>
        <member name="P:HslCommunication.Core.IMessage.FinsMessage.HeadBytes">
            <summary>
            消息头字节
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.FinsMessage.ContentBytes">
            <summary>
            消息内容字节
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.FinsMessage.SendBytes">
            <summary>
            发送的字节信息
            </summary>
        </member>
        <member name="T:HslCommunication.Core.IMessage.HslMessage">
            <summary>
            本组件系统使用的默认的消息规则，说明解析和反解析规则的
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.HslMessage.ProtocolHeadBytesLength">
            <summary>
            本协议的消息头长度
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.HslMessage.HeadBytes">
            <summary>
            头子节信息
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.HslMessage.ContentBytes">
            <summary>
            内容字节信息
            </summary>
        </member>
        <member name="M:HslCommunication.Core.IMessage.HslMessage.CheckHeadBytesLegal(System.Byte[])">
            <summary>
            检查接收的数据是否合法
            </summary>
            <param name="token">令牌</param>
            <returns>是否合法</returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.HslMessage.GetContentLengthByHeadBytes">
            <summary>
            从头子节信息中解析出接下来需要接收的数据长度
            </summary>
            <returns>接下来的数据长度</returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.HslMessage.GetHeadBytesIdentity">
            <summary>
            获取头子节里的特殊标识
            </summary>
            <returns>标识信息</returns>
        </member>
        <member name="P:HslCommunication.Core.IMessage.HslMessage.SendBytes">
            <summary>
            发送的字节信息
            </summary>
        </member>
        <member name="T:HslCommunication.Core.IMessage.MelsecA1EBinaryMessage">
            <summary>
            三菱的A兼容1E帧协议解析规则
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.MelsecA1EBinaryMessage.ProtocolHeadBytesLength">
            <summary>
            消息头的指令长度
            </summary>
        </member>
        <member name="M:HslCommunication.Core.IMessage.MelsecA1EBinaryMessage.GetContentLengthByHeadBytes">
            <summary>
            从当前的头子节文件中提取出接下来需要接收的数据长度
            </summary>
            <returns>返回接下来的数据内容长度</returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.MelsecA1EBinaryMessage.CheckHeadBytesLegal(System.Byte[])">
            <summary>
            检查头子节的合法性
            </summary>
            <param name="token">特殊的令牌，有些特殊消息的验证</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.MelsecA1EBinaryMessage.GetHeadBytesIdentity">
            <summary>
            获取头子节里的消息标识
            </summary>
            <returns></returns>
        </member>
        <member name="P:HslCommunication.Core.IMessage.MelsecA1EBinaryMessage.HeadBytes">
            <summary>
            消息头字节
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.MelsecA1EBinaryMessage.ContentBytes">
            <summary>
            消息内容字节
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.MelsecA1EBinaryMessage.SendBytes">
            <summary>
            发送的字节信息
            </summary>
        </member>
        <member name="T:HslCommunication.Core.IMessage.MelsecQnA3EAsciiMessage">
            <summary>
            基于MC协议的Qna兼容3E帧协议的ASCII通讯消息机制
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.MelsecQnA3EAsciiMessage.ProtocolHeadBytesLength">
            <summary>
            消息头的指令长度
            </summary>
        </member>
        <member name="M:HslCommunication.Core.IMessage.MelsecQnA3EAsciiMessage.GetContentLengthByHeadBytes">
            <summary>
            从当前的头子节文件中提取出接下来需要接收的数据长度
            </summary>
            <returns>返回接下来的数据内容长度</returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.MelsecQnA3EAsciiMessage.CheckHeadBytesLegal(System.Byte[])">
            <summary>
            检查头子节的合法性
            </summary>
            <param name="token">特殊的令牌，有些特殊消息的验证</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.MelsecQnA3EAsciiMessage.GetHeadBytesIdentity">
            <summary>
            获取头子节里的消息标识
            </summary>
            <returns></returns>
        </member>
        <member name="P:HslCommunication.Core.IMessage.MelsecQnA3EAsciiMessage.HeadBytes">
            <summary>
            消息头字节
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.MelsecQnA3EAsciiMessage.ContentBytes">
            <summary>
            消息内容字节
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.MelsecQnA3EAsciiMessage.SendBytes">
            <summary>
            发送的字节信息
            </summary>
        </member>
        <member name="T:HslCommunication.Core.IMessage.MelsecQnA3EBinaryMessage">
            <summary>
            三菱的Qna兼容3E帧协议解析规则
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.MelsecQnA3EBinaryMessage.ProtocolHeadBytesLength">
            <summary>
            消息头的指令长度
            </summary>
        </member>
        <member name="M:HslCommunication.Core.IMessage.MelsecQnA3EBinaryMessage.GetContentLengthByHeadBytes">
            <summary>
            从当前的头子节文件中提取出接下来需要接收的数据长度
            </summary>
            <returns>返回接下来的数据内容长度</returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.MelsecQnA3EBinaryMessage.CheckHeadBytesLegal(System.Byte[])">
            <summary>
            检查头子节的合法性
            </summary>
            <param name="token">特殊的令牌，有些特殊消息的验证</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.MelsecQnA3EBinaryMessage.GetHeadBytesIdentity">
            <summary>
            获取头子节里的消息标识
            </summary>
            <returns></returns>
        </member>
        <member name="P:HslCommunication.Core.IMessage.MelsecQnA3EBinaryMessage.HeadBytes">
            <summary>
            消息头字节
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.MelsecQnA3EBinaryMessage.ContentBytes">
            <summary>
            消息内容字节
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.MelsecQnA3EBinaryMessage.SendBytes">
            <summary>
            发送的字节信息
            </summary>
        </member>
        <member name="T:HslCommunication.Core.IMessage.ModbusTcpMessage">
            <summary>
            Modbus-Tcp协议支持的消息解析类
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.ModbusTcpMessage.ProtocolHeadBytesLength">
            <summary>
            消息头的指令长度
            </summary>
        </member>
        <member name="M:HslCommunication.Core.IMessage.ModbusTcpMessage.GetContentLengthByHeadBytes">
            <summary>
            从当前的头子节文件中提取出接下来需要接收的数据长度
            </summary>
            <returns>返回接下来的数据内容长度</returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.ModbusTcpMessage.CheckHeadBytesLegal(System.Byte[])">
            <summary>
            检查头子节的合法性
            </summary>
            <param name="token">特殊的令牌，有些特殊消息的验证</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.ModbusTcpMessage.GetHeadBytesIdentity">
            <summary>
            获取头子节里的消息标识
            </summary>
            <returns></returns>
        </member>
        <member name="P:HslCommunication.Core.IMessage.ModbusTcpMessage.HeadBytes">
            <summary>
            消息头字节
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.ModbusTcpMessage.ContentBytes">
            <summary>
            消息内容字节
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.ModbusTcpMessage.SendBytes">
            <summary>
            发送的字节信息
            </summary>
        </member>
        <member name="T:HslCommunication.Core.IMessage.S7Message">
            <summary>
            西门子S7协议的消息解析规则
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.S7Message.ProtocolHeadBytesLength">
            <summary>
            西门子头字节的长度
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.S7Message.HeadBytes">
            <summary>
            头子节的数据
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.S7Message.ContentBytes">
            <summary>
            内容字节的数据
            </summary>
        </member>
        <member name="M:HslCommunication.Core.IMessage.S7Message.CheckHeadBytesLegal(System.Byte[])">
            <summary>
            检查头子节是否合法的判断
            </summary>
            <param name="token">令牌</param>
            <returns>是否合法的</returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.S7Message.GetContentLengthByHeadBytes">
            <summary>
            获取剩余的内容长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.S7Message.GetHeadBytesIdentity">
            <summary>
            获取消息号，此处无效
            </summary>
            <returns></returns>
        </member>
        <member name="P:HslCommunication.Core.IMessage.S7Message.SendBytes">
            <summary>
            发送的字节信息
            </summary>
        </member>
        <member name="T:HslCommunication.Core.IMessage.INetMessage">
            <summary>
            本系统的消息类，包含了各种解析规则，数据信息提取规则
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.INetMessage.ProtocolHeadBytesLength">
            <summary>
            消息头的指令长度
            </summary>
        </member>
        <member name="M:HslCommunication.Core.IMessage.INetMessage.GetContentLengthByHeadBytes">
            <summary>
            从当前的头子节文件中提取出接下来需要接收的数据长度
            </summary>
            <returns>返回接下来的数据内容长度</returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.INetMessage.CheckHeadBytesLegal(System.Byte[])">
            <summary>
            检查头子节的合法性
            </summary>
            <param name="token">特殊的令牌，有些特殊消息的验证</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.IMessage.INetMessage.GetHeadBytesIdentity">
            <summary>
            获取头子节里的消息标识
            </summary>
            <returns></returns>
        </member>
        <member name="P:HslCommunication.Core.IMessage.INetMessage.HeadBytes">
            <summary>
            消息头字节
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.INetMessage.ContentBytes">
            <summary>
            消息内容字节
            </summary>
        </member>
        <member name="P:HslCommunication.Core.IMessage.INetMessage.SendBytes">
            <summary>
            发送的字节信息
            </summary>
        </member>
        <member name="T:HslCommunication.Core.IReadWriteNet">
            <summary>
            所有的和设备或是交互类统一读写标准
            </summary>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.ReadInt16(System.String)">
            <summary>
            读取16位的有符号整型
            </summary>
            <param name="address">起始地址</param>
            <returns>带有成功标识的short数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.ReadUInt16(System.String)">
            <summary>
            读取16位的无符号整型
            </summary>
            <param name="address">起始地址</param>
            <returns>带有成功标识的ushort数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.ReadInt32(System.String)">
            <summary>
            读取32位的有符号整型
            </summary>
            <param name="address">起始地址</param>
            <returns>带有成功标识的int数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.ReadUInt32(System.String)">
            <summary>
            读取32位的无符号整型
            </summary>
            <param name="address">起始地址</param>
            <returns>带有成功标识的uint数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.ReadInt64(System.String)">
            <summary>
            读取64位的有符号整型
            </summary>
            <param name="address">起始地址</param>
            <returns>带有成功标识的long数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.ReadUInt64(System.String)">
            <summary>
            读取64位的无符号整型
            </summary>
            <param name="address">起始地址</param>
            <returns>带有成功标识的ulong数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.ReadFloat(System.String)">
            <summary>
            读取单浮点精度的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带有成功标识的float数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.ReadDouble(System.String)">
            <summary>
            读取双浮点精度的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带有成功标识的double数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.ReadString(System.String,System.UInt16)">
            <summary>
            读取字符串数据，
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数据长度</param>
            <returns>带有成功标识的string数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.ReadCustomer``1(System.String)">
            <summary>
            读取自定义的数据类型，需要继承自IDataTransfer接口
            </summary>
            <typeparam name="T">自定义的类型</typeparam>
            <param name="address">起始地址</param>
            <returns>带有成功标识的自定义类型数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.Write(System.String,System.Int16)">
            <summary>
            写入short数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.Write(System.String,System.Int16[])">
            <summary>
            写入ushort数据
            </summary>
            <param name="address">起始地址</param>
            <param name="values">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.Write(System.String,System.Int32)">
            <summary>
            写入int数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.Write(System.String,System.Int32[])">
            <summary>
            写入int[]数组
            </summary>
            <param name="address">起始地址</param>
            <param name="values">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.Write(System.String,System.Int64)">
            <summary>
            写入long数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.Write(System.String,System.Int64[])">
            <summary>
            写入long数组
            </summary>
            <param name="address">起始地址</param>
            <param name="values">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.Write(System.String,System.Single)">
            <summary>
            写入float数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.Write(System.String,System.Single[])">
            <summary>
            写入float数组
            </summary>
            <param name="address">起始地址</param>
            <param name="values">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.Write(System.String,System.Double)">
            <summary>
            写入double数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.Write(System.String,System.Double[])">
            <summary>
            写入double数组
            </summary>
            <param name="address">起始地址</param>
            <param name="values">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.Write(System.String,System.String)">
            <summary>
            写入字符串信息，编码为ASCII
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IReadWriteNet.WriteCustomer``1(System.String,``0)">
            <summary>
            写入自定义类型的数据，该类型必须继承自IDataTransfer接口
            </summary>
            <typeparam name="T">类型对象</typeparam>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="T:HslCommunication.Core.Net.NetworkAlienClient">
            <summary>
            异形客户端的基类，提供了基础的异形操作
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkAlienClient.#ctor">
            <summary>
            默认的无参构造方法
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkAlienClient.ThreadPoolLogin(System.Object)">
            <summary>
            登录的回调方法
            </summary>
            <param name="obj">传入的异步对象</param>
        </member>
        <member name="E:HslCommunication.Core.Net.NetworkAlienClient.OnClientConnected">
            <summary>
            当有服务器连接上来的时候触发
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkAlienClient.GetResponse(System.Byte)">
            <summary>
            获取返回的命令信息
            </summary>
            <param name="status">状态</param>
            <returns>回发的指令信息</returns>
        </member>
        <member name="F:HslCommunication.Core.Net.NetworkAlienClient.StatusOk">
            <summary>
            状态登录成功
            </summary>
        </member>
        <member name="F:HslCommunication.Core.Net.NetworkAlienClient.StatusLoginRepeat">
            <summary>
            重复登录
            </summary>
        </member>
        <member name="F:HslCommunication.Core.Net.NetworkAlienClient.StatusLoginForbidden">
            <summary>
            禁止登录
            </summary>
        </member>
        <member name="F:HslCommunication.Core.Net.NetworkAlienClient.StatusPasswodWrong">
            <summary>
            密码错误
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkAlienClient.IsClientOnline(HslCommunication.Core.Net.AlienSession)">
            <summary>
            检测当前的DTU是否在线
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkAlienClient.IsClientPermission(HslCommunication.Core.Net.AlienSession)">
            <summary>
            检测当前的dtu是否允许登录
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkAlienClient.SetPassword(System.Byte[])">
            <summary>
            设置密码，长度为6
            </summary>
            <param name="password"></param>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkAlienClient.SetTrustClients(System.String[])">
            <summary>
            设置可信任的客户端列表
            </summary>
            <param name="clients"></param>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkAlienClient.AlienSessionLoginOut(HslCommunication.Core.Net.AlienSession)">
            <summary>
            退出异形客户端
            </summary>
            <param name="session">异形客户端的会话</param>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkAlienClient.ToString">
            <summary>
            获取本对象的字符串表示形式
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Core.Net.NetworkBase">
            <summary>
            本系统所有网络类的基类，该类为抽象类，无法进行实例化
            </summary>
            <remarks>
            network base class, support basic operation with socket
            </remarks>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkBase.#ctor">
            <summary>
            实例化一个NetworkBase对象
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.NetworkBase.LogNet">
            <summary>
            组件的日志工具，支持日志记录
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.NetworkBase.Token">
            <summary>
            网络类的身份令牌
            </summary>
        </member>
        <member name="F:HslCommunication.Core.Net.NetworkBase.CoreSocket">
            <summary>
            通讯类的核心套接字
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkBase.ThreadPoolCheckTimeOut(System.Object)">
            <summary>
            检查网络套接字是否操作超时，需要对套接字进行封装
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkBase.Receive(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            接收固定长度的字节数组
            </summary>
            <remarks>
            Receive Special Length Bytes
            </remarks>
            <param name="socket">网络通讯的套接字</param>
            <param name="length">准备接收的数据长度</param>
            <returns>包含了字节数据的结果类</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkBase.ReceiveMessage``1(System.Net.Sockets.Socket,System.Int32,``0)">
            <summary>
            接收一条完整的数据，使用异步接收完成，包含了指令头信息
            </summary>
            <param name="socket">已经打开的网络套接字</param>
            <param name="timeOut">超时时间</param>
            <param name="netMsg">消息规则</param>
            <returns>数据的接收结果对象</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkBase.Send(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            发送消息给套接字，直到完成的时候返回
            </summary>
            <param name="socket">网络套接字</param>
            <param name="data">字节数据</param>
            <returns>发送是否成功的结果</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkBase.SendCallBack(System.IAsyncResult)">
            <summary>
            发送数据异步返回的方法
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkBase.CreateSocketAndConnect(System.String,System.Int32)">
            <summary>
            创建一个新的socket对象并连接到远程的地址，默认超时时间为10秒钟
            </summary>
            <param name="ipAddress">Ip地址</param>
            <param name="port">端口号</param>
            <returns>返回套接字的封装结果对象</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkBase.CreateSocketAndConnect(System.String,System.Int32,System.Int32)">
            <summary>
            创建一个新的socket对象并连接到远程的地址
            </summary>
            <param name="ipAddress">Ip地址</param>
            <param name="port">端口号</param>
            <param name="timeOut">连接的超时时间</param>
            <returns>返回套接字的封装结果对象</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkBase.CreateSocketAndConnect(System.Net.IPEndPoint,System.Int32)">
            <summary>
            创建一个新的socket对象并连接到远程的地址
            </summary>
            <param name="endPoint">连接的目标终结点</param>
            <param name="timeOut">连接的超时时间</param>
            <returns>返回套接字的封装结果对象</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkBase.ConnectCallBack(System.IAsyncResult)">
            <summary>
            当连接的结果返回
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkBase.ReadStream(System.IO.Stream,System.Byte[])">
            <summary>
            读取流中的数据到缓存区
            </summary>
            <param name="stream">数据流</param>
            <param name="buffer">缓冲区</param>
            <returns>带有成功标志的读取数据长度</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkBase.WriteStream(System.IO.Stream,System.Byte[])">
            <summary>
            将缓冲区的数据写入到流里面去
            </summary>
            <param name="stream"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkBase.ToString">
            <summary>
            获取字符串表示形式
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Core.Net.NetworkFileServerBase">
            <summary>
            文件服务器类的基类，为直接映射文件模式和间接映射文件模式提供基础的方法支持
            </summary>
        </member>
        <member name="F:HslCommunication.Core.Net.NetworkFileServerBase.m_dictionary_files_marks">
            <summary>
            所有文件操作的词典锁
            </summary>
        </member>
        <member name="F:HslCommunication.Core.Net.NetworkFileServerBase.dict_hybirdLock">
            <summary>
            词典的锁
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkFileServerBase.GetFileMarksFromDictionaryWithFileName(System.String)">
            <summary>
            获取当前文件的读写锁，如果没有会自动创建
            </summary>
            <param name="filename">完整的文件路径</param>
            <returns>读写锁</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkFileServerBase.ReceiveInformationHead(System.Net.Sockets.Socket,System.Int32@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            接收本次操作的信息头数据
            </summary>
            <param name="socket">网络套接字</param>
            <param name="command">命令</param>
            <param name="fileName">文件名</param>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkFileServerBase.CreateRandomFileName">
            <summary>
            获取一个随机的文件名，由GUID码和随机数字组成
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkFileServerBase.ReturnAbsoluteFilePath(System.String,System.String,System.String)">
            <summary>
            返回服务器的绝对路径
            </summary>
            <param name="factory"></param>
            <param name="group"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkFileServerBase.ReturnAbsoluteFileName(System.String,System.String,System.String,System.String)">
            <summary>
            返回服务器的绝对路径
            </summary>
            <param name="factory"></param>
            <param name="group"></param>
            <param name="id"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkFileServerBase.ReturnRelativeFileName(System.String,System.String,System.String,System.String)">
            <summary>
            返回相对路径的名称
            </summary>
            <param name="factory"></param>
            <param name="group"></param>
            <param name="id"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkFileServerBase.MoveFileToNewFile(System.String,System.String)">
            <summary>
            移动一个文件到新的文件去
            </summary>
            <param name="fileNameOld"></param>
            <param name="fileNameNew"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkFileServerBase.DeleteFileAndCheck(System.Net.Sockets.Socket,System.String)">
            <summary>
            删除文件并回发确认信息，如果结果异常，则结束通讯
            </summary>
            <param name="socket">网络套接字</param>
            <param name="fullname">完整路径的文件名称</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkFileServerBase.StartInitialization">
            <summary>
            服务器启动时的操作
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkFileServerBase.CheckFolderAndCreate">
            <summary>
            检查文件夹是否存在，不存在就创建
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.NetworkFileServerBase.FilesDirectoryPath">
            <summary>
            文件所存储的路径
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkFileServerBase.GetDirectoryFiles(System.String,System.String,System.String)">
            <summary>
            获取文件夹的所有文件列表
            </summary>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkFileServerBase.GetDirectories(System.String,System.String,System.String)">
            <summary>
            获取文件夹的所有文件夹列表
            </summary>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkFileServerBase.ToString">
            <summary>
            获取本对象的字符串标识形式
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Core.Net.NetworkServerBase">
            <summary>
            服务器程序的基础类
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkServerBase.#ctor">
            <summary>
            实例化一个默认的对象
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.NetworkServerBase.IsStarted">
            <summary>
            服务器引擎是否启动
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.NetworkServerBase.Port">
            <summary>
            服务器的端口号
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkServerBase.AsyncAcceptCallback(System.IAsyncResult)">
            <summary>
            异步传入的连接申请请求
            </summary>
            <param name="iar"></param>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkServerBase.ThreadPoolLogin(System.Object)">
            <summary>
            用于登录的回调方法
            </summary>
            <param name="obj">socket对象</param>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkServerBase.StartInitialization">
            <summary>
            服务器启动时额外的初始化信息
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkServerBase.ServerStart(System.Int32)">
            <summary>
            启动服务器的引擎
            </summary>
            <param name="port">指定一个端口号</param>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkServerBase.ServerStart">
            <summary>
            使用已经配置好的端口启动服务器的引擎
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkServerBase.CloseAction">
            <summary>
            服务器关闭的时候需要做的事情
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkServerBase.ServerClose">
            <summary>
            关闭服务器的引擎
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkServerBase.ConnectHslAlientClient(System.String,System.Int32,System.String)">
            <summary>
            创建一个指定的异形客户端连接，使用Hsl协议来发送注册包
            </summary>
            <param name="ipAddress">Ip地址</param>
            <param name="port">端口号</param>
            <param name="dtuId">设备唯一ID号，最长11</param>
            <returns>是否成功连接</returns>
        </member>
        <member name="T:HslCommunication.Core.Net.AlienSession">
            <summary>
            异形客户端的异步对象
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.AlienSession.#ctor">
            <summary>
            实例化一个默认的参数
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.AlienSession.Socket">
            <summary>
            网络套接字
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.AlienSession.DTU">
            <summary>
            唯一的标识
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.AlienSession.IsStatusOk">
            <summary>
            指示当前的网络状态
            </summary>
        </member>
        <member name="T:HslCommunication.Core.Net.AppSession">
            <summary>
            网络会话信息
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.AppSession.#ctor">
            <summary>
            实例化一个构造方法
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.AppSession.WorkSocket">
            <summary>
            传输数据的对象
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.AppSession.IpAddress">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.AppSession.IpEndPoint">
            <summary>
            此连接对象连接的远程客户端
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.AppSession.LoginAlias">
            <summary>
            远程对象的别名
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.AppSession.HeartTime">
            <summary>
            心跳验证的时间点
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.AppSession.ClientType">
            <summary>
            客户端的类型
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.AppSession.ClientUniqueID">
            <summary>
            客户端唯一的标识
            </summary>
        </member>
        <member name="F:HslCommunication.Core.Net.AppSession.UdpEndPoint">
            <summary>
            UDP通信中的远程端
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.AppSession.BytesHead">
            <summary>
            指令头缓存
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.AppSession.AlreadyReceivedHead">
            <summary>
            已经接收的指令头长度
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.AppSession.BytesContent">
            <summary>
            数据内容缓存
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.AppSession.AlreadyReceivedContent">
            <summary>
            已经接收的数据内容长度
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.AppSession.KeyGroup">
            <summary>
            用于关键字分类使用
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.AppSession.Clear">
            <summary>
            清除本次的接收内容
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.AppSession.ToString">
            <summary>
            返回表示当前对象的字符串，以IP，端口，客户端名称组成
            </summary>
            <returns>字符串数据</returns>
        </member>
        <member name="P:HslCommunication.Core.Net.AsyncStateSend.WorkSocket">
            <summary>
            传输数据的对象
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.AsyncStateSend.Content">
            <summary>
            发送的数据内容
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.AsyncStateSend.AlreadySendLength">
            <summary>
            已经发送长度
            </summary>
        </member>
        <member name="T:HslCommunication.Core.Net.StateObject">
            <summary>
            网络中的异步对象
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.StateObject.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.StateObject.#ctor(System.Int32)">
            <summary>
            实例化一个对象，指定接收或是发送的数据长度
            </summary>
            <param name="length"></param>
        </member>
        <member name="P:HslCommunication.Core.Net.StateObject.UniqueId">
            <summary>
            唯一的一串信息
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.StateObject.WorkSocket">
            <summary>
            网络套接字
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.StateObject.IsClose">
            <summary>
            是否关闭了通道
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.StateObject.Clear">
            <summary>
            清空旧的数据
            </summary>
        </member>
        <member name="T:HslCommunication.Core.Net.NetworkDoubleBase`2">
            <summary>
            支持长连接，短连接两个模式的通用客户端基类
            </summary>
            <typeparam name="TNetMessage">指定了消息的解析规则</typeparam>
            <typeparam name="TTransform">指定了数据转换的规则</typeparam>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.#ctor">
            <summary>
            默认的无参构造函数
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.NetworkDoubleBase`2.ByteTransform">
            <summary>
            当前客户端的数据变换机制
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.NetworkDoubleBase`2.ConnectTimeOut">
            <summary>
            获取或设置连接的超时时间
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.NetworkDoubleBase`2.ReceiveTimeOut">
            <summary>
            获取或设置接收服务器反馈的时间，如果为负数，则不接收反馈
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.NetworkDoubleBase`2.IpAddress">
            <summary>
            服务器的IP地址
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.NetworkDoubleBase`2.Port">
            <summary>
            服务器的端口号
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.NetworkDoubleBase`2.ConnectionId">
            <summary>
            当前连接的唯一ID号，默认为长度20的guid码加随机数组成，也可以自己指定
            </summary>
            <remarks>
            Current Connection ID, conclude guid and random data, also, you can spcified
            </remarks>
        </member>
        <member name="P:HslCommunication.Core.Net.NetworkDoubleBase`2.AlienSession">
            <summary>
            当前的异形连接对象，如果设置了异形连接的话
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.SetPersistentConnection">
            <summary>
            在读取数据之前可以调用本方法将客户端设置为长连接模式，相当于跳过了ConnectServer的结果验证，对异形客户端无效
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.ConnectServer">
            <summary>
            切换短连接模式到长连接模式，后面的每次请求都共享一个通道
            </summary>
            <returns>返回连接结果，如果失败的话（也即IsSuccess为False），包含失败信息</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.ConnectServer(HslCommunication.Core.Net.AlienSession)">
            <summary>
            使用指定的套接字创建异形客户端
            </summary>
            <returns>通常都为成功</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.ConnectClose">
            <summary>
            在长连接模式下，断开服务器的连接，并切换到短连接模式
            </summary>
            <returns>关闭连接，不需要查看IsSuccess属性查看</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.InitilizationOnConnect(System.Net.Sockets.Socket)">
            <summary>
            连接上服务器后需要进行的初始化操作
            </summary>
            <param name="socket">网络套接字</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.ExtraOnDisconnect(System.Net.Sockets.Socket)">
            <summary>
            在将要和服务器进行断开的情况下额外的操作
            </summary>
            <param name="socket">网络套接字</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.GetAvailableSocket">
            <summary>
            获取本次操作的可用的网络套接字
            </summary>
            <returns>是否成功，如果成功，使用这个套接字</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.CreateSocketAndInitialication">
            <summary>
            连接并初始化网络套接字
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.ReadFromCoreServer(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            在其他指定的套接字上，使用报文来通讯，传入需要发送的消息，返回一条完整的数据指令
            </summary>
            <param name="socket">指定的套接字</param>
            <param name="send">发送的完整的报文信息</param>
            <returns>接收的完整的报文信息</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.ReadFromCoreServer(System.Byte[])">
            <summary>
            使用底层的数据报文来通讯，传入需要发送的消息，返回一条完整的数据指令
            </summary>
            <param name="send">发送的完整的报文信息</param>
            <returns>接收的完整的报文信息</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.ReadFromCoreServerBase(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            使用底层的数据报文来通讯，传入需要发送的消息，返回最终的数据结果，被拆分成了头子节和内容字节信息
            </summary>
            <param name="socket">网络套接字</param>
            <param name="send">发送的数据</param>
            <returns>结果对象</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.ToString">
            <summary>
            获取本对象的字符串标识形式
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.GetBoolResultFromBytes(HslCommunication.OperateResult{System.Byte[]})">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.GetByteResultFromBytes(HslCommunication.OperateResult{System.Byte[]})">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.GetInt16ResultFromBytes(HslCommunication.OperateResult{System.Byte[]})">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.GetUInt16ResultFromBytes(HslCommunication.OperateResult{System.Byte[]})">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.GetInt32ResultFromBytes(HslCommunication.OperateResult{System.Byte[]})">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.GetUInt32ResultFromBytes(HslCommunication.OperateResult{System.Byte[]})">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.GetInt64ResultFromBytes(HslCommunication.OperateResult{System.Byte[]})">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.GetUInt64ResultFromBytes(HslCommunication.OperateResult{System.Byte[]})">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.GetSingleResultFromBytes(HslCommunication.OperateResult{System.Byte[]})">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.GetDoubleResultFromBytes(HslCommunication.OperateResult{System.Byte[]})">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkDoubleBase`2.GetStringResultFromBytes(HslCommunication.OperateResult{System.Byte[]})">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="T:HslCommunication.Core.Net.FileStateObject">
            <summary>
            文件传送的异步对象
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.FileStateObject.Stream">
            <summary>
            操作的流
            </summary>
        </member>
        <member name="T:HslCommunication.Core.Net.NetworkXBase">
            <summary>
            包含了主动异步接收的方法实现和文件类异步读写的实现
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.#ctor">
            <summary>
            默认的无参构造方法
            </summary>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.SendBytesAsync(HslCommunication.Core.Net.AppSession,System.Byte[])">
            <summary>
            发送数据的方法
            </summary>
            <param name="session">通信用的核心对象</param>
            <param name="content">完整的字节信息</param>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.SendCallBack(System.IAsyncResult)">
            <summary>
            发送回发方法
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.ReBeginReceiveHead(HslCommunication.Core.Net.AppSession,System.Boolean)">
            <summary>
            重新开始接收下一次的数据传递
            </summary>
            <param name="session">网络状态</param>
            <param name="isProcess">是否触发数据处理</param>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.HeadBytesReceiveCallback(System.IAsyncResult)">
            <summary>
            指令头接收方法
            </summary>
            <param name="ar">异步状态信息</param>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.ContentReceiveCallback(System.IAsyncResult)">
            <summary>
            数据内容接收方法
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.CheckRemoteToken(System.Byte[])">
            <summary>
            检查当前的头子节信息的令牌是否是正确的
            </summary>
            <param name="headBytes">头子节数据</param>
            <returns>令牌是验证成功</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.SendBaseAndCheckReceive(System.Net.Sockets.Socket,System.Int32,System.Int32,System.Byte[])">
            <summary>
            [自校验] 发送字节数据并确认对方接收完成数据，如果结果异常，则结束通讯
            </summary>
            <param name="socket">网络套接字</param>
            <param name="headcode">头指令</param>
            <param name="customer">用户指令</param>
            <param name="send">发送的数据</param>
            <returns>是否发送成功</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.SendBytesAndCheckReceive(System.Net.Sockets.Socket,System.Int32,System.Byte[])">
            <summary>
            [自校验] 发送字节数据并确认对方接收完成数据，如果结果异常，则结束通讯
            </summary>
            <param name="socket">网络套接字</param>
            <param name="customer">用户指令</param>
            <param name="send">发送的数据</param>
            <returns>是否发送成功</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.SendStringAndCheckReceive(System.Net.Sockets.Socket,System.Int32,System.String)">
            <summary>
            [自校验] 直接发送字符串数据并确认对方接收完成数据，如果结果异常，则结束通讯
            </summary>
            <param name="socket">网络套接字</param>
            <param name="customer">用户指令</param>
            <param name="send">发送的数据</param>
            <returns>是否发送成功</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.SendFileStreamToSocket(System.Net.Sockets.Socket,System.String,System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>
            [自校验] 将文件数据发送至套接字，如果结果异常，则结束通讯
            </summary>
            <param name="socket">网络套接字</param>
            <param name="filename">完整的文件路径</param>
            <param name="filelength">文件的长度</param>
            <param name="report">进度报告器</param>
            <returns>是否发送成功</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.SendFileAndCheckReceive(System.Net.Sockets.Socket,System.String,System.String,System.String,System.String,System.Action{System.Int64,System.Int64})">
            <summary>
            [自校验] 将文件数据发送至套接字，具体发送细节将在继承类中实现，如果结果异常，则结束通讯
            </summary>
            <param name="socket">套接字</param>
            <param name="filename">文件名称，文件必须存在</param>
            <param name="servername">远程端的文件名称</param>
            <param name="filetag">文件的额外标签</param>
            <param name="fileupload">文件的上传人</param>
            <param name="sendReport">发送进度报告</param>
            <returns>是否发送成功</returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.SendFileAndCheckReceive(System.Net.Sockets.Socket,System.IO.Stream,System.String,System.String,System.String,System.Action{System.Int64,System.Int64})">
            <summary>
            [自校验] 将流数据发送至套接字，具体发送细节将在继承类中实现，如果结果异常，则结束通讯
            </summary>
            <param name="socket">套接字</param>
            <param name="stream">文件名称，文件必须存在</param>
            <param name="servername">远程端的文件名称</param>
            <param name="filetag">文件的额外标签</param>
            <param name="fileupload">文件的上传人</param>
            <param name="sendReport">发送进度报告</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.ReceiveAndCheckBytes(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            [自校验] 接收一条完整的同步数据，包含头子节和内容字节，基础的数据，如果结果异常，则结束通讯
            </summary>
            <param name="socket">套接字</param>
            <param name="timeout">超时时间设置，如果为负数，则不检查超时</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">result</exception>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.ReceiveStringContentFromSocket(System.Net.Sockets.Socket)">
            <summary>
            [自校验] 从网络中接收一个字符串数据，如果结果异常，则结束通讯
            </summary>
            <param name="socket">套接字</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.ReceiveBytesContentFromSocket(System.Net.Sockets.Socket)">
            <summary>
            [自校验] 从网络中接收一串字节数据，如果结果异常，则结束通讯
            </summary>
            <param name="socket">套接字</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.ReceiveFileHeadFromSocket(System.Net.Sockets.Socket)">
            <summary>
            [自校验] 从套接字中接收文件头信息
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.ReceiveFileFromSocket(System.Net.Sockets.Socket,System.String,System.Action{System.Int64,System.Int64})">
            <summary>
            [自校验] 从网络中接收一个文件，如果结果异常，则结束通讯
            </summary>
            <param name="socket">网络套接字</param>
            <param name="savename">接收文件后保存的文件名</param>
            <param name="receiveReport">接收进度报告</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.ReceiveFileFromSocket(System.Net.Sockets.Socket,System.IO.Stream,System.Action{System.Int64,System.Int64})">
            <summary>
            [自校验] 从网络中接收一个文件，写入数据流，如果结果异常，则结束通讯，参数顺序文件名，文件大小，文件标识，上传人
            </summary>
            <param name="socket">网络套接字</param>
            <param name="stream">等待写入的数据流</param>
            <param name="receiveReport">接收进度报告</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.DeleteFileByName(System.String)">
            <summary>
            删除文件的操作
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.PreprocessFolderName(System.String)">
            <summary>
            预处理文件夹的名称，除去文件夹名称最后一个'\'，如果有的话
            </summary>
            <param name="folder">文件夹名称</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.DataProcessingCenter(HslCommunication.Core.Net.AppSession,System.Int32,System.Int32,System.Byte[])">
            <summary>
            数据处理中心，应该继承重写
            </summary>
            <param name="session">连接状态</param>
            <param name="protocol">协议头</param>
            <param name="customer">用户自定义</param>
            <param name="content">数据内容</param>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.SocketReceiveException(HslCommunication.Core.Net.AppSession,System.Exception)">
            <summary>
            接收出错的时候进行处理
            </summary>
            <param name="session">会话内容</param>
            <param name="ex">异常信息</param>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.AppSessionRemoteClose(HslCommunication.Core.Net.AppSession)">
            <summary>
            当远端的客户端关闭连接时触发
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.ReceiveLong(System.Net.Sockets.Socket)">
            <summary>
            从网络中接收Long数据
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.SendLong(System.Net.Sockets.Socket,System.Int64)">
            <summary>
            将long数据发送到套接字
            </summary>
            <param name="socket"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.SendStream(System.Net.Sockets.Socket,System.IO.Stream,System.Int64,System.Action{System.Int64,System.Int64},System.Boolean)">
            <summary>
            发送一个流的所有数据到网络套接字
            </summary>
            <param name="socket"></param>
            <param name="stream"></param>
            <param name="receive"></param>
            <param name="report"></param>
            <param name="reportByPercent"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.WriteStream(System.Net.Sockets.Socket,System.IO.Stream,System.Int64,System.Action{System.Int64,System.Int64},System.Boolean)">
            <summary>
            从套接字中接收所有的数据然后写入到流当中去
            </summary>
            <param name="socket"></param>
            <param name="stream"></param>
            <param name="totleLength"></param>
            <param name="report"></param>
            <param name="reportByPercent"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.Net.NetworkXBase.ToString">
            <summary>
            获取本对象的字符串表示形式
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Core.Net.StateOneBase">
            <summary>
            异步消息的对象
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.StateOneBase.DataLength">
            <summary>
            本次接收或是发送的数据长度
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.StateOneBase.AlreadyDealLength">
            <summary>
            已经处理的字节长度
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.StateOneBase.WaitDone">
            <summary>
            操作完成的信号
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.StateOneBase.Buffer">
            <summary>
            缓存器
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.StateOneBase.IsError">
            <summary>
            是否发生了错误
            </summary>
        </member>
        <member name="P:HslCommunication.Core.Net.StateOneBase.ErrerMsg">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="T:HslCommunication.Core.CoordinationStatus">
            <summary>
            线程的协调逻辑状态
            </summary>
        </member>
        <member name="F:HslCommunication.Core.CoordinationStatus.AllDone">
            <summary>
            所有项完成
            </summary>
        </member>
        <member name="F:HslCommunication.Core.CoordinationStatus.Timeout">
            <summary>
            超时
            </summary>
        </member>
        <member name="F:HslCommunication.Core.CoordinationStatus.Cancel">
            <summary>
            任务取消
            </summary>
        </member>
        <member name="T:HslCommunication.Core.AsyncCoordinator">
            <summary>
            一个线程协调逻辑类，详细参考书籍《CLR Via C#》page:681
            这个类可惜没有报告进度的功能
            </summary>
        </member>
        <member name="M:HslCommunication.Core.AsyncCoordinator.AboutToBegin(System.Int32)">
            <summary>
            每次的操作任务开始前必须调用该方法
            </summary>
            <param name="opsToAdd"></param>
        </member>
        <member name="M:HslCommunication.Core.AsyncCoordinator.JustEnded">
            <summary>
            在一次任务处理好操作之后，必须调用该方法
            </summary>
        </member>
        <member name="M:HslCommunication.Core.AsyncCoordinator.AllBegun(System.Action{HslCommunication.Core.CoordinationStatus},System.Int32)">
            <summary>
            该方法必须在发起所有的操作之后调用
            </summary>
            <param name="callback">回调方法</param>
            <param name="timeout">超时时间</param>
        </member>
        <member name="M:HslCommunication.Core.AsyncCoordinator.TimeExpired(System.Object)">
            <summary>
            超时的方法
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:HslCommunication.Core.AsyncCoordinator.Cancel">
            <summary>
            取消任务的执行
            </summary>
        </member>
        <member name="M:HslCommunication.Core.AsyncCoordinator.ReportStatus(HslCommunication.Core.CoordinationStatus)">
            <summary>
            生成一次报告
            </summary>
            <param name="status">报告的状态</param>
        </member>
        <member name="M:HslCommunication.Core.AsyncCoordinator.Maxinum(System.Int32@,System.Func{System.Int32,System.Int32})">
            <summary>
            乐观的并发方法模型，具体参照《CLR Via C#》page:686
            </summary>
            <param name="target">唯一的目标数据</param>
            <param name="change">修改数据的算法</param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Core.HslAsyncCoordinator">
            <summary>
            一个用于高性能，乐观并发模型控制操作的类，允许一个方法(隔离方法)的安全单次执行
            </summary>
        </member>
        <member name="M:HslCommunication.Core.HslAsyncCoordinator.#ctor(System.Action)">
            <summary>
            实例化一个对象，需要传入隔离执行的方法
            </summary>
            <param name="operater">隔离执行的方法</param>
        </member>
        <member name="F:HslCommunication.Core.HslAsyncCoordinator.OperaterStatus">
            <summary>
            操作状态，0是未操作，1是操作中
            </summary>
        </member>
        <member name="F:HslCommunication.Core.HslAsyncCoordinator.Target">
            <summary>
            需要操作的次数
            </summary>
        </member>
        <member name="M:HslCommunication.Core.HslAsyncCoordinator.StartOperaterInfomation">
            <summary>
            启动线程池执行隔离方法
            </summary>
        </member>
        <member name="T:HslCommunication.Core.HslReadWriteLock">
            <summary>
            一个高性能的读写锁，支持写锁定，读灵活，读时写锁定，写时读锁定
            </summary>
        </member>
        <member name="M:HslCommunication.Core.HslReadWriteLock.ToString">
            <summary>
            返回本对象的描述字符串
            </summary>
            <returns>对象的描述字符串</returns>
        </member>
        <member name="M:HslCommunication.Core.HslReadWriteLock.#ctor">
            <summary>
            实例化一个读写锁的对象
            </summary>
        </member>
        <member name="M:HslCommunication.Core.HslReadWriteLock.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:HslCommunication.Core.HslReadWriteLock.Enter(System.Boolean)">
            <summary>
            根据读写情况请求锁
            </summary>
            <param name="exclusive">True为写请求，False为读请求</param>
        </member>
        <member name="M:HslCommunication.Core.HslReadWriteLock.Leave">
            <summary>
            释放锁，将根据锁状态自动区分读写锁
            </summary>
        </member>
        <member name="T:HslCommunication.Core.SimpleHybirdLock">
            <summary>
            一个简单的混合线程同步锁，采用了基元用户加基元内核同步构造实现
            </summary>
        </member>
        <member name="M:HslCommunication.Core.SimpleHybirdLock.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SimpleHybirdLock.m_waiters">
            <summary>
            基元用户模式构造同步锁
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SimpleHybirdLock.m_waiterLock">
            <summary>
            基元内核模式构造同步锁
            </summary>
        </member>
        <member name="M:HslCommunication.Core.SimpleHybirdLock.Enter">
            <summary>
            获取锁
            </summary>
        </member>
        <member name="M:HslCommunication.Core.SimpleHybirdLock.Leave">
            <summary>
            离开锁
            </summary>
        </member>
        <member name="P:HslCommunication.Core.SimpleHybirdLock.IsWaitting">
            <summary>
            获取当前锁是否在等待当中
            </summary>
        </member>
        <member name="T:HslCommunication.Core.SoftMultiTask`1">
            <summary>
            一个用于多线程并发处理数据的模型类，适用于处理数据量非常庞大的情况
            </summary>
            <typeparam name="T">等待处理的数据类型</typeparam>
        </member>
        <member name="M:HslCommunication.Core.SoftMultiTask`1.#ctor(`0[],System.Func{`0,System.Boolean},System.Int32)">
            <summary>
            实例化一个数据处理对象
            </summary>
            <param name="dataList">数据处理列表</param>
            <param name="operater">数据操作方法，应该是相对耗时的任务</param>
            <param name="threadCount">需要使用的线程数</param>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_opCount">
            <summary>
            操作总数，判定操作是否完成
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_opThreadCount">
            <summary>
            判断是否所有的线程是否处理完成
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_threadCount">
            <summary>
            准备启动的处理数据的线程数量
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_runStatus">
            <summary>
            指示多线程处理是否在运行中，防止冗余调用
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_dataList">
            <summary>
            列表数据
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_operater">
            <summary>
            需要操作的方法
            </summary>
        </member>
        <member name="T:HslCommunication.Core.SoftMultiTask`1.MultiInfo">
            <summary>
            一个双参数委托
            </summary>
            <param name="item"></param>
            <param name="ex"></param>
        </member>
        <member name="T:HslCommunication.Core.SoftMultiTask`1.MultiInfoTwo">
            <summary>
            用于报告进度的委托，当finish等于count时，任务完成
            </summary>
            <param name="finish">已完成操作数量</param>
            <param name="count">总数量</param>
            <param name="success">成功数量</param>
            <param name="failed">失败数量</param>
        </member>
        <member name="E:HslCommunication.Core.SoftMultiTask`1.OnExceptionOccur">
            <summary>
            异常发生时事件
            </summary>
        </member>
        <member name="E:HslCommunication.Core.SoftMultiTask`1.OnReportProgress">
            <summary>
            报告处理进度时发生
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_finishCount">
            <summary>
            已处理完成数量，无论是否异常
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_successCount">
            <summary>
            处理完成并实现操作数量
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_failedCount">
            <summary>
            处理过程中异常数量
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.HybirdLock">
            <summary>
            用于触发事件的混合线程锁
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_isRunningStop">
            <summary>
            指示处理状态是否为暂停状态
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_isQuit">
            <summary>
            指示系统是否需要强制退出
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_isQuitAfterException">
            <summary>
            在发生错误的时候是否强制退出后续的操作
            </summary>
        </member>
        <member name="M:HslCommunication.Core.SoftMultiTask`1.StartOperater">
            <summary>
            启动多线程进行数据处理
            </summary>
        </member>
        <member name="M:HslCommunication.Core.SoftMultiTask`1.StopOperater">
            <summary>
            暂停当前的操作
            </summary>
        </member>
        <member name="M:HslCommunication.Core.SoftMultiTask`1.ResumeOperater">
            <summary>
            恢复暂停的操作
            </summary>
        </member>
        <member name="M:HslCommunication.Core.SoftMultiTask`1.EndedOperater">
            <summary>
            直接手动强制结束操作
            </summary>
        </member>
        <member name="P:HslCommunication.Core.SoftMultiTask`1.IsQuitAfterException">
            <summary>
            在发生错误的时候是否强制退出后续的操作
            </summary>
        </member>
        <member name="T:HslCommunication.Core.Singleton">
            <summary>
            一个双检锁的示例，适合一些占内存的静态数据对象，获取的时候才实例化真正的对象
            </summary>
        </member>
        <member name="T:HslCommunication.Core.ByteTransformBase">
            <summary>
            数据转换类的基础，提供了一些基础的方法实现.
            </summary>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransBool(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取出bool结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">位的索引</param>
            <returns>bool对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取byte结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>byte对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取byte数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransInt16(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取short结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>short对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransInt16(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取short数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>short数组对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransUInt16(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取ushort结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>ushort对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransUInt16(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取ushort数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>ushort数组对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransInt32(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取int结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>int对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取int数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>int数组对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransUInt32(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取uint结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>uint对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransUInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取uint数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>uint数组对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransInt64(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取long结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>long对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransInt64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取long数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>long数组对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransUInt64(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取ulong结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>ulong对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransUInt64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取ulong数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>ulong数组对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransSingle(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取float结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <returns>float对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransSingle(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取float数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransDouble(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取double结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <returns>double对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransDouble(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取double数组结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransString(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            从缓存中提取string结果，使用指定的编码
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <param name="length">byte数组长度</param>
            <param name="encoding">字符串的编码</param>
            <returns>string对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.Boolean)">
            <summary>
            bool变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.Boolean[])">
            <summary>
            bool数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.Byte)">
            <summary>
            byte变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.Int16)">
            <summary>
            short变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.Int16[])">
            <summary>
            short数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.UInt16)">
            <summary>
            ushort变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.UInt16[])">
            <summary>
            ushort数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.Int32)">
            <summary>
            int变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.Int32[])">
            <summary>
            int数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.UInt32)">
            <summary>
            uint变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.UInt32[])">
            <summary>
            uint数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.Int64)">
            <summary>
            long变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.Int64[])">
            <summary>
            long数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.UInt64)">
            <summary>
            ulong变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.UInt64[])">
            <summary>
            ulong数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.Single)">
            <summary>
            float变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.Single[])">
            <summary>
            float数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.Double)">
            <summary>
            double变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.Double[])">
            <summary>
            double数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformBase.TransByte(System.String,System.Text.Encoding)">
            <summary>
            使用指定的编码字符串转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <param name="encoding">字符串的编码方式</param>
            <returns>buffer数据</returns>
        </member>
        <member name="T:HslCommunication.Core.ByteTransformHelper">
            <summary>
            所有数据转换类的静态辅助方法
            </summary>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformHelper.GetResultFromBytes``1(HslCommunication.OperateResult{System.Byte[]},System.Func{System.Byte[],``0})">
            <summary>
            结果转换操作的基础方法，需要支持类型，及转换的委托
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="result">源</param>
            <param name="translator"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformHelper.GetBoolResultFromBytes(HslCommunication.OperateResult{System.Byte[]},HslCommunication.Core.IByteTransform)">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <param name="byteTransform">数据转换方法</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformHelper.GetByteResultFromBytes(HslCommunication.OperateResult{System.Byte[]},HslCommunication.Core.IByteTransform)">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <param name="byteTransform">数据转换方法</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformHelper.GetInt16ResultFromBytes(HslCommunication.OperateResult{System.Byte[]},HslCommunication.Core.IByteTransform)">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <param name="byteTransform">数据转换方法</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformHelper.GetUInt16ResultFromBytes(HslCommunication.OperateResult{System.Byte[]},HslCommunication.Core.IByteTransform)">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <param name="byteTransform">数据转换方法</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformHelper.GetInt32ResultFromBytes(HslCommunication.OperateResult{System.Byte[]},HslCommunication.Core.IByteTransform)">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <param name="byteTransform">数据转换方法</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformHelper.GetUInt32ResultFromBytes(HslCommunication.OperateResult{System.Byte[]},HslCommunication.Core.IByteTransform)">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <param name="byteTransform">数据转换方法</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformHelper.GetInt64ResultFromBytes(HslCommunication.OperateResult{System.Byte[]},HslCommunication.Core.IByteTransform)">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <param name="byteTransform">数据转换方法</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformHelper.GetUInt64ResultFromBytes(HslCommunication.OperateResult{System.Byte[]},HslCommunication.Core.IByteTransform)">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <param name="byteTransform">数据转换方法</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformHelper.GetSingleResultFromBytes(HslCommunication.OperateResult{System.Byte[]},HslCommunication.Core.IByteTransform)">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <param name="byteTransform">数据转换方法</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformHelper.GetDoubleResultFromBytes(HslCommunication.OperateResult{System.Byte[]},HslCommunication.Core.IByteTransform)">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <param name="byteTransform">数据转换方法</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="M:HslCommunication.Core.ByteTransformHelper.GetStringResultFromBytes(HslCommunication.OperateResult{System.Byte[]},HslCommunication.Core.IByteTransform)">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="result">原始的类型</param>
            <param name="byteTransform">数据转换方法</param>
            <returns>转化后的类型</returns>
        </member>
        <member name="T:HslCommunication.Core.IByteTransform">
            <summary>
            支持转换器的基础接口
            </summary>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransBool(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取出bool结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">位的索引</param>
            <returns>bool对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取byte结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>byte对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取byte数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransInt16(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取short结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>short对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransInt16(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取short数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>short数组对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransUInt16(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取ushort结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>ushort对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransUInt16(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取ushort数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>ushort数组对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransInt32(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取int结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>int对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取int数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>int数组对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransUInt32(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取uint结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>uint对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransUInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取uint数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>uint数组对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransInt64(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取long结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>long对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransInt64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取long数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>long数组对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransUInt64(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取ulong结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>ulong对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransUInt64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取ulong数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>ulong数组对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransSingle(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取float结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <returns>float对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransSingle(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取float数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransDouble(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取double结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <returns>double对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransDouble(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取double数组结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransString(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            从缓存中提取string结果，使用指定的编码
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <param name="length">byte数组长度</param>
            <param name="encoding">字符串的编码</param>
            <returns>string对象</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.Boolean)">
            <summary>
            bool变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.Boolean[])">
            <summary>
            bool数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.Byte)">
            <summary>
            byte变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.Int16)">
            <summary>
            short变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.Int16[])">
            <summary>
            short数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.UInt16)">
            <summary>
            ushort变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.UInt16[])">
            <summary>
            ushort数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.Int32)">
            <summary>
            int变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.Int32[])">
            <summary>
            int数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.UInt32)">
            <summary>
            uint变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.UInt32[])">
            <summary>
            uint数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.Int64)">
            <summary>
            long变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.Int64[])">
            <summary>
            long数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.UInt64)">
            <summary>
            ulong变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.UInt64[])">
            <summary>
            ulong数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.Single)">
            <summary>
            float变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.Single[])">
            <summary>
            float数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.Double)">
            <summary>
            double变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.Double[])">
            <summary>
            double数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.IByteTransform.TransByte(System.String,System.Text.Encoding)">
            <summary>
            使用指定的编码字符串转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <param name="encoding">字符串的编码方式</param>
            <returns>buffer数据</returns>
        </member>
        <member name="T:HslCommunication.Core.RegularByteTransform">
            <summary>
            常规的字节转换类
            </summary>
        </member>
        <member name="T:HslCommunication.Core.ReverseBytesTransform">
            <summary>
            字节倒序的转换类
            </summary>
        </member>
        <member name="M:HslCommunication.Core.ReverseBytesTransform.TransInt16(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取short结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>short对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseBytesTransform.TransUInt16(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取ushort结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>ushort对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseBytesTransform.TransInt32(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取int结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>int对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseBytesTransform.TransUInt32(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取uint结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>uint对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseBytesTransform.TransInt64(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取long结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>long对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseBytesTransform.TransUInt64(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取ulong结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>ulong对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseBytesTransform.TransSingle(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取float结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <returns>float对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseBytesTransform.TransDouble(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取double结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <returns>double对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseBytesTransform.TransByte(System.Int16[])">
            <summary>
            short数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseBytesTransform.TransByte(System.UInt16[])">
            <summary>
            ushort数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseBytesTransform.TransByte(System.Int32[])">
            <summary>
            int数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseBytesTransform.TransByte(System.UInt32[])">
            <summary>
            uint数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseBytesTransform.TransByte(System.Int64[])">
            <summary>
            long数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseBytesTransform.TransByte(System.UInt64[])">
            <summary>
            ulong数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseBytesTransform.TransByte(System.Single[])">
            <summary>
            float数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseBytesTransform.TransByte(System.Double[])">
            <summary>
            double数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="T:HslCommunication.Core.ReverseWordTransform">
            <summary>
            按照字节错位的数据转换类
            </summary>
        </member>
        <member name="M:HslCommunication.Core.ReverseWordTransform.ReverseBytesByWord(System.Byte[],System.Int32,System.Int32)">
            <summary>
            按照字节错位的方法
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseWordTransform.TransInt16(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取short结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>short对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseWordTransform.TransUInt16(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取ushort结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>ushort对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseWordTransform.TransInt32(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取int结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>int对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseWordTransform.TransUInt32(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取uint结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>uint对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseWordTransform.TransInt64(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取long结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>long对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseWordTransform.TransUInt64(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取ulong结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>ulong对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseWordTransform.TransSingle(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取float结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <returns>float对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseWordTransform.TransDouble(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取double结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <returns>double对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseWordTransform.TransString(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            从缓存中提取string结果，使用指定的编码
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <param name="length">byte数组长度</param>
            <param name="encoding">字符串的编码</param>
            <returns>string对象</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseWordTransform.TransByte(System.Boolean[])">
            <summary>
            bool数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseWordTransform.TransByte(System.Int16[])">
            <summary>
            short数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseWordTransform.TransByte(System.UInt16[])">
            <summary>
            ushort数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseWordTransform.TransByte(System.Int32[])">
            <summary>
            int数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseWordTransform.TransByte(System.UInt32[])">
            <summary>
            uint数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseWordTransform.TransByte(System.Int64[])">
            <summary>
            long数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseWordTransform.TransByte(System.UInt64[])">
            <summary>
            ulong数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseWordTransform.TransByte(System.Single[])">
            <summary>
            float数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseWordTransform.TransByte(System.Double[])">
            <summary>
            double数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HslCommunication.Core.ReverseWordTransform.TransByte(System.String,System.Text.Encoding)">
            <summary>
            使用指定的编码字符串转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <param name="encoding">字符串的编码方式</param>
            <returns>buffer数据</returns>
        </member>
        <member name="T:HslCommunication.Core.HslPieItem">
            <summary>
            饼图的基本元素
            </summary>
        </member>
        <member name="M:HslCommunication.Core.HslPieItem.#ctor">
            <summary>
            实例化一个饼图基本元素的对象
            </summary>
        </member>
        <member name="P:HslCommunication.Core.HslPieItem.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:HslCommunication.Core.HslPieItem.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:HslCommunication.Core.HslPieItem.Back">
            <summary>
            背景颜色
            </summary>
        </member>
        <member name="T:HslCommunication.Core.NetSupport">
            <summary>
            静态的方法支持类，提供一些网络的静态支持
            </summary>
        </member>
        <member name="F:HslCommunication.Core.NetSupport.SocketBufferSize">
            <summary>
            Socket传输中的缓冲池大小
            </summary>
        </member>
        <member name="M:HslCommunication.Core.NetSupport.ThreadPoolCheckConnect(HslCommunication.HslTimeOut,System.Int32)">
            <summary>
            检查是否超时的静态方法
            </summary>
            <param name="timeout">数据封送对象</param>
            <param name="millisecond">超时的时间</param>
        </member>
        <member name="M:HslCommunication.Core.NetSupport.ReadBytesFromSocket(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            读取socket数据的基础方法，只适合用来接收指令头，或是同步数据
            </summary>
            <param name="socket">通信对象</param>
            <param name="receive">接收的长度</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:HslCommunication.Core.NetSupport.ReadBytesFromSocket(System.Net.Sockets.Socket,System.Int32,System.Action{System.Int64,System.Int64},System.Boolean,System.Boolean)">
            <summary>
            读取socket数据的基础方法，只适合用来接收指令头，或是同步数据
            </summary>
            <param name="socket">通信对象</param>
            <param name="receive">接收的长度</param>
            <param name="report">用于报告接收进度的对象</param>
            <param name="reportByPercent">是否按照百分比报告进度</param>
            <param name="response">是否回发接收数据长度</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:HslCommunication.Core.NetSupport.WriteStreamFromSocket(System.Net.Sockets.Socket,System.IO.Stream,System.Int64,System.Action{System.Int64,System.Int64},System.Boolean)">
            <summary>
            从socket套接字读取数据并写入流中，必然报告进度
            </summary>
            <param name="socket">通信对象</param>
            <param name="stream">stream</param>
            <param name="receive">接收的长度</param>
            <param name="report">用于报告接收进度的对象</param>
            <param name="reportByPercent">是否按照百分比报告进度</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:HslCommunication.Core.NetSupport.WriteSocketFromStream(System.Net.Sockets.Socket,System.IO.Stream,System.Int64,System.Action{System.Int64,System.Int64},System.Boolean)">
            <summary>
            读取流并将数据写入socket
            </summary>
            <param name="stream">文件流</param>
            <param name="socket">连接的套接字</param>
            <param name="length">返回的文件长度</param>
            <param name="report">发送的进度报告</param>
            <param name="reportByPercent"></param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="T:HslCommunication.NetHandle">
            <summary>
            用于网络传递的信息头，使用上等同于int
            </summary>
        </member>
        <member name="M:HslCommunication.NetHandle.op_Implicit(System.Int32)~HslCommunication.NetHandle">
            <summary>
            赋值操作，可以直接赋值int数据
            </summary>
            <param name="value">int数值</param>
        </member>
        <member name="M:HslCommunication.NetHandle.op_Implicit(HslCommunication.NetHandle)~System.Int32">
            <summary>
            也可以赋值给int数据
            </summary>
            <param name="netHandle">netHandle对象</param>
        </member>
        <member name="M:HslCommunication.NetHandle.op_Equality(HslCommunication.NetHandle,HslCommunication.NetHandle)">
            <summary>
            判断是否相等
            </summary>
            <param name="netHandle1">第一个数</param>
            <param name="netHandle2">第二个数</param>
            <returns>等于返回<c>True</c>，否则<c>False</c></returns>
        </member>
        <member name="M:HslCommunication.NetHandle.op_Inequality(HslCommunication.NetHandle,HslCommunication.NetHandle)">
            <summary>
            判断是否不相等
            </summary>
            <param name="netHandle1">第一个对象</param>
            <param name="netHandle2">第二个对象</param>
            <returns>等于返回<c>False</c>，否则<c>True</c></returns>
        </member>
        <member name="M:HslCommunication.NetHandle.op_Addition(HslCommunication.NetHandle,HslCommunication.NetHandle)">
            <summary>
            两个数值相加
            </summary>
            <param name="netHandle1">第一个对象</param>
            <param name="netHandle2">第二个对象</param>
            <returns>返回两个指令的和</returns>
        </member>
        <member name="M:HslCommunication.NetHandle.op_Subtraction(HslCommunication.NetHandle,HslCommunication.NetHandle)">
            <summary>
            两个数值相减
            </summary>
            <param name="netHandle1">第一个对象</param>
            <param name="netHandle2">第二个对象</param>
            <returns>返回两个指令的差</returns>
        </member>
        <member name="M:HslCommunication.NetHandle.op_LessThan(HslCommunication.NetHandle,HslCommunication.NetHandle)">
            <summary>
            判断是否小于另一个数值
            </summary>
            <param name="netHandle1">第一个对象</param>
            <param name="netHandle2">第二个对象</param>
            <returns>小于则返回<c>True</c>，否则返回<c>False</c></returns>
        </member>
        <member name="M:HslCommunication.NetHandle.op_GreaterThan(HslCommunication.NetHandle,HslCommunication.NetHandle)">
            <summary>
            判断是否大于另一个数值
            </summary>
            <param name="netHandle1">第一个对象</param>
            <param name="netHandle2">第二个对象</param>
            <returns>大于则返回<c>True</c>，否则返回<c>False</c></returns>
        </member>
        <member name="M:HslCommunication.NetHandle.#ctor(System.Int32)">
            <summary>
            初始化一个暗号对象
            </summary>
            <param name="value">使用一个默认的数值进行初始化</param>
        </member>
        <member name="M:HslCommunication.NetHandle.#ctor(System.Byte,System.Byte,System.UInt16)">
            <summary>
            根据三个值来初始化暗号对象
            </summary>
            <param name="major">主暗号</param>
            <param name="minor">次暗号</param>
            <param name="identifier">暗号编号</param>
        </member>
        <member name="F:HslCommunication.NetHandle.m_CodeValue">
            <summary>
            完整的暗号值
            </summary>
        </member>
        <member name="F:HslCommunication.NetHandle.m_CodeMajor">
            <summary>
            主暗号分类0-255
            </summary>
        </member>
        <member name="F:HslCommunication.NetHandle.m_CodeMinor">
            <summary>
            次要的暗号分类0-255
            </summary>
        </member>
        <member name="F:HslCommunication.NetHandle.m_CodeIdentifier">
            <summary>
            暗号的编号分类0-65535
            </summary>
        </member>
        <member name="P:HslCommunication.NetHandle.CodeValue">
            <summary>
            完整的暗号值
            </summary>
        </member>
        <member name="P:HslCommunication.NetHandle.CodeMajor">
            <summary>
            主暗号分类0-255
            </summary>
        </member>
        <member name="P:HslCommunication.NetHandle.CodeMinor">
            <summary>
            次要的暗号分类0-255
            </summary>
        </member>
        <member name="P:HslCommunication.NetHandle.CodeIdentifier">
            <summary>
            暗号的编号分类0-65535
            </summary>
        </member>
        <member name="M:HslCommunication.NetHandle.ToString">
            <summary>
            获取完整的暗号数据
            </summary>
            <returns>返回暗号的字符串表示形式</returns>
        </member>
        <member name="M:HslCommunication.NetHandle.Equals(System.Object)">
            <summary>
            判断两个实例是否相同
            </summary>
            <param name="obj"></param>
            <returns>相同返回<c>True</c>，否则返回<c>False</c></returns>
        </member>
        <member name="M:HslCommunication.NetHandle.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.HslProtocol">
            <summary>
            用于本程序集访问通信的暗号说明
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.HeadByteLength">
            <summary>
            规定所有的网络传输指令头都为32字节
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.ProtocolBufferSize">
            <summary>
            所有网络通信中的缓冲池数据信息
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.ProtocolCheckSecends">
            <summary>
            用于心跳程序的暗号信息
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.ProtocolClientQuit">
            <summary>
            客户端退出消息
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.ProtocolClientRefuseLogin">
            <summary>
            因为客户端达到上限而拒绝登录
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.ProtocolClientAllowLogin">
            <summary>
            允许客户端登录到服务器
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.ProtocolUserString">
            <summary>
            说明发送的只是文本信息
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.ProtocolUserBytes">
            <summary>
            发送的数据就是普通的字节数组
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.ProtocolUserBitmap">
            <summary>
            发送的数据就是普通的图片数据
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.ProtocolUserException">
            <summary>
            发送的数据是一条异常的数据，字符串为异常消息
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.ProtocolFileDownload">
            <summary>
            请求文件下载的暗号
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.ProtocolFileUpload">
            <summary>
            请求文件上传的暗号
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.ProtocolFileDelete">
            <summary>
            请求删除文件的暗号
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.ProtocolFileCheckRight">
            <summary>
            文件校验成功
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.ProtocolFileCheckError">
            <summary>
            文件校验失败
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.ProtocolFileSaveError">
            <summary>
            文件保存失败
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.ProtocolFileDirectoryFiles">
            <summary>
            请求文件列表的暗号
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.ProtocolFileDirectories">
            <summary>
            请求子文件的列表暗号
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.ProtocolProgressReport">
            <summary>
            进度返回暗号
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.ProtocolNoZipped">
            <summary>
            不压缩数据字节
            </summary>
        </member>
        <member name="F:HslCommunication.HslProtocol.ProtocolZipped">
            <summary>
            压缩数据字节
            </summary>
        </member>
        <member name="M:HslCommunication.HslProtocol.CommandBytes(System.Int32,System.Int32,System.Guid,System.Byte[])">
            <summary>
            生成终极传送指令的方法，所有的数据均通过该方法出来
            </summary>
            <param name="command">命令头</param>
            <param name="customer">自用自定义</param>
            <param name="token">令牌</param>
            <param name="data">字节数据</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.HslProtocol.CommandAnalysis(System.Byte[],System.Byte[])">
            <summary>
            解析接收到数据，先解压缩后进行解密
            </summary>
            <param name="head"></param>
            <param name="content"></param>
        </member>
        <member name="M:HslCommunication.HslProtocol.CommandBytes(System.Int32,System.Guid,System.Byte[])">
            <summary>
            获取发送字节数据的实际数据，带指令头
            </summary>
            <param name="customer"></param>
            <param name="token"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.HslProtocol.CommandBytes(System.Int32,System.Guid,System.String)">
            <summary>
            获取发送字节数据的实际数据，带指令头
            </summary>
            <param name="customer"></param>
            <param name="token"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.DeviceNet">
            <summary>
            通用设备的基础网络信息
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.DeviceNet.#ctor">
            <summary>
            实例化一个通用的设备类
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.DeviceNet.ClientOnline">
            <summary>
            当客户端上线的时候，触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.DeviceNet.ClientOffline">
            <summary>
            当客户端下线的时候，触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.DeviceNet.AcceptString">
            <summary>
            按照ASCII文本的方式进行触发接收的数据
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.DeviceNet.AcceptBytes">
            <summary>
            按照字节的方式进行触发接收的数据
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.DeviceNet.ThreadPoolLogin(System.Object)">
            <summary>
            登录后的处理方法
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:HslCommunication.Enthernet.AdvancedFileServer">
            <summary>
            文件管理类服务器，负责服务器所有分类文件的管理，特点是不支持文件附加数据，但是支持直接访问文件名
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.AdvancedFileServer.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.AdvancedFileServer.ThreadPoolLogin(System.Object)">
            <summary>
            处理数据
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.AdvancedFileServer.StartInitialization">
            <summary>
            初始化数据
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.AdvancedFileServer.CheckFolderAndCreate">
            <summary>
            检查文件夹
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.AdvancedFileServer.ReceiveFileFromSocketAndMoveFile(System.Net.Sockets.Socket,System.String,System.String,System.String@,System.Int64@,System.String@,System.String@)">
            <summary>
            从网络套接字接收文件并移动到目标的文件夹中，如果结果异常，则结束通讯
            </summary>
            <param name="socket"></param>
            <param name="savename"></param>
            <param name="fileNameNew"></param>
            <param name="filename"></param>
            <param name="size"></param>
            <param name="filetag"></param>
            <param name="fileupload"></param>
            <returns></returns>
        </member>
        <member name="P:HslCommunication.Enthernet.AdvancedFileServer.FilesDirectoryPathTemp">
            <summary>
            用于接收上传文件时的临时文件夹，临时文件使用结束后会被删除
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.AdvancedFileServer.ToString">
            <summary>
            获取本对象的字符串标识形式
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.FileBaseInfo">
            <summary>
            文件的基础信息
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileBaseInfo.Name">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileBaseInfo.Size">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileBaseInfo.Tag">
            <summary>
            文件的标识，注释
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileBaseInfo.Upload">
            <summary>
            文件上传人的名称
            </summary>
        </member>
        <member name="T:HslCommunication.Enthernet.FileClientBase">
            <summary>
            文件传输客户端基类，提供上传，下载，删除的基础服务
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileClientBase.ServerIpEndPoint">
            <summary>
            服务器端的文件管理引擎终结点
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileClientBase.ConnectTimeOut">
            <summary>
            获取或设置连接的超时时间，默认10秒
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FileClientBase.SendFactoryGroupId(System.Net.Sockets.Socket,System.String,System.String,System.String)">
            <summary>
            发送三个文件分类到服务器端
            </summary>
            <param name="socket"></param>
            <param name="factory"></param>
            <param name="group"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.FileClientBase.DeleteFileBase(System.String,System.String,System.String,System.String)">
            <summary>
            删除服务器上的文件
            </summary>
            <param name="fileName">文件的名称</param>
            <param name="factory"></param>
            <param name="group"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.FileClientBase.DownloadFileBase(System.String,System.String,System.String,System.String,System.Action{System.Int64,System.Int64},System.Object)">
            <summary>
            基础下载信息
            </summary>
            <param name="factory"></param>
            <param name="group"></param>
            <param name="id"></param>
            <param name="fileName">服务器的文件名称</param>
            <param name="processReport">下载的进度报告</param>
            <param name="source">数据源信息，决定最终存储到哪里去</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.FileClientBase.UploadFileBase(System.Object,System.String,System.String,System.String,System.String,System.String,System.String,System.Action{System.Int64,System.Int64})">
            <summary>
            上传文件给服务器
            </summary>
            <param name="source">数据源，可以是文件名，也可以是数据流</param>
            <param name="serverName">在服务器保存的文件名，不包含驱动器路径</param>
            <param name="factory"></param>
            <param name="group"></param>
            <param name="id"></param>
            <param name="fileTag">文件的描述</param>
            <param name="fileUpload">文件的上传人</param>
            <param name="processReport">汇报进度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.FileClientBase.ToString">
            <summary>
            获取本对象的字符串表示形式
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.FileMarkId">
            <summary>
            文件标记对象类
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FileMarkId.#ctor(HslCommunication.LogNet.ILogNet,System.String)">
            <summary>
            实例化一个文件标记对象
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FileMarkId.AddOperation(System.Action)">
            <summary>
            新增一个文件的操作，仅仅是删除文件
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.FileMarkId.CanClear">
            <summary>
            指示该对象是否能被清除
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.FileMarkId.EnterReadOperator">
            <summary>
            进入文件的读取状态
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FileMarkId.LeaveReadOperator">
            <summary>
            离开本次的文件读取状态
            </summary>
        </member>
        <member name="T:HslCommunication.Enthernet.GroupFileContainer">
            <summary>
            文件集容器，绑定一个文件夹的文件信息组
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.GroupFileContainer.#ctor(HslCommunication.LogNet.ILogNet,System.String)">
            <summary>
            实例化一个新的数据管理容器
            </summary>
            <param name="logNet">日志记录对象，可以为空</param>
            <param name="path"></param>
        </member>
        <member name="P:HslCommunication.Enthernet.GroupFileContainer.JsonArrayContent">
            <summary>
            包含所有文件列表信息的json文本缓存
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.GroupFileContainer.FileCount">
            <summary>
            获取文件的数量
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.GroupFileContainer.FileCountChanged">
            <summary>
            当文件数量发生变化的时候触发的事件
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.GroupFileContainer.GetCurrentFileMappingName(System.String)">
            <summary>
            下载文件时调用
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.GroupFileContainer.UpdateFileMappingName(System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            上传文件时掉用
            </summary>
            <param name="fileName">文件名，带后缀，不带任何的路径</param>
            <param name="fileSize">文件的大小</param>
            <param name="mappingName">文件映射名称</param>
            <param name="owner">文件的拥有者</param>
            <param name="description">文件的额外描述</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.GroupFileContainer.DeleteFile(System.String)">
            <summary>
            删除一个文件信息
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.GroupFileContainer.CacheJsonArrayContent">
            <summary>
            缓存JSON文本的方法，该机制使用乐观并发模型完成
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.GroupFileContainer.GroupFileContainerLoadByPath(System.String)">
            <summary>
            从目录进行加载数据，必须实例化的时候加载，加载失败会导致系统异常，旧的文件丢失
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:HslCommunication.Enthernet.GroupFileItem">
            <summary>
            单个文件的存储
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.GroupFileItem.FileName">
            <summary>
            文件的名称
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.GroupFileItem.FileSize">
            <summary>
            文件的大小
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.GroupFileItem.MappingName">
            <summary>
            文件的映射名称
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.GroupFileItem.DownloadTimes">
            <summary>
            文件的下载次数
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.GroupFileItem.UploadTime">
            <summary>
            文件的上传时间
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.GroupFileItem.Owner">
            <summary>
            文件的上传人，拥有者
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.GroupFileItem.Description">
            <summary>
            文件的额外描述
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.GroupFileItem.GetTextFromFileSize">
            <summary>
            获取大小
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.IntegrationFileClient">
            <summary>
            与服务器文件引擎交互的客户端类，支持操作Advanced引擎和Ultimate引擎
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.DeleteFile(System.String,System.String,System.String,System.String)">
            <summary>
            删除服务器的文件操作
            </summary>
            <param name="fileName">文件名称，带后缀</param>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.DownloadFile(System.String,System.String,System.String,System.String,System.Action{System.Int64,System.Int64},System.String)">
            <summary>
            下载服务器的文件到本地的文件操作
            </summary>
            <param name="fileName">文件名称，带后缀</param>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <param name="processReport">下载的进度报告</param>
            <param name="fileSaveName">准备本地保存的名称</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.DownloadFile(System.String,System.String,System.String,System.String,System.Action{System.Int64,System.Int64},System.IO.Stream)">
            <summary>
            下载服务器的文件到本地的数据流中
            </summary>
            <param name="fileName">文件名称，带后缀</param>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <param name="processReport">下载的进度报告</param>
            <param name="stream">流数据</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.DownloadFile(System.String,System.String,System.String,System.String,System.Action{System.Int64,System.Int64},System.Drawing.Bitmap@)">
            <summary>
            下载服务器的文件到本地的数据流中
            </summary>
            <param name="fileName">文件名称，带后缀</param>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <param name="processReport">下载的进度报告</param>
            <param name="bitmap">内存文件</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.UploadFile(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Action{System.Int64,System.Int64})">
            <summary>
            上传本地的文件到服务器操作
            </summary>
            <param name="fileName">本地的完整路径的文件名称</param>
            <param name="serverName">服务器存储的文件名称，带后缀</param>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <param name="fileTag">文件的额外描述</param>
            <param name="fileUpload">文件的上传人</param>
            <param name="processReport">上传的进度报告</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.UploadFile(System.IO.Stream,System.String,System.String,System.String,System.String,System.String,System.String,System.Action{System.Int64,System.Int64})">
            <summary>
            上传数据流到服务器操作
            </summary>
            <param name="stream">数据流内容</param>
            <param name="serverName">服务器存储的文件名称，带后缀</param>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <param name="fileTag">文件的额外描述</param>
            <param name="fileUpload">文件的上传人</param>
            <param name="processReport">上传的进度报告</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.UploadFile(System.Drawing.Bitmap,System.String,System.String,System.String,System.String,System.String,System.String,System.Action{System.Int64,System.Int64})">
            <summary>
            上传内存图片到服务器操作
            </summary>
            <param name="bitmap">内存图片，不能为空</param>
            <param name="serverName">服务器存储的文件名称，带后缀</param>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <param name="fileTag">文件的额外描述</param>
            <param name="fileUpload">文件的上传人</param>
            <param name="processReport">上传的进度报告</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.TranslateFileName(System.String,System.String,System.String,System.String)">
            <summary>
            根据三种分类信息，还原成在服务器的相对路径，包含文件
            </summary>
            <param name="fileName">文件名称，包含后缀名</param>
            <param name="factory">第一类</param>
            <param name="group">第二类</param>
            <param name="id">第三类</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.TranslatePathName(System.String,System.String,System.String)">
            <summary>
            根据三种分类信息，还原成在服务器的相对路径，仅仅路径
            </summary>
            <param name="factory">第一类</param>
            <param name="group">第二类</param>
            <param name="id">第三类</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.DownloadPathFileNames(HslCommunication.Enthernet.GroupFileItem[]@,System.String,System.String,System.String)">
            <summary>
            获取指定路径下的所有的文档
            </summary>
            <param name="fileNames">获取得到的文件合集</param>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.DownloadPathFolders(System.String[]@,System.String,System.String,System.String)">
            <summary>
            获取指定路径下的所有的文档
            </summary>
            <param name="folders"></param>
            <param name="factory"></param>
            <param name="group"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.DownloadStringArrays``1(``0[]@,System.Int32,System.String,System.String,System.String)">
            <summary>
            获取指定路径下的所有的文档
            </summary>
            <param name="arrays">想要获取的队列</param>
            <param name="protocol">指令</param>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <typeparam name="T">数组的类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.UltimateFileServer">
            <summary>
            终极文件管理服务器，实现所有的文件分类管理，读写分离，不支持直接访问文件名
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.UltimateFileServer.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.UltimateFileServer.m_dictionary_group_marks">
            <summary>
            所有文件组操作的词典锁
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.UltimateFileServer.hybirdLock">
            <summary>
            词典的锁
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.UltimateFileServer.GetGroupFromFilePath(System.String)">
            <summary>
            获取当前目录的读写锁，如果没有会自动创建
            </summary>
            <param name="filePath">相对路径名</param>
            <returns>读写锁</returns>
        </member>
        <member name="M:HslCommunication.Enthernet.UltimateFileServer.ReceiveFileFromSocketAndUpdateGroup(System.Net.Sockets.Socket,System.String)">
            <summary>
            从套接字接收文件并保存，更新文件列表
            </summary>
            <param name="socket">套接字</param>
            <param name="savename">保存的文件名</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.UltimateFileServer.TransformFactFileName(System.String,System.String,System.String,System.String)">
            <summary>
            根据文件的显示名称转化为真实存储的名称
            </summary>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <param name="fileName">文件显示名称</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.UltimateFileServer.DeleteExsistingFile(System.String,System.String)">
            <summary>
            删除已经存在的文件信息
            </summary>
            <param name="path"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.UltimateFileServer.ThreadPoolLogin(System.Object)">
            <summary>
            处理数据
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.UltimateFileServer.ToString">
            <summary>
            获取本对象的字符串表示形式
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.NetPushClient">
            <summary>
            发布订阅类的客户端，使用指定的关键订阅相关的数据推送信息
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetPushClient.#ctor(System.String,System.Int32,System.String)">
            <summary>
            实例化一个发布订阅类的客户端，需要指定ip地址，端口，及订阅关键字
            </summary>
            <param name="ipAddress">服务器的IP地址</param>
            <param name="port">服务器的端口号</param>
            <param name="key">订阅关键字</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetPushClient.CreatePush(System.Action{HslCommunication.Enthernet.NetPushClient,System.String})">
            <summary>
            创建数据推送服务
            </summary>
            <param name="pushCallBack">触发数据推送的委托</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.NetPushClient.ClosePush">
            <summary>
            关闭消息推送的界面
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetPushClient.KeyWord">
            <summary>
            本客户端的关键字
            </summary>
        </member>
        <member name="T:HslCommunication.Enthernet.NetPushServer">
            <summary>
            发布订阅服务器的类，支持按照关键字进行数据信息的订阅
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetPushServer.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetPushServer.ThreadPoolLogin(System.Object)">
            <summary>
            处理请求接收连接后的方法
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetPushServer.ServerClose">
            <summary>
            关闭服务器的引擎
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetPushServer.PushString(System.String,System.String)">
            <summary>
            主动推送数据内容
            </summary>
            <param name="key"></param>
            <param name="content"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetPushServer.RemoveKey(System.String)">
            <summary>
            移除关键字信息，通常应用于一些特殊临时用途的关键字
            </summary>
            <param name="key">关键字</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetPushServer.CreatePushRemote(System.String,System.Int32,System.String)">
            <summary>
            创建一个远程服务器的数据推送操作，以便推送给子客户端
            </summary>
            <param name="ipAddress">远程的IP地址</param>
            <param name="port">远程的端口号</param>
            <param name="key">订阅的关键字</param>
        </member>
        <member name="P:HslCommunication.Enthernet.NetPushServer.OnlineCount">
            <summary>
            在线客户端的数量
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetPushServer.IsPushGroupOnline(System.String)">
            <summary>
            判断当前的关键字订阅是否在服务器的词典里面
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.NetPushServer.RemoveGroupOnlien(System.String,System.String)">
            <summary>
            移除客户端的数据信息
            </summary>
            <param name="key"></param>
            <param name="clientID"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetPushServer.ToString">
            <summary>
            返回表示当前对象的字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="T:HslCommunication.Enthernet.PushGroupClient">
            <summary>
            订阅分类的核心组织对象
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.PushGroupClient.#ctor">
            <summary>
            实例化一个默认的对象
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.PushGroupClient.AddPushClient(HslCommunication.Core.Net.AppSession)">
            <summary>
            新增一个订阅的会话
            </summary>
            <param name="session">会话</param>
        </member>
        <member name="M:HslCommunication.Enthernet.PushGroupClient.RemovePushClient(System.String)">
            <summary>
            移除一个订阅的会话
            </summary>
            <param name="clientID">客户端唯一的ID信息</param>
        </member>
        <member name="M:HslCommunication.Enthernet.PushGroupClient.PushString(System.String,System.Action{HslCommunication.Core.Net.AppSession,System.String})">
            <summary>
            使用固定的发送方法将数据发送出去
            </summary>
            <param name="content"></param>
            <param name="send"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.PushGroupClient.RemoveAllClient">
            <summary>
            移除并关闭所有的客户端
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.PushGroupClient.Dispose(System.Boolean)">
            <summary>
            释放当前的程序所占用的资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.PushGroupClient.Dispose">
            <summary>
            释放当前的对象所占用的资源
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.PushGroupClient.ToString">
            <summary>
            获取本对象的字符串表示形式
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.NetSoftUpdateServer">
            <summary>
            用于服务器支持软件全自动更新升级的类
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSoftUpdateServer.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetSoftUpdateServer.FileUpdatePath">
            <summary>
            系统升级时客户端所在的目录，默认为C:\HslCommunication
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSoftUpdateServer.ThreadPoolLogin(System.Object)">
            <summary>
            系统的登录方法
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSoftUpdateServer.ToString">
            <summary>
            获取本对象的字符串表示形式
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.NetComplexClient">
            <summary>
            一个基于异步高性能的客户端网络类，支持主动接收服务器的消息
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexClient.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexClient.IsClientStart">
            <summary>
            客户端系统是否启动
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexClient.ConnectFailedCount">
            <summary>
            重连接失败的次数
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexClient.ClientAlias">
            <summary>
            客户端登录的标识名称，可以为ID号，也可以为登录名
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexClient.EndPointServer">
            <summary>
            远程服务器的IP地址和端口
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexClient.ServerTime">
            <summary>
            服务器的时间，自动实现和服务器同步
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexClient.DelayTime">
            <summary>
            系统与服务器的延时时间，单位毫秒
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexClient.LoginSuccess">
            <summary>
            客户端启动成功的事件，重连成功也将触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexClient.LoginFailed">
            <summary>
            连接失败时触发的事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexClient.MessageAlerts">
            <summary>
            服务器的异常，启动，等等一般消息产生的时候，出发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexClient.BeforReConnected">
            <summary>
            在客户端断开后并在重连服务器之前触发，用于清理系统资源
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexClient.AcceptString">
            <summary>
            当接收到文本数据的时候,触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexClient.AcceptByte">
            <summary>
            当接收到字节数据的时候,触发此事件
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexClient.ClientClose">
            <summary>
            关闭该客户端引擎
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexClient.ClientStart">
            <summary>
            启动客户端引擎，连接服务器系统
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexClient.AwaitToConnect">
            <summary>
            连接服务器之前的消息提示，如果是重连的话，就提示10秒等待信息
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexClient.SocketReceiveException(HslCommunication.Core.Net.AppSession,System.Exception)">
            <summary>
            通信出错后的处理
            </summary>
            <param name="receive"></param>
            <param name="ex"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexClient.Send(HslCommunication.NetHandle,System.String)">
            <summary>
            服务器端用于数据发送文本的方法
            </summary>
            <param name="customer">用户自定义的命令头</param>
            <param name="str">发送的文本</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexClient.Send(HslCommunication.NetHandle,System.Byte[])">
            <summary>
            服务器端用于发送字节的方法
            </summary>
            <param name="customer">用户自定义的命令头</param>
            <param name="bytes">实际发送的数据</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexClient.DataProcessingCenter(HslCommunication.Core.Net.AppSession,System.Int32,System.Int32,System.Byte[])">
            <summary>
            客户端的数据处理中心
            </summary>
            <param name="session">会话</param>
            <param name="protocol">消息暗号</param>
            <param name="customer">用户消息</param>
            <param name="content">数据内容</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexClient.ThreadHeartCheck">
            <summary>
            心跳线程的方法
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexClient.ToString">
            <summary>
            返回对象的字符串表示形式
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.NetComplexServer">
            <summary>
            高性能的异步网络服务器类，适合搭建局域网聊天程序，消息推送程序
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.#ctor">
            <summary>
            实例化一个网络服务器类对象
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexServer.ConnectMax">
            <summary>
            所支持的同时在线客户端的最大数量，商用限制1000个，最小10个
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexServer.IsSaveLogClientLineChange">
            <summary>
            获取或设置服务器是否记录客户端上下线信息
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexServer.ClientCount">
            <summary>
            所有在线客户端的数量
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.StartInitialization">
            <summary>
            初始化操作
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.CloseAction">
            <summary>
            关闭网络时的操作
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.SocketReceiveException(HslCommunication.Core.Net.AppSession,System.Exception)">
            <summary>
            异常下线
            </summary>
            <param name="session"></param>
            <param name="ex"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.AppSessionRemoteClose(HslCommunication.Core.Net.AppSession)">
            <summary>
            正常下线
            </summary>
            <param name="session"></param>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexServer.AllClientsStatusChange">
            <summary>
            客户端的上下限状态变更时触发，仅作为在线客户端识别
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexServer.ClientOnline">
            <summary>
            当客户端上线的时候，触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexServer.ClientOffline">
            <summary>
            当客户端下线的时候，触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexServer.AcceptString">
            <summary>
            当接收到文本数据的时候,触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexServer.AcceptByte">
            <summary>
            当接收到字节数据的时候,触发此事件
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.ThreadPoolLogin(System.Object)">
            <summary>
            登录后的处理方法
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.Send(HslCommunication.Core.Net.AppSession,HslCommunication.NetHandle,System.String)">
            <summary>
            服务器端用于数据发送文本的方法
            </summary>
            <param name="session">数据发送对象</param>
            <param name="customer">用户自定义的数据对象，如不需要，赋值为0</param>
            <param name="str">发送的文本</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.Send(HslCommunication.Core.Net.AppSession,HslCommunication.NetHandle,System.Byte[])">
            <summary>
            服务器端用于发送字节的方法
            </summary>
            <param name="session">数据发送对象</param>
            <param name="customer">用户自定义的数据对象，如不需要，赋值为0</param>
            <param name="bytes">实际发送的数据</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.SendAllClients(HslCommunication.NetHandle,System.String)">
            <summary>
            服务端用于发送所有数据到所有的客户端
            </summary>
            <param name="customer">用户自定义的命令头</param>
            <param name="str">需要传送的实际的数据</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.SendAllClients(HslCommunication.NetHandle,System.Byte[])">
            <summary>
            服务端用于发送所有数据到所有的客户端
            </summary>
            <param name="customer">用户自定义的命令头</param>
            <param name="data">需要群发客户端的字节数据</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.SendClientByAlias(System.String,HslCommunication.NetHandle,System.String)">
            <summary>
            根据客户端设置的别名进行发送消息
            </summary>
            <param name="Alias">客户端上线的别名</param>
            <param name="customer">用户自定义的命令头</param>
            <param name="str">需要传送的实际的数据</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.SendClientByAlias(System.String,HslCommunication.NetHandle,System.Byte[])">
            <summary>
            根据客户端设置的别名进行发送消息
            </summary>
            <param name="Alias">客户端上线的别名</param>
            <param name="customer">用户自定义的命令头</param>
            <param name="data">需要传送的实际的数据</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.DataProcessingCenter(HslCommunication.Core.Net.AppSession,System.Int32,System.Int32,System.Byte[])">
            <summary>
            数据处理中心
            </summary>
            <param name="session">会话对象</param>
            <param name="protocol">消息的代码</param>
            <param name="customer">用户消息</param>
            <param name="content">数据内容</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.ToString">
            <summary>
            获取本对象的字符串表示形式
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.DeviceState">
            <summary>
            通用设备的基础状态
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.DeviceState.DeviceEndPoint">
            <summary>
            设备的连接地址
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.DeviceState.ConnectTime">
            <summary>
            设备的连接时间
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.DeviceState.WorkSocket">
            <summary>
            网络套接字
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.DeviceState.ReceiveTime">
            <summary>
            上次接收到信息的时间
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.DeviceState.IpAddress">
            <summary>
            设备的ip地址
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.DeviceState.Buffer">
            <summary>
            缓冲内存块
            </summary>
        </member>
        <member name="T:HslCommunication.Enthernet.NetSimplifyClient">
            <summary>
            异步访问数据的客户端类，用于向服务器请求一些确定的数据信息
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyClient.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个客户端的对象，用于和服务器通信
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyClient.#ctor">
            <summary>
            实例化一个客户端对象，需要手动指定Ip地址和端口
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyClient.ReadFromServer(HslCommunication.NetHandle,System.String)">
            <summary>
            客户端向服务器进行请求，请求字符串数据
            </summary>
            <param name="customer">用户的指令头</param>
            <param name="send">发送数据</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyClient.ReadFromServer(HslCommunication.NetHandle,System.Byte[])">
            <summary>
            客户端向服务器进行请求，请求字节数据
            </summary>
            <param name="customer">用户的指令头</param>
            <param name="send">发送的字节内容</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyClient.ReadFromServerBase(System.Int32,System.Int32,System.Byte[])">
            <summary>
            需要发送的底层数据
            </summary>
            <param name="headcode">数据的指令头</param>
            <param name="customer">用户的指令头</param>
            <param name="send">需要发送的底层数据</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyClient.ToString">
            <summary>
            获取本对象的字符串表示形式
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.NetSimplifyServer">
            <summary>
            同步消息处理服务器，主要用来实现接收客户端信息并进行消息反馈的操作
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyServer.#ctor">
            <summary>
            实例化一个服务器消息请求的信息
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetSimplifyServer.ReceiveStringEvent">
            <summary>
            接收字符串信息的事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetSimplifyServer.ReceivedBytesEvent">
            <summary>
            接收字节信息的事件
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyServer.SendMessage(HslCommunication.Core.Net.AppSession,System.Int32,System.String)">
            <summary>
            向指定的通信对象发送字符串数据
            </summary>
            <param name="session">通信对象</param>
            <param name="customer">用户的指令头</param>
            <param name="str">实际发送的字符串数据</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyServer.SendMessage(HslCommunication.Core.Net.AppSession,System.Int32,System.Byte[])">
            <summary>
            向指定的通信对象发送字节数据
            </summary>
            <param name="session">连接对象</param>
            <param name="customer">用户的指令头</param>
            <param name="bytes">实际的数据</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyServer.CloseAction">
            <summary>
            关闭网络的操作
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyServer.ThreadPoolLogin(System.Object)">
            <summary>
            处理请求接收连接后的方法
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyServer.SocketReceiveException(HslCommunication.Core.Net.AppSession,System.Exception)">
            <summary>
            处理异常的方法
            </summary>
            <param name="session"></param>
            <param name="ex">异常信息</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyServer.AppSessionRemoteClose(HslCommunication.Core.Net.AppSession)">
            <summary>
            正常下线
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyServer.DataProcessingCenter(HslCommunication.Core.Net.AppSession,System.Int32,System.Int32,System.Byte[])">
            <summary>
            数据处理中心
            </summary>
            <param name="session">当前的会话</param>
            <param name="protocol">协议指令头</param>
            <param name="customer">客户端信号</param>
            <param name="content">触发的消息内容</param>
        </member>
        <member name="P:HslCommunication.Enthernet.NetSimplifyServer.ClientCount">
            <summary>
            当前在线的客户端数量
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyServer.ToString">
            <summary>
            返回表示当前对象的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.NetUdpClient">
            <summary>
            UDP客户端的类，只负责发送数据到服务器，该数据经过封装
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetUdpClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            实例化对象，
            </summary>
            <param name="endpoint"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetUdpClient.#ctor(System.String,System.Int32)">
            <summary>
            实例化对象，指定发送的服务器地址和端口号
            </summary>
            <param name="ipAddress">服务器的Ip地址</param>
            <param name="port">端口号</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetUdpClient.SendMessage(HslCommunication.NetHandle,System.Byte[])">
            <summary>
            发送字节数据到服务器
            </summary>
            <param name="customer">用户自定义的标记数据</param>
            <param name="data">字节数据</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:HslCommunication.Enthernet.NetUdpClient.SendMessage(HslCommunication.NetHandle,System.String)">
            <summary>
            发送字符串数据到服务器
            </summary>
            <param name="customer">用户自定义的标记数据</param>
            <param name="data">字符串数据</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:HslCommunication.Enthernet.NetUdpClient.ToString">
            <summary>
            获取本对象的字符串表示形式
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.NetUdpServer">
            <summary>
            Udp网络的服务器端类
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetUdpServer.ReceiveCacheLength">
            <summary>
            获取或设置一次接收时的数据长度，默认2KB数据长度
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetUdpServer.ServerStart(System.Int32)">
            <summary>
            根据指定的端口启动Upd侦听
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetUdpServer.CloseAction">
            <summary>
            关闭引擎的操作
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetUdpServer.RefreshReceive">
            <summary>
            重新开始接收数据
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            
        </member>
        <member name="M:HslCommunication.Enthernet.NetUdpServer.DataProcessingCenter(HslCommunication.Core.Net.AppSession,System.Int32,System.Int32,System.Byte[])">
            <summary>
            数据处理中心
            </summary>
            <param name="receive"></param>
            <param name="protocol"></param>
            <param name="customer"></param>
            <param name="content"></param>
        </member>
        <member name="E:HslCommunication.Enthernet.NetUdpServer.AcceptString">
            <summary>
            当接收到文本数据的时候,触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetUdpServer.AcceptByte">
            <summary>
            当接收到字节数据的时候,触发此事件
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetUdpServer.ToString">
            <summary>
            获取本对象的字符串表示形式
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.HslTimeOut">
            <summary>
            超时操作的类 [a class use to indicate the time-out of the connection]
            </summary>
        </member>
        <member name="M:HslCommunication.HslTimeOut.#ctor">
            <summary>
            实例化对象
            </summary>
        </member>
        <member name="P:HslCommunication.HslTimeOut.StartTime">
            <summary>
            操作的开始时间
            </summary>
        </member>
        <member name="P:HslCommunication.HslTimeOut.IsSuccessful">
            <summary>
            操作是否成功
            </summary>
        </member>
        <member name="P:HslCommunication.HslTimeOut.DelayTime">
            <summary>
            延时的时间，单位毫秒
            </summary>
        </member>
        <member name="P:HslCommunication.HslTimeOut.WorkSocket">
            <summary>
            连接超时用的Socket
            </summary>
        </member>
        <member name="P:HslCommunication.HslTimeOut.Operator">
            <summary>
            用于超时执行的方法
            </summary>
        </member>
        <member name="P:HslCommunication.HslTimeOut.HybirdLock">
            <summary>
            当前对象判断的同步锁
            </summary>
        </member>
        <member name="T:HslCommunication.LogNet.ILogNet">
            <summary>
            一个通用的日志接口
            </summary>
        </member>
        <member name="P:HslCommunication.LogNet.ILogNet.LogSaveMode">
            <summary>
            文件存储模式，1:单文件，2:根据大小，3:根据时间
            </summary>
        </member>
        <member name="E:HslCommunication.LogNet.ILogNet.BeforeSaveToFile">
            <summary>
            存储之前引发的事件，允许额外的操作
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.RecordMessage(HslCommunication.LogNet.HslMessageDegree,System.String,System.String)">
            <summary>
            自定义的消息记录
            </summary>
            <param name="degree">消息等级</param>
            <param name="keyWord">关键字</param>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteDebug(System.String)">
            <summary>
            写入一条调试日志
            </summary>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteDebug(System.String,System.String)">
            <summary>
            写入一条调试日志
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteDescrition(System.String)">
            <summary>
            写入一条解释性的信息
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteError(System.String)">
            <summary>
            写入一条错误日志
            </summary>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteError(System.String,System.String)">
            <summary>
            写入一条错误日志
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteException(System.String,System.Exception)">
            <summary>
            写入一条异常信息
            </summary>
            <param name="keyWord">关键字</param>
            <param name="ex">异常</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteException(System.String,System.String,System.Exception)">
            <summary>
            写入一条异常信息
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">内容</param>
            <param name="ex">异常</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteFatal(System.String)">
            <summary>
            写入一条致命日志
            </summary>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteFatal(System.String,System.String)">
            <summary>
            写入一条致命日志
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteInfo(System.String)">
            <summary>
            写入一条信息日志
            </summary>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteInfo(System.String,System.String)">
            <summary>
            写入一条信息日志
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteNewLine">
            <summary>
            写入一行换行符
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteWarn(System.String)">
            <summary>
            写入一条警告日志
            </summary>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteWarn(System.String,System.String)">
            <summary>
            写入一条警告日志
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.SetMessageDegree(HslCommunication.LogNet.HslMessageDegree)">
            <summary>
            设置日志的存储等级，高于该等级的才会被存储
            </summary>
            <param name="degree"></param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.GetExistLogFileNames">
            <summary>
            获取已存在的日志文件名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.FiltrateKeyword(System.String)">
            <summary>
            过滤掉指定的关键字的日志，该信息不存储，但仍然触发BeforeSaveToFile事件
            </summary>
            <param name="keyword"></param>
        </member>
        <member name="T:HslCommunication.LogNet.LogNetBase">
            <summary>
            日志存储类的基类，提供一些基础的服务
            </summary>    
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.#ctor">
            <summary>
            实例化一个日志对象
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.LogNetBase.m_fileSaveLock">
            <summary>
            文件存储的锁
            </summary>
        </member>
        <member name="E:HslCommunication.LogNet.LogNetBase.BeforeSaveToFile">
            <summary>
            在存储到文件的时候将会触发的事件
            </summary>
        </member>
        <member name="P:HslCommunication.LogNet.LogNetBase.LogSaveMode">
            <summary>
            日志存储模式，1:单文件，2:按大小存储，3:按时间存储
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteDebug(System.String)">
            <summary>
            写入一条调试信息
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteDebug(System.String,System.String)">
            <summary>
            写入一条调试信息
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">文本内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteInfo(System.String)">
            <summary>
            写入一条普通信息
            </summary>
            <param name="text">文本内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteInfo(System.String,System.String)">
            <summary>
            写入一条普通信息
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">文本内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteWarn(System.String)">
            <summary>
            写入一条警告信息
            </summary>
            <param name="text">文本内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteWarn(System.String,System.String)">
            <summary>
            写入一条警告信息
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">文本内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteError(System.String)">
            <summary>
            写入一条错误消息
            </summary>
            <param name="text">文本内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteError(System.String,System.String)">
            <summary>
            写入一条错误消息
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">文本内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteFatal(System.String)">
            <summary>
            写入一条致命错误信息
            </summary>
            <param name="text">文本内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteFatal(System.String,System.String)">
            <summary>
            写入一条致命错误信息
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">文本内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteException(System.String,System.Exception)">
            <summary>
            写入一条异常信息
            </summary>
            <param name="keyWord">关键字</param>
            <param name="ex"></param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteException(System.String,System.String,System.Exception)">
            <summary>
            写入一条异常信息
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">内容</param>
            <param name="ex">异常</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.RecordMessage(HslCommunication.LogNet.HslMessageDegree,System.String,System.String)">
            <summary>
            记录一条自定义的消息
            </summary>
            <param name="degree">消息的等级</param>
            <param name="keyWord">关键字</param>
            <param name="text">文本</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteDescrition(System.String)">
            <summary>
            写入一条解释性的消息，不需要带有回车键
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteNewLine">
            <summary>
            写入一条换行符
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.SetMessageDegree(HslCommunication.LogNet.HslMessageDegree)">
            <summary>
            设置日志的存储等级，高于该等级的才会被存储
            </summary>
            <param name="degree"></param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.FiltrateKeyword(System.String)">
            <summary>
            过滤指定的关键字存储
            </summary>
            <param name="keyWord">关键字</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.GetFileSaveName">
            <summary>
            获取要存储的文件的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.CheckPathEndWithSprit(System.String)">
            <summary>
            返回检查的路径名称，将会包含反斜杠
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:HslCommunication.LogNet.HslEventArgs">
            <summary>
            带有日志消息的事件
            </summary>
        </member>
        <member name="P:HslCommunication.LogNet.HslEventArgs.HslMessage">
            <summary>
            消息信息
            </summary>
        </member>
        <member name="T:HslCommunication.LogNet.GenerateMode">
            <summary>
            日志文件输出模式
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.GenerateMode.ByEveryHour">
            <summary>
            按每个小时生成日志文件
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.GenerateMode.ByEveryDay">
            <summary>
            按每天生成日志文件
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.GenerateMode.ByEveryWeek">
            <summary>
            按每个周生成日志文件
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.GenerateMode.ByEveryMonth">
            <summary>
            按每个月生成日志文件
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.GenerateMode.ByEverySeason">
            <summary>
            按每季度生成日志文件
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.GenerateMode.ByEveryYear">
            <summary>
            按每年生成日志文件
            </summary>
        </member>
        <member name="T:HslCommunication.LogNet.HslMessageDegree">
            <summary>
            记录消息的等级
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.HslMessageDegree.None">
            <summary>
            一条消息都不记录
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.HslMessageDegree.FATAL">
            <summary>
            记录致命等级及以上日志的消息
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.HslMessageDegree.ERROR">
            <summary>
            记录异常等级及以上日志的消息
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.HslMessageDegree.WARN">
            <summary>
            记录警告等级及以上日志的消息
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.HslMessageDegree.INFO">
            <summary>
            记录信息等级及以上日志的消息
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.HslMessageDegree.DEBUG">
            <summary>
            记录调试等级及以上日志的信息
            </summary>
        </member>
        <member name="T:HslCommunication.LogNet.HslMessageItem">
            <summary>
            单个日志的记录信息
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.HslMessageItem.#ctor">
            <summary>
            默认的无参构造器
            </summary>
        </member>
        <member name="P:HslCommunication.LogNet.HslMessageItem.Id">
            <summary>
            单个记录信息的标识ID，程序重新运行时清空
            </summary>
        </member>
        <member name="P:HslCommunication.LogNet.HslMessageItem.Degree">
            <summary>
            消息的等级
            </summary>
        </member>
        <member name="P:HslCommunication.LogNet.HslMessageItem.ThreadId">
            <summary>
            线程ID
            </summary>
        </member>
        <member name="P:HslCommunication.LogNet.HslMessageItem.Text">
            <summary>
            消息文本
            </summary>
        </member>
        <member name="P:HslCommunication.LogNet.HslMessageItem.Time">
            <summary>
            消息发生的事件
            </summary>
        </member>
        <member name="P:HslCommunication.LogNet.HslMessageItem.KeyWord">
            <summary>
            消息的关键字
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.HslMessageItem.ToString">
            <summary>
            返回表示当前对象的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.LogNet.HslMessageItem.ToStringWithoutKeyword">
            <summary>
            返回表示当前对象的字符串，剔除了关键字
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.LogNet.FormLogNetView">
            <summary>
            日志查看器的窗口类，用于分析统计日志数据
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.FormLogNetView.#ctor">
            <summary>
            实例化一个日志查看器的窗口
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.FormLogNetView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.FormLogNetView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.LogNet.FormLogNetView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.LogNet.LogNetAnalysisControl">
            <summary>
            一个用于日志分析的控件
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetAnalysisControl.#ctor">
            <summary>
            实例化一个控件信息
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetAnalysisControl.SetLogNetSource(System.String)">
            <summary>
            设置日志的数据源
            </summary>
            <param name="logSource">直接从日志文件中读到的数据或是来自网络的数据</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetAnalysisControl.FilterLogSource(System.String)">
            <summary>
            从现有的日志中筛选数据
            </summary>
            <param name="degree"></param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetAnalysisControl.AnalysisLogSource(System.DateTime,System.DateTime,System.String)">
            <summary>
            底层的数据分析筛选
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="degree"></param>
        </member>
        <member name="F:HslCommunication.LogNet.LogNetAnalysisControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetAnalysisControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetAnalysisControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.LogNet.LogNetManagment">
            <summary>
            日志类的管理器
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.LogNetManagment.LogSaveModeBySingleFile">
            <summary>
            存储文件的时候指示单文件存储
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.LogNetManagment.LogSaveModeByFileSize">
            <summary>
            存储文件的时候指示根据文件大小存储
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.LogNetManagment.LogSaveModeByDateTime">
            <summary>
            存储文件的时候指示根据日志时间来存储
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.LogNetManagment.LogFileHeadString">
            <summary>
            日志文件的头标志
            </summary>
        </member>
        <member name="P:HslCommunication.LogNet.LogNetManagment.LogNet">
            <summary>
            公开的一个静态变量，允许随意的设置
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetManagment.GetSaveStringFromException(System.String,System.Exception)">
            <summary>
            通过异常文本格式化成字符串用于保存或发送
            </summary>
            <param name="text"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.LogNet.LogNetDateTime">
            <summary>
            一个日志组件，可以根据时间来区分不同的文件存储
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetDateTime.#ctor(System.String,HslCommunication.LogNet.GenerateMode)">
            <summary>
            实例化一个根据时间存储的日志组件
            </summary>
            <param name="filePath">文件存储的路径</param>
            <param name="generateMode">存储文件的间隔</param>
        </member>
        <member name="F:HslCommunication.LogNet.LogNetDateTime.m_fileName">
            <summary>
            当前正在存储的文件名称
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.LogNetDateTime.m_filePath">
            <summary>
            文件的路径
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.LogNetDateTime.m_generateMode">
            <summary>
            文件的存储模式，默认按照年份来存储
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetDateTime.GetFileSaveName">
            <summary>
            获取需要保存的日志文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetDateTime.GetExistLogFileNames">
            <summary>
            获取所有的文件夹中的日志文件
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.LogNet.LogNetFileSize">
            <summary>
            根据文件的大小来存储日志信息
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetFileSize.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个根据文件大小生成新文件的
            </summary>
            <param name="filePath">日志文件的保存路径</param>
            <param name="fileMaxSize">每个日志文件的最大大小，默认2M</param>
        </member>
        <member name="F:HslCommunication.LogNet.LogNetFileSize.m_fileName">
            <summary>
            当前正在存储的文件名称
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetFileSize.GetFileSaveName">
            <summary>
            获取需要保存的日志文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetFileSize.GetLastAccessFileName">
            <summary>
            获取之前保存的日志文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetFileSize.GetDefaultFileName">
            <summary>
            获取一个新的默认的文件名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetFileSize.GetExistLogFileNames">
            <summary>
            返回所有的日志文件
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.LogNet.LogNetSingle">
            <summary>
            单日志文件对象
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetSingle.#ctor(System.String)">
            <summary>
            实例化一个单文件日志的对象
            </summary>
            <param name="filePath"></param>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetSingle.ClearLog">
            <summary>
            单日志文件允许清空日志内容
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetSingle.GetAllSavedLog">
            <summary>
            获取单日志文件的所有保存记录
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetSingle.GetFileSaveName">
            <summary>
            获取存储的文件的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetSingle.GetExistLogFileNames">
            <summary>
            获取所有的日志文件数组，对于单日志文件来说就只有一个
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.OperateResult">
            <summary>
            操作结果的类，只带有成功标志和错误信息
            </summary>
        </member>
        <member name="M:HslCommunication.OperateResult.#ctor">
            <summary>
            实例化一个默认的结果对象
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult.IsSuccess">
            <summary>
            指示本次访问是否成功
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult.Message">
            <summary>
            具体的错误描述
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult.ErrorCode">
            <summary>
            具体的错误代码
            </summary>
        </member>
        <member name="M:HslCommunication.OperateResult.ToMessageShowString">
            <summary>
            获取错误代号及文本描述
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CopyErrorFromOther``1(``0)">
            <summary>
            从另一个结果类中拷贝错误信息
            </summary>
            <typeparam name="TResult">支持结果类及派生类</typeparam>
            <param name="result">结果类及派生类的对象</param>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateFailedResult``1(HslCommunication.OperateResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="result">之前的结果对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateFailedResult``2(HslCommunication.OperateResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <param name="result">之前的结果对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateFailedResult``3(HslCommunication.OperateResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <typeparam name="T3">目标数据类型三</typeparam>
            <param name="result">之前的结果对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateFailedResult``4(HslCommunication.OperateResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <typeparam name="T3">目标数据类型三</typeparam>
            <typeparam name="T4">目标数据类型四</typeparam>
            <param name="result">之前的结果对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateFailedResult``5(HslCommunication.OperateResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <typeparam name="T3">目标数据类型三</typeparam>
            <typeparam name="T4">目标数据类型四</typeparam>
            <typeparam name="T5">目标数据类型五</typeparam>
            <param name="result">之前的结果对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateFailedResult``6(HslCommunication.OperateResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <typeparam name="T3">目标数据类型三</typeparam>
            <typeparam name="T4">目标数据类型四</typeparam>
            <typeparam name="T5">目标数据类型五</typeparam>
            <typeparam name="T6">目标数据类型六</typeparam>
            <param name="result">之前的结果对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateFailedResult``7(HslCommunication.OperateResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <typeparam name="T3">目标数据类型三</typeparam>
            <typeparam name="T4">目标数据类型四</typeparam>
            <typeparam name="T5">目标数据类型五</typeparam>
            <typeparam name="T6">目标数据类型六</typeparam>
            <typeparam name="T7">目标数据类型七</typeparam>
            <param name="result">之前的结果对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateFailedResult``8(HslCommunication.OperateResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <typeparam name="T3">目标数据类型三</typeparam>
            <typeparam name="T4">目标数据类型四</typeparam>
            <typeparam name="T5">目标数据类型五</typeparam>
            <typeparam name="T6">目标数据类型六</typeparam>
            <typeparam name="T7">目标数据类型七</typeparam>
            <typeparam name="T8">目标数据类型八</typeparam>
            <param name="result">之前的结果对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateFailedResult``9(HslCommunication.OperateResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <typeparam name="T3">目标数据类型三</typeparam>
            <typeparam name="T4">目标数据类型四</typeparam>
            <typeparam name="T5">目标数据类型五</typeparam>
            <typeparam name="T6">目标数据类型六</typeparam>
            <typeparam name="T7">目标数据类型七</typeparam>
            <typeparam name="T8">目标数据类型八</typeparam>
            <typeparam name="T9">目标数据类型九</typeparam>
            <param name="result">之前的结果对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateFailedResult``10(HslCommunication.OperateResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <typeparam name="T3">目标数据类型三</typeparam>
            <typeparam name="T4">目标数据类型四</typeparam>
            <typeparam name="T5">目标数据类型五</typeparam>
            <typeparam name="T6">目标数据类型六</typeparam>
            <typeparam name="T7">目标数据类型七</typeparam>
            <typeparam name="T8">目标数据类型八</typeparam>
            <typeparam name="T9">目标数据类型九</typeparam>
            <typeparam name="T10">目标数据类型十</typeparam>
            <param name="result">之前的结果对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateSuccessResult">
            <summary>
            创建并返回一个成功的结果对象
            </summary>
            <returns>成功的结果对象</returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateSuccessResult``1(``0)">
            <summary>
            创建并返回一个成功的结果对象，并带有一个参数对象
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="value">类型的值对象</param>
            <returns>成功的结果对象</returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateSuccessResult``2(``0,``1)">
            <summary>
            创建并返回一个成功的结果对象，并带有两个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <returns>成的结果对象</returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateSuccessResult``3(``0,``1,``2)">
            <summary>
            创建并返回一个成功的结果对象，并带有三个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <param name="value3">类型三对象</param>
            <returns>成的结果对象</returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateSuccessResult``4(``0,``1,``2,``3)">
            <summary>
            创建并返回一个成功的结果对象，并带有四个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="T4">第四个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <param name="value3">类型三对象</param>
            <param name="value4">类型四对象</param>
            <returns>成的结果对象</returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateSuccessResult``5(``0,``1,``2,``3,``4)">
            <summary>
            创建并返回一个成功的结果对象，并带有五个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="T4">第四个参数类型</typeparam>
            <typeparam name="T5">第五个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <param name="value3">类型三对象</param>
            <param name="value4">类型四对象</param>
            <param name="value5">类型五对象</param>
            <returns>成的结果对象</returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateSuccessResult``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            创建并返回一个成功的结果对象，并带有六个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="T4">第四个参数类型</typeparam>
            <typeparam name="T5">第五个参数类型</typeparam>
            <typeparam name="T6">第六个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <param name="value3">类型三对象</param>
            <param name="value4">类型四对象</param>
            <param name="value5">类型五对象</param>
            <param name="value6">类型六对象</param>
            <returns>成的结果对象</returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateSuccessResult``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            创建并返回一个成功的结果对象，并带有七个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="T4">第四个参数类型</typeparam>
            <typeparam name="T5">第五个参数类型</typeparam>
            <typeparam name="T6">第六个参数类型</typeparam>
            <typeparam name="T7">第七个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <param name="value3">类型三对象</param>
            <param name="value4">类型四对象</param>
            <param name="value5">类型五对象</param>
            <param name="value6">类型六对象</param>
            <param name="value7">类型七对象</param>
            <returns>成的结果对象</returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateSuccessResult``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            创建并返回一个成功的结果对象，并带有八个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="T4">第四个参数类型</typeparam>
            <typeparam name="T5">第五个参数类型</typeparam>
            <typeparam name="T6">第六个参数类型</typeparam>
            <typeparam name="T7">第七个参数类型</typeparam>
            <typeparam name="T8">第八个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <param name="value3">类型三对象</param>
            <param name="value4">类型四对象</param>
            <param name="value5">类型五对象</param>
            <param name="value6">类型六对象</param>
            <param name="value7">类型七对象</param>
            <param name="value8">类型八对象</param>
            <returns>成的结果对象</returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateSuccessResult``9(``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            创建并返回一个成功的结果对象，并带有九个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="T4">第四个参数类型</typeparam>
            <typeparam name="T5">第五个参数类型</typeparam>
            <typeparam name="T6">第六个参数类型</typeparam>
            <typeparam name="T7">第七个参数类型</typeparam>
            <typeparam name="T8">第八个参数类型</typeparam>
            <typeparam name="T9">第九个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <param name="value3">类型三对象</param>
            <param name="value4">类型四对象</param>
            <param name="value5">类型五对象</param>
            <param name="value6">类型六对象</param>
            <param name="value7">类型七对象</param>
            <param name="value8">类型八对象</param>
            <param name="value9">类型九对象</param>
            <returns>成的结果对象</returns>
        </member>
        <member name="M:HslCommunication.OperateResult.CreateSuccessResult``10(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            创建并返回一个成功的结果对象，并带有十个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="T4">第四个参数类型</typeparam>
            <typeparam name="T5">第五个参数类型</typeparam>
            <typeparam name="T6">第六个参数类型</typeparam>
            <typeparam name="T7">第七个参数类型</typeparam>
            <typeparam name="T8">第八个参数类型</typeparam>
            <typeparam name="T9">第九个参数类型</typeparam>
            <typeparam name="T10">第十个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <param name="value3">类型三对象</param>
            <param name="value4">类型四对象</param>
            <param name="value5">类型五对象</param>
            <param name="value6">类型六对象</param>
            <param name="value7">类型七对象</param>
            <param name="value8">类型八对象</param>
            <param name="value9">类型九对象</param>
            <param name="value10">类型十对象</param>
            <returns>成的结果对象</returns>
        </member>
        <member name="T:HslCommunication.OperateResult`1">
            <summary>
            操作结果的泛型类，允许带一个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T">泛型类</typeparam>
        </member>
        <member name="P:HslCommunication.OperateResult`1.Content">
            <summary>
            用户自定义的泛型数据
            </summary>
        </member>
        <member name="T:HslCommunication.OperateResult`2">
            <summary>
            操作结果的泛型类，允许带两个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
        </member>
        <member name="P:HslCommunication.OperateResult`2.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`2.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="T:HslCommunication.OperateResult`3">
            <summary>
            操作结果的泛型类，允许带三个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
        </member>
        <member name="P:HslCommunication.OperateResult`3.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`3.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`3.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="T:HslCommunication.OperateResult`4">
            <summary>
            操作结果的泛型类，允许带四个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
        </member>
        <member name="P:HslCommunication.OperateResult`4.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`4.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`4.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`4.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="T:HslCommunication.OperateResult`5">
            <summary>
            操作结果的泛型类，允许带五个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
            <typeparam name="T5">泛型类</typeparam>
        </member>
        <member name="P:HslCommunication.OperateResult`5.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`5.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`5.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`5.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`5.Content5">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="T:HslCommunication.OperateResult`6">
            <summary>
            操作结果的泛型类，允许带六个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
            <typeparam name="T5">泛型类</typeparam>
            <typeparam name="T6">泛型类</typeparam>
        </member>
        <member name="P:HslCommunication.OperateResult`6.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`6.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`6.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`6.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`6.Content5">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`6.Content6">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="T:HslCommunication.OperateResult`7">
            <summary>
            操作结果的泛型类，允许带七个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
            <typeparam name="T5">泛型类</typeparam>
            <typeparam name="T6">泛型类</typeparam>
            <typeparam name="T7">泛型类</typeparam>
        </member>
        <member name="P:HslCommunication.OperateResult`7.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`7.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`7.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`7.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`7.Content5">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`7.Content6">
            <summary>
            用户自定义的泛型数据6
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`7.Content7">
            <summary>
            用户自定义的泛型数据7
            </summary>
        </member>
        <member name="T:HslCommunication.OperateResult`8">
            <summary>
            操作结果的泛型类，允许带八个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
            <typeparam name="T5">泛型类</typeparam>
            <typeparam name="T6">泛型类</typeparam>
            <typeparam name="T7">泛型类</typeparam>
            <typeparam name="T8">泛型类</typeparam>
        </member>
        <member name="P:HslCommunication.OperateResult`8.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`8.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`8.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`8.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`8.Content5">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`8.Content6">
            <summary>
            用户自定义的泛型数据6
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`8.Content7">
            <summary>
            用户自定义的泛型数据7
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`8.Content8">
            <summary>
            用户自定义的泛型数据8
            </summary>
        </member>
        <member name="T:HslCommunication.OperateResult`9">
            <summary>
            操作结果的泛型类，允许带九个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
            <typeparam name="T5">泛型类</typeparam>
            <typeparam name="T6">泛型类</typeparam>
            <typeparam name="T7">泛型类</typeparam>
            <typeparam name="T8">泛型类</typeparam>
            <typeparam name="T9">泛型类</typeparam>
        </member>
        <member name="P:HslCommunication.OperateResult`9.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`9.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`9.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`9.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`9.Content5">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`9.Content6">
            <summary>
            用户自定义的泛型数据6
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`9.Content7">
            <summary>
            用户自定义的泛型数据7
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`9.Content8">
            <summary>
            用户自定义的泛型数据8
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`9.Content9">
            <summary>
            用户自定义的泛型数据9
            </summary>
        </member>
        <member name="T:HslCommunication.OperateResult`10">
            <summary>
            操作结果的泛型类，允许带十个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
            <typeparam name="T5">泛型类</typeparam>
            <typeparam name="T6">泛型类</typeparam>
            <typeparam name="T7">泛型类</typeparam>
            <typeparam name="T8">泛型类</typeparam>
            <typeparam name="T9">泛型类</typeparam>
            <typeparam name="T10">泛型类</typeparam>
        </member>
        <member name="P:HslCommunication.OperateResult`10.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`10.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`10.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`10.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`10.Content5">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`10.Content6">
            <summary>
            用户自定义的泛型数据6
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`10.Content7">
            <summary>
            用户自定义的泛型数据7
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`10.Content8">
            <summary>
            用户自定义的泛型数据8
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`10.Content9">
            <summary>
            用户自定义的泛型数据9
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`10.Content10">
            <summary>
            用户自定义的泛型数据10
            </summary>
        </member>
        <member name="T:HslCommunication.ModBus.ModbusInfo">
            <summary>
            Modbus协议相关的一些信息
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModbusInfo.ReadCoil">
            <summary>
            读取线圈
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModbusInfo.ReadDiscrete">
            <summary>
            读取离散量
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModbusInfo.ReadRegister">
            <summary>
            读取寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModbusInfo.ReadInputRegister">
            <summary>
            读取输入寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModbusInfo.WriteOneCoil">
            <summary>
            写单个线圈
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModbusInfo.WriteOneRegister">
            <summary>
            写单个寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModbusInfo.WriteCoil">
            <summary>
            写多个线圈
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModbusInfo.WriteRegister">
            <summary>
            写多个寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModbusInfo.FunctionCodeNotSupport">
            <summary>
            不支持该功能码
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModbusInfo.FunctionCodeOverBound">
            <summary>
            该地址越界
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModbusInfo.FunctionCodeQuantityOver">
            <summary>
            读取长度超过最大值
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModbusInfo.FunctionCodeReadWriteException">
            <summary>
            读写异常
            </summary>
        </member>
        <member name="T:HslCommunication.ModBus.ModBusMonitorAddress">
            <summary>
            服务器端提供的数据监视服务
            </summary>
        </member>
        <member name="P:HslCommunication.ModBus.ModBusMonitorAddress.Address">
            <summary>
            本次数据监视的地址
            </summary>
        </member>
        <member name="E:HslCommunication.ModBus.ModBusMonitorAddress.OnWrite">
            <summary>
            数据写入时触发的事件
            </summary>
        </member>
        <member name="E:HslCommunication.ModBus.ModBusMonitorAddress.OnChange">
            <summary>
            数据改变时触发的事件
            </summary>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusMonitorAddress.SetValue(System.Int16)">
            <summary>
            强制设置触发事件
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusMonitorAddress.SetChangeValue(System.Int16,System.Int16)">
            <summary>
            强制设置触发值变更事件
            </summary>
            <param name="before">变更前的值</param>
            <param name="after">变更后的值</param>
        </member>
        <member name="T:HslCommunication.ModBus.ModbusRtu">
            <summary>
            Modbus-Rtu通讯协议的类库，多项式码0xA001
            </summary>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.#ctor">
            <summary>
            实例化一个MOdbus-Tcp协议的客户端对象
            </summary>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.#ctor(System.Byte)">
            <summary>
            指定服务器地址，端口号，客户端自己的站号来初始化
            </summary>
            <param name="station">客户端自身的站号</param>
        </member>
        <member name="P:HslCommunication.ModBus.ModbusRtu.AddressStartWithZero">
            <summary>
            获取或设置起始的地址是否从0开始，默认为True
            </summary>
        </member>
        <member name="P:HslCommunication.ModBus.ModbusRtu.Station">
            <summary>
            获取或者重新修改服务器的站号信息
            </summary>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.AnalysisAddress(System.String)">
            <summary>
            解析数据地址，解析出地址类型，起始地址
            </summary>
            <param name="address">数据地址</param>
            <returns>解析出地址类型，起始地址，DB块的地址</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.AnalysisReadAddress(System.String)">
            <summary>
            解析数据地址，解析出地址类型，起始地址
            </summary>
            <param name="address">数据地址</param>
            <returns>解析出地址类型，起始地址，DB块的地址</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.BuildReadCommandBase(System.Byte,System.String,System.UInt16)">
            <summary>
            读取数据的基础指令，需要指定指令码，地址，长度
            </summary>
            <param name="code"></param>
            <param name="address"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.BuildReadCoilCommand(System.String,System.UInt16)">
            <summary>
            生成一个读取线圈的指令头
            </summary>
            <param name="address">地址</param>
            <param name="count">长度</param>
            <returns>携带有命令字节</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.BuildReadDiscreteCommand(System.String,System.UInt16)">
            <summary>
            生成一个读取离散信息的指令头
            </summary>
            <param name="address">地址</param>
            <param name="count">长度</param>
            <returns>携带有命令字节</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.BuildReadRegisterCommand(System.String,System.UInt16)">
            <summary>
            生成一个读取寄存器的指令头
            </summary>
            <param name="address"></param>
            <param name="count"></param>
            <returns>携带有命令字节</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.GetDescriptionByErrorCode(System.Byte)">
            <summary>
            通过错误码来获取到对应的文本消息
            </summary>
            <param name="code">错误码</param>
            <returns>错误的文本描述</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.CheckModbusTcpResponse(System.Byte[])">
            <summary>
            检查当前的Modbus-Tcp响应是否是正确的
            </summary>
            <param name="send">发送的数据信息</param>
            <returns>带是否成功的结果数据</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.ReadCustomer``1(System.String)">
            <summary>
            读取自定义的数据类型，只针对寄存器而言，需要规定了写入和解析规则
            </summary>
            <typeparam name="T">类型名称</typeparam>
            <param name="address">起始地址</param>
            <returns>带是否成功的特定类型的对象</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.WriteCustomer``1(System.String,``0)">
            <summary>
            写入自定义的数据类型到寄存器去，只要规定了生成字节的方法即可
            </summary>
            <typeparam name="T">自定义类型</typeparam>
            <param name="address">起始地址</param>
            <param name="data">实例对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.ReadModBusBase(System.Byte,System.String,System.UInt16)">
            <summary>
            读取服务器的数据，需要指定不同的功能码
            </summary>
            <param name="code">指令</param>
            <param name="address">地址</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.ReadCoil(System.String)">
            <summary>
            读取线圈，需要指定起始地址
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <returns>带有成功标志的bool对象</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.ReadCoil(System.String,System.UInt16)">
            <summary>
            批量的读取线圈，需要指定起始地址，读取长度
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <param name="length">读取长度</param>
            <returns>带有成功标志的bool数组对象</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.ReadDiscrete(System.String)">
            <summary>
            读取输入线圈，需要指定起始地址
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <returns>带有成功标志的bool对象</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.ReadDiscrete(System.String,System.UInt16)">
            <summary>
            批量的读取输入点，需要指定起始地址，读取长度
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <param name="length">读取长度</param>
            <returns>带有成功标志的bool数组对象</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Read(System.String,System.UInt16)">
            <summary>
            从Modbus服务器批量读取寄存器的信息，需要指定起始地址，读取长度
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <param name="length">读取的数量</param>
            <returns>带有成功标志的字节信息</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.ReadInt16(System.String)">
            <summary>
            读取指定地址的short数据
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <returns>带有成功标志的short数据</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.ReadUInt16(System.String)">
            <summary>
            读取指定地址的ushort数据
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <returns>带有成功标志的ushort数据</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.ReadInt32(System.String)">
            <summary>
            读取指定地址的int数据
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <returns>带有成功标志的int数据</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.ReadUInt32(System.String)">
            <summary>
            读取指定地址的uint数据
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <returns>带有成功标志的uint数据</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.ReadFloat(System.String)">
            <summary>
            读取指定地址的float数据
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <returns>带有成功标志的float数据</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.ReadInt64(System.String)">
            <summary>
            读取指定地址的long数据
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <returns>带有成功标志的long数据</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.ReadUInt64(System.String)">
            <summary>
            读取指定地址的ulong数据
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <returns>带有成功标志的ulong数据</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.ReadDouble(System.String)">
            <summary>
            读取指定地址的double数据
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <returns>带有成功标志的double数据</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.ReadString(System.String,System.UInt16)">
            <summary>
            读取地址地址的String数据，字符串编码为ASCII
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <param name="length">字符串长度</param>
            <returns>带有成功标志的string数据</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.WriteOneRegister(System.String,System.Byte,System.Byte)">
            <summary>
            写一个寄存器数据
            </summary>
            <param name="address">起始地址</param>
            <param name="high">高位</param>
            <param name="low">地位</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.WriteOneRegister(System.String,System.Int16)">
            <summary>
            写一个寄存器数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.WriteOneRegister(System.String,System.UInt16)">
            <summary>
            写一个寄存器数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Write(System.String,System.Byte[])">
            <summary>
            将数据写入到Modbus的寄存器上去，需要指定起始地址和数据内容
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <param name="value">写入的数据，长度根据data的长度来指示</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.WriteCoil(System.String,System.Boolean)">
            <summary>
            写一个线圈信息，指定是否通断
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.WriteCoil(System.String,System.Boolean[])">
            <summary>
            
            </summary>
            <param name="address">起始地址</param>
            <param name="values">写入值</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Write(System.String,System.String)">
            <summary>
            向寄存器中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Write(System.String,System.String,System.Int32)">
            <summary>
            向寄存器中写入指定长度的字符串,超出截断，不够补0，编码格式为ASCII
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.WriteUnicodeString(System.String,System.String)">
            <summary>
            向寄存器中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.WriteUnicodeString(System.String,System.String,System.Int32)">
            <summary>
            向寄存器中写入指定长度的字符串,超出截断，不够补0，编码格式为Unicode
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Write(System.String,System.Boolean[])">
            <summary>
            向寄存器中写入bool数组，返回值说明，比如你写入M100,那么data[0]对应M100.0
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据，长度为8的倍数</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Write(System.String,System.Int16[])">
            <summary>
            向寄存器中写入short数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Write(System.String,System.Int16)">
            <summary>
            向寄存器中写入short数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Write(System.String,System.UInt16[])">
            <summary>
            向寄存器中写入ushort数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Write(System.String,System.UInt16)">
            <summary>
            向寄存器中写入ushort数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Write(System.String,System.Int32[])">
            <summary>
            向寄存器中写入int数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Write(System.String,System.Int32)">
            <summary>
            向寄存器中写入int数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Write(System.String,System.UInt32[])">
            <summary>
            向寄存器中写入uint数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Write(System.String,System.UInt32)">
            <summary>
            向寄存器中写入uint数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Write(System.String,System.Single[])">
            <summary>
            向寄存器中写入float数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Write(System.String,System.Single)">
            <summary>
            向寄存器中写入float数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Write(System.String,System.Int64[])">
            <summary>
            向寄存器中写入long数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Write(System.String,System.Int64)">
            <summary>
            向寄存器中写入long数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Write(System.String,System.UInt64[])">
            <summary>
            向寄存器中写入ulong数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Write(System.String,System.UInt64)">
            <summary>
            向寄存器中写入ulong数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Write(System.String,System.Double[])">
            <summary>
            向寄存器中写入double数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.Write(System.String,System.Double)">
            <summary>
            向寄存器中写入double数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusRtu.ToString">
            <summary>
            获取当前对象的字符串标识形式
            </summary>
            <returns>字符串信息</returns>
        </member>
        <member name="T:HslCommunication.ModBus.ModBusState">
            <summary>
            ModBus的异步状态信息
            </summary>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusState.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="P:HslCommunication.ModBus.ModBusState.ConnectTime">
            <summary>
            连接的时间
            </summary>
        </member>
        <member name="P:HslCommunication.ModBus.ModBusState.IpEndPoint">
            <summary>
            远端的地址
            </summary>
        </member>
        <member name="P:HslCommunication.ModBus.ModBusState.IpAddress">
            <summary>
            远端的Ip地址
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModBusState.WorkSocket">
            <summary>
            工作套接字
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModBusState.HeadByte">
            <summary>
            消息头的缓存
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModBusState.HeadByteReceivedLength">
            <summary>
            消息头的接收长度
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModBusState.Content">
            <summary>
            内容数据缓存
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModBusState.ContentReceivedLength">
            <summary>
            内容数据接收长度
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModBusState.hybirdLock">
            <summary>
            回发信息的同步锁
            </summary>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusState.Clear">
            <summary>
            清除原先的接收状态
            </summary>
        </member>
        <member name="T:HslCommunication.ModBus.ModbusTcpNet">
            <summary>
            Modbus-Tcp协议的客户端通讯类，方便的和服务器进行数据交互
            </summary>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.#ctor">
            <summary>
            实例化一个MOdbus-Tcp协议的客户端对象
            </summary>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.#ctor(System.String,System.Int32,System.Byte)">
            <summary>
            指定服务器地址，端口号，客户端自己的站号来初始化
            </summary>
            <param name="ipAddress">服务器的Ip地址</param>
            <param name="port">服务器的端口号</param>
            <param name="station">客户端自身的站号</param>
        </member>
        <member name="P:HslCommunication.ModBus.ModbusTcpNet.AddressStartWithZero">
            <summary>
            获取或设置起始的地址是否从0开始，默认为True
            </summary>
        </member>
        <member name="P:HslCommunication.ModBus.ModbusTcpNet.Station">
            <summary>
            获取或者重新修改服务器的站号信息
            </summary>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.AnalysisAddress(System.String)">
            <summary>
            解析数据地址，解析出地址类型，起始地址
            </summary>
            <param name="address">数据地址</param>
            <returns>解析出地址类型，起始地址，DB块的地址</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.AnalysisReadAddress(System.String)">
            <summary>
            解析数据地址，解析出地址类型，起始地址
            </summary>
            <param name="address">数据地址</param>
            <returns>解析出地址类型，起始地址，DB块的地址</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.BuildReadCommandBase(System.Byte,System.String,System.UInt16)">
            <summary>
            读取数据的基础指令，需要指定指令码，地址，长度
            </summary>
            <param name="code"></param>
            <param name="address"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.BuildReadCoilCommand(System.String,System.UInt16)">
            <summary>
            生成一个读取线圈的指令头
            </summary>
            <param name="address">地址</param>
            <param name="count">长度</param>
            <returns>携带有命令字节</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.BuildReadDiscreteCommand(System.String,System.UInt16)">
            <summary>
            生成一个读取离散信息的指令头
            </summary>
            <param name="address">地址</param>
            <param name="count">长度</param>
            <returns>携带有命令字节</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.BuildReadRegisterCommand(System.String,System.UInt16)">
            <summary>
            生成一个读取寄存器的指令头
            </summary>
            <param name="address"></param>
            <param name="count"></param>
            <returns>携带有命令字节</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.GetDescriptionByErrorCode(System.Byte)">
            <summary>
            通过错误码来获取到对应的文本消息
            </summary>
            <param name="code">错误码</param>
            <returns>错误的文本描述</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.CheckModbusTcpResponse(System.Byte[])">
            <summary>
            检查当前的Modbus-Tcp响应是否是正确的
            </summary>
            <param name="send">发送的数据信息</param>
            <returns>带是否成功的结果数据</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.ReadCustomer``1(System.String)">
            <summary>
            读取自定义的数据类型，只针对寄存器而言，需要规定了写入和解析规则
            </summary>
            <typeparam name="T">类型名称</typeparam>
            <param name="address">起始地址</param>
            <returns>带是否成功的特定类型的对象</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.WriteCustomer``1(System.String,``0)">
            <summary>
            写入自定义的数据类型到寄存器去，只要规定了生成字节的方法即可
            </summary>
            <typeparam name="T">自定义类型</typeparam>
            <param name="address">起始地址</param>
            <param name="data">实例对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.ReadModBusBase(System.Byte,System.String,System.UInt16)">
            <summary>
            读取服务器的数据，需要指定不同的功能码
            </summary>
            <param name="code">指令</param>
            <param name="address">地址</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.ReadCoil(System.String)">
            <summary>
            读取线圈，需要指定起始地址
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <returns>带有成功标志的bool对象</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.ReadCoil(System.String,System.UInt16)">
            <summary>
            批量的读取线圈，需要指定起始地址，读取长度
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <param name="length">读取长度</param>
            <returns>带有成功标志的bool数组对象</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.ReadDiscrete(System.String)">
            <summary>
            读取输入线圈，需要指定起始地址
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <returns>带有成功标志的bool对象</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.ReadDiscrete(System.String,System.UInt16)">
            <summary>
            批量的读取输入点，需要指定起始地址，读取长度
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <param name="length">读取长度</param>
            <returns>带有成功标志的bool数组对象</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Read(System.String,System.UInt16)">
            <summary>
            从Modbus服务器批量读取寄存器的信息，需要指定起始地址，读取长度
            </summary>
            <param name="address">起始地址，格式为"1234"，或者是带功能码格式03X1234</param>
            <param name="length">读取的数量</param>
            <returns>带有成功标志的字节信息</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.ReadInt16(System.String)">
            <summary>
            读取指定地址的short数据
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <returns>带有成功标志的short数据</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.ReadUInt16(System.String)">
            <summary>
            读取指定地址的ushort数据
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <returns>带有成功标志的ushort数据</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.ReadInt32(System.String)">
            <summary>
            读取指定地址的int数据
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <returns>带有成功标志的int数据</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.ReadUInt32(System.String)">
            <summary>
            读取指定地址的uint数据
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <returns>带有成功标志的uint数据</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.ReadFloat(System.String)">
            <summary>
            读取指定地址的float数据
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <returns>带有成功标志的float数据</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.ReadInt64(System.String)">
            <summary>
            读取指定地址的long数据
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <returns>带有成功标志的long数据</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.ReadUInt64(System.String)">
            <summary>
            读取指定地址的ulong数据
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <returns>带有成功标志的ulong数据</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.ReadDouble(System.String)">
            <summary>
            读取指定地址的double数据
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <returns>带有成功标志的double数据</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.ReadString(System.String,System.UInt16)">
            <summary>
            读取地址地址的String数据，字符串编码为ASCII
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <param name="length">字符串长度</param>
            <returns>带有成功标志的string数据</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.WriteOneRegister(System.String,System.Byte,System.Byte)">
            <summary>
            写一个寄存器数据
            </summary>
            <param name="address">起始地址</param>
            <param name="high">高位</param>
            <param name="low">地位</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.WriteOneRegister(System.String,System.Int16)">
            <summary>
            写一个寄存器数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.WriteOneRegister(System.String,System.UInt16)">
            <summary>
            写一个寄存器数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Write(System.String,System.Byte[])">
            <summary>
            将数据写入到Modbus的寄存器上去，需要指定起始地址和数据内容
            </summary>
            <param name="address">起始地址，格式为"1234"</param>
            <param name="value">写入的数据，长度根据data的长度来指示</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.WriteCoil(System.String,System.Boolean)">
            <summary>
            写一个线圈信息，指定是否通断
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.WriteCoil(System.String,System.Boolean[])">
            <summary>
            
            </summary>
            <param name="address">起始地址</param>
            <param name="values">写入值</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Write(System.String,System.String)">
            <summary>
            向寄存器中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Write(System.String,System.String,System.Int32)">
            <summary>
            向寄存器中写入指定长度的字符串,超出截断，不够补0，编码格式为ASCII
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.WriteUnicodeString(System.String,System.String)">
            <summary>
            向寄存器中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.WriteUnicodeString(System.String,System.String,System.Int32)">
            <summary>
            向寄存器中写入指定长度的字符串,超出截断，不够补0，编码格式为Unicode
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Write(System.String,System.Boolean[])">
            <summary>
            向寄存器中写入bool数组，返回值说明，比如你写入M100,那么data[0]对应M100.0
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据，长度为8的倍数</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Write(System.String,System.Int16[])">
            <summary>
            向寄存器中写入short数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Write(System.String,System.Int16)">
            <summary>
            向寄存器中写入short数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Write(System.String,System.UInt16[])">
            <summary>
            向寄存器中写入ushort数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Write(System.String,System.UInt16)">
            <summary>
            向寄存器中写入ushort数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Write(System.String,System.Int32[])">
            <summary>
            向寄存器中写入int数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Write(System.String,System.Int32)">
            <summary>
            向寄存器中写入int数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Write(System.String,System.UInt32[])">
            <summary>
            向寄存器中写入uint数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Write(System.String,System.UInt32)">
            <summary>
            向寄存器中写入uint数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Write(System.String,System.Single[])">
            <summary>
            向寄存器中写入float数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Write(System.String,System.Single)">
            <summary>
            向寄存器中写入float数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Write(System.String,System.Int64[])">
            <summary>
            向寄存器中写入long数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Write(System.String,System.Int64)">
            <summary>
            向寄存器中写入long数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Write(System.String,System.UInt64[])">
            <summary>
            向寄存器中写入ulong数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Write(System.String,System.UInt64)">
            <summary>
            向寄存器中写入ulong数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Write(System.String,System.Double[])">
            <summary>
            向寄存器中写入double数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.Write(System.String,System.Double)">
            <summary>
            向寄存器中写入double数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpNet.ToString">
            <summary>
            获取当前对象的字符串标识形式
            </summary>
            <returns>字符串信息</returns>
        </member>
        <member name="T:HslCommunication.ModBus.ModbusTcpServer">
            <summary>
            Modbus的虚拟服务器，同时支持Tcp和Rtu的机制，支持线圈和寄存器的读写操作
            </summary>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.#ctor">
            <summary>
            实例化一个Modbus Tcp的服务器，支持数据读写操作
            </summary>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.IsAddressOverBoundary(System.UInt16,System.UInt16)">
            <summary>
            判断操作线圈或是寄存器的是否发生了越界
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数据长度</param>
            <returns>越界返回<c>True</c>，否则返回<c>False</c></returns>
        </member>
        <member name="E:HslCommunication.ModBus.ModbusTcpServer.OnDataReceived">
            <summary>
            接收到数据的时候就行触发
            </summary>
        </member>
        <member name="P:HslCommunication.ModBus.ModbusTcpServer.OnlineCount">
            <summary>
            当前在线的客户端的数量
            </summary>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadCoil(System.UInt16)">
            <summary>
            读取地址的线圈的通断情况
            </summary>
            <param name="address">起始地址</param>
            <returns><c>True</c>或是<c>False</c></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadCoil(System.UInt16,System.UInt16)">
            <summary>
            批量读取地址的线圈的通断情况
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取长度</param>
            <returns><c>True</c>或是<c>False</c></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.WriteCoil(System.UInt16,System.Boolean)">
            <summary>
            写入线圈的通断值
            </summary>
            <param name="address">起始地址</param>
            <param name="data">是否通断</param>
            <returns><c>True</c>或是<c>False</c></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.WriteCoil(System.UInt16,System.Boolean[])">
            <summary>
            写入线圈数组的通断值
            </summary>
            <param name="address">起始地址</param>
            <param name="data">是否通断</param>
            <returns><c>True</c>或是<c>False</c></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadRegister(System.UInt16,System.UInt16)">
            <summary>
            读取自定义的寄存器的值
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数据长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns>byte数组值</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadInt16(System.UInt16)">
            <summary>
            读取一个寄存器的值，返回类型short
            </summary>
            <param name="address">起始地址</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns>short值</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadInt16(System.UInt16,System.UInt16)">
            <summary>
            批量读取寄存器的值
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取的short长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns>short数组值</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadUInt16(System.UInt16)">
            <summary>
            读取一个寄存器的值，返回类型为ushort
            </summary>
            <param name="address">起始地址</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns>ushort值</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadUInt16(System.UInt16,System.UInt16)">
            <summary>
            批量读取寄存器的值
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns>ushort数组</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadInt32(System.UInt16)">
            <summary>
            读取两个寄存器组成的int值
            </summary>
            <param name="address">起始地址</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns>int值</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadInt32(System.UInt16,System.UInt16)">
            <summary>
            批量读取寄存器组成的int值
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns>int数组</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadUInt32(System.UInt16)">
            <summary>
            读取两个寄存器组成的uint值
            </summary>
            <param name="address">起始地址</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadUInt32(System.UInt16,System.UInt16)">
            <summary>
            批量读取寄存器组成的uint值
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadFloat(System.UInt16)">
            <summary>
            读取两个寄存器组成的float值
            </summary>
            <param name="address">起始地址</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadFloat(System.UInt16,System.UInt16)">
            <summary>
            批量读取寄存器组成的float值
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadInt64(System.UInt16)">
            <summary>
            读取四个寄存器组成的long值
            </summary>
            <param name="address">起始地址</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadInt64(System.UInt16,System.UInt16)">
            <summary>
            批量读取寄存器组成的long值
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadUInt64(System.UInt16)">
            <summary>
            读取四个寄存器组成的ulong值
            </summary>
            <param name="address">起始地址</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadUInt64(System.UInt16,System.UInt16)">
            <summary>
            批量读取寄存器组成的ulong值
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadDouble(System.UInt16)">
            <summary>
            读取四个寄存器组成的double值
            </summary>
            <param name="address">起始地址</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadDouble(System.UInt16,System.UInt16)">
            <summary>
            批量读取寄存器组成的double值
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadString(System.UInt16,System.UInt16)">
            <summary>
            读取ASCII字符串，长度为寄存器数量，最终的字符串长度为这个值的2倍
            </summary>
            <param name="address">起始地址</param>
            <param name="length">寄存器长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.Write(System.UInt16,System.Byte[])">
            <summary>
            写入寄存器数据，指定字节数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">字节数据</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.Write(System.UInt16,System.Byte,System.Byte)">
            <summary>
            写入寄存器数据，指定字节数据
            </summary>
            <param name="address">起始地址</param>
            <param name="high">高位数据</param>
            <param name="low">地位数据</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.Write(System.UInt16,System.Int16)">
            <summary>
            往Modbus服务器中的指定寄存器写入数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.Write(System.UInt16,System.Int16[])">
            <summary>
            往Modbus服务器中的指定寄存器写入数组
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.Write(System.UInt16,System.UInt16)">
            <summary>
            往Modbus服务器中的指定寄存器写入数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.Write(System.UInt16,System.UInt16[])">
            <summary>
            往Modbus服务器中的指定寄存器写入数组
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.Write(System.UInt16,System.Int32)">
            <summary>
            往Modbus服务器中的指定寄存器写入数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.Write(System.UInt16,System.Int32[])">
            <summary>
            往Modbus服务器中的指定寄存器写入数组
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.Write(System.UInt16,System.UInt32)">
            <summary>
            往Modbus服务器中的指定寄存器写入数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.Write(System.UInt16,System.UInt32[])">
            <summary>
            往Modbus服务器中的指定寄存器写入数组
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.Write(System.UInt16,System.Single)">
            <summary>
            往Modbus服务器中的指定寄存器写入数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.Write(System.UInt16,System.Single[])">
            <summary>
            往Modbus服务器中的指定寄存器写入数组
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.Write(System.UInt16,System.Int64)">
            <summary>
            往Modbus服务器中的指定寄存器写入数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.Write(System.UInt16,System.Int64[])">
            <summary>
            往Modbus服务器中的指定寄存器写入数组
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.Write(System.UInt16,System.UInt64)">
            <summary>
            往Modbus服务器中的指定寄存器写入数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.Write(System.UInt16,System.UInt64[])">
            <summary>
            往Modbus服务器中的指定寄存器写入数组
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.Write(System.UInt16,System.Double)">
            <summary>
            往Modbus服务器中的指定寄存器写入数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.Write(System.UInt16,System.Double[])">
            <summary>
            往Modbus服务器中的指定寄存器写入数组
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.Write(System.UInt16,System.String)">
            <summary>
            往Mobus服务器中的指定寄存器写入字符串
            </summary>
            <param name="address">其实地址</param>
            <param name="value">ASCII编码的字符串的信息</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ThreadPoolLogin(System.Object)">
            <summary>
            当接收到了新的请求的时候执行的操作
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.CreateExceptionBack(System.Byte[],System.Byte)">
            <summary>
            创建特殊的功能标识，然后返回该信息
            </summary>
            <param name="modbusCore"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.CreateReadBack(System.Byte[],System.Byte[])">
            <summary>
            创建返回消息
            </summary>
            <param name="modbusCore"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.CreateWriteBack(System.Byte[])">
            <summary>
            创建写入成功的反馈信号
            </summary>
            <param name="modbus"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.AddSubcription(HslCommunication.ModBus.ModBusMonitorAddress)">
            <summary>
            新增一个数据监视的任务，针对的是寄存器
            </summary>
            <param name="monitor"></param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.RemoveSubcrption(HslCommunication.ModBus.ModBusMonitorAddress)">
            <summary>
            移除一个数据监视的任务
            </summary>
            <param name="monitor"></param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.OnRegisterBeforWrite(System.UInt16,System.Int16,System.Int16)">
            <summary>
            在数据变更后，进行触发是否产生订阅
            </summary>
            <param name="address">数据地址</param>
            <param name="before"></param>
            <param name="after"></param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.SetTrustedIpAddress(System.Collections.Generic.List{System.String})">
            <summary>
            设置并启动受信任的客户端登录并读写，如果为null，将关闭对客户端的ip验证
            </summary>
            <param name="clients">受信任的客户端列表</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.CheckIpAddressTrusted(System.String)">
            <summary>
            检查该Ip地址是否是受信任的
            </summary>
            <param name="ipAddress">Ip地址信息</param>
            <returns>是受信任的返回<c>True</c>，否则返回<c>False</c></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.GetTrustedClients">
            <summary>
            获取受信任的客户端列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.CheckModbusMessageLegal(System.Byte[])">
            <summary>
            检测当前的Modbus接收的指定是否是合法的
            </summary>
            <param name="buffer">缓存数据</param>
            <returns>是否合格</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ReadFromModbusCore(System.Byte[])">
            <summary>
            Modbus核心数据交互方法
            </summary>
            <param name="modbusCore">核心的Modbus报文</param>
            <returns>进行数据交互之后的结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ModbusTcpTransModbusCore(System.Byte[])">
            <summary>
            将Modbus-Tcp的报文转换成核心的Modbus报文，就是移除报文头
            </summary>
            <param name="modbusTcp"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ModbusCoreTransModbusTcp(System.Byte[],System.Byte[])">
            <summary>
            根据Modbus数据信息生成Modbus-Tcp数据信息
            </summary>
            <param name="modbusData"></param>
            <param name="modbusOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ModbusRtuTransModbusCore(System.Byte[])">
            <summary>
            将Modbus-Rtu的报文转成核心的Modbus报文，移除了CRC校验
            </summary>
            <param name="modbusRtu"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ModbusCoreTransModbusRtu(System.Byte[])">
            <summary>
            根据Modbus数据信息生成Modbus-Rtu数据信息
            </summary>
            <param name="modbusData"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.StartSerialPort(System.String)">
            <summary>
            使用默认的参数进行初始化串口，9600波特率，8位数据位，无奇偶校验，1位停止位
            </summary>
            <param name="com">串口信息</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.StartSerialPort(System.String,System.Int32)">
            <summary>
            使用默认的参数进行初始化串口，8位数据位，无奇偶校验，1位停止位
            </summary>
            <param name="com">串口信息</param>
            <param name="baudRate">波特率</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.StartSerialPort(System.Action{System.IO.Ports.SerialPort})">
            <summary>
            使用自定义的初始化方法初始化串口的参数
            </summary>
            <param name="inni">初始化信息的委托</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.CloseSerialPort">
            <summary>
            关闭串口
            </summary>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.SerialPort_DataReceived(System.Object,System.IO.Ports.SerialDataReceivedEventArgs)">
            <summary>
            接收到串口数据的时候触发
            </summary>
            <param name="sender">串口对象</param>
            <param name="e">消息</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModbusTcpServer.ToString">
            <summary>
            获取本对象的字符串表示形式
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.ModBus.MonitorAddress">
            <summary>
            监视使用的数据缓存
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.MonitorAddress.Address">
            <summary>
            地址
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.MonitorAddress.ValueOrigin">
            <summary>
            原有的值
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.MonitorAddress.ValueNew">
            <summary>
            新的值
            </summary>
        </member>
        <member name="T:HslCommunication.IDataTransfer">
            <summary>
            用于PLC通讯及ModBus自定义数据类型的读写操作
            </summary>
        </member>
        <member name="P:HslCommunication.IDataTransfer.ReadCount">
            <summary>
            读取的数据长度，对于西门子，等同于字节数，对于三菱和Modbus为字节数的一半
            </summary>
        </member>
        <member name="M:HslCommunication.IDataTransfer.ParseSource(System.Byte[])">
            <summary>
            从字节数组进行解析实际的对象
            </summary>
            <param name="Content"></param>
        </member>
        <member name="M:HslCommunication.IDataTransfer.ToSource">
            <summary>
            将对象生成字符源，写入PLC中
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Profinet.Melsec.MelsecA1EDataType">
            <summary>
            三菱PLC的数据类型，此处包含了几个常用的类型
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1EDataType.#ctor(System.Byte[],System.Byte,System.String,System.Int32)">
            <summary>
            如果您清楚类型代号，可以根据值进行扩展
            </summary>
            <param name="code">数据类型的代号</param>
            <param name="type">0或1，默认为0</param>
            <param name="asciiCode">ASCII格式的类型信息</param>
            <param name="fromBase">指示地址的多少进制的，10或是16</param>
        </member>
        <member name="P:HslCommunication.Profinet.Melsec.MelsecA1EDataType.DataCode">
            <summary>
            类型的代号值（软元件代码，用于区分软元件类型，如：D，R）
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.Melsec.MelsecA1EDataType.DataType">
            <summary>
            数据的类型，0代表按字，1代表按位
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.Melsec.MelsecA1EDataType.AsciiCode">
            <summary>
            当以ASCII格式通讯时的类型描述
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.Melsec.MelsecA1EDataType.FromBase">
            <summary>
            指示地址是10进制，还是16进制的
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Melsec.MelsecA1EDataType.X">
            <summary>
            X输入寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Melsec.MelsecA1EDataType.Y">
            <summary>
            Y输出寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Melsec.MelsecA1EDataType.M">
            <summary>
            M中间寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Melsec.MelsecA1EDataType.S">
            <summary>
            S状态寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Melsec.MelsecA1EDataType.D">
            <summary>
            D数据寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Melsec.MelsecA1EDataType.R">
            <summary>
            R文件寄存器
            </summary>
        </member>
        <member name="T:HslCommunication.Profinet.Melsec.MelsecA1ENet">
            <summary>
            三菱PLC通讯协议，采用A兼容1E帧协议实现，使用二进制码通讯，请根据实际型号来进行选取
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.#ctor">
            <summary>
            实例化三菱的A兼容1E帧协议的通讯对象
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个三菱的A兼容1E帧协议的通讯对象
            </summary>
            <param name="ipAddress">PLC的Ip地址</param>
            <param name="port">PLC的端口</param>
        </member>
        <member name="P:HslCommunication.Profinet.Melsec.MelsecA1ENet.PLCNumber">
            <summary>
            PLC编号
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.AnalysisAddress(System.String)">
            <summary>
            解析数据地址
            </summary>
            <param name="address">数据地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.BuildReadCommand(System.String,System.UInt16)">
            <summary>
            根据类型地址长度确认需要读取的指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="length">长度</param>
            <returns>带有成功标志的指令数据</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.BuildWriteCommand(System.String,System.Byte[],System.Int32)">
            <summary>
            根据类型地址以及需要写入的数据来生成指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="value"></param>
            <param name="length">指定长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.ReadCustomer``1(System.String)">
            <summary>
            读取自定义的数据类型，只要规定了写入和解析规则
            </summary>
            <typeparam name="T">类型名称</typeparam>
            <param name="address">起始地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.WriteCustomer``1(System.String,``0)">
            <summary>
            写入自定义的数据类型到PLC去，只要规定了生成字节的方法即可
            </summary>
            <typeparam name="T">自定义类型</typeparam>
            <param name="address">起始地址</param>
            <param name="data">实例对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Read(System.String,System.UInt16)">
            <summary>
            从三菱PLC中读取想要的数据，返回读取结果
            </summary>
            <param name="address">读取地址，格式为"M100","D100","W1A0"</param>
            <param name="length">读取的数据长度，字最大值960，位最大值7168</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.ReadBool(System.String,System.UInt16)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取的长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.ReadBool(System.String)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.ReadInt16(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的short数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.ReadUInt16(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的ushort数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.ReadInt32(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的int数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.ReadUInt32(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的uint数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.ReadFloat(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的float数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.ReadInt64(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的long数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.ReadUInt64(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的ulong数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.ReadDouble(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的double数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.ReadString(System.String,System.UInt16)">
            <summary>
            读取三菱PLC中字软元件地址地址的String数据，编码为ASCII
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <param name="length">字符串长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.String)">
            <summary>
            向PLC中字软元件写入字符串，编码格式为ASCII
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.String,System.Int32)">
            <summary>
            向PLC中字软元件写入指定长度的字符串,超出截断，不够补0，编码格式为ASCII
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.WriteUnicodeString(System.String,System.String)">
            <summary>
            向PLC中字软元件写入字符串，编码格式为Unicode
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.WriteUnicodeString(System.String,System.String,System.Int32)">
            <summary>
            向PLC中字软元件写入指定长度的字符串,超出截断，不够补0，编码格式为Unicode
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.Boolean)">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据，长度为8的倍数</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.Boolean[])">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据，可以指定任意的长度</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.Int16[])">
            <summary>
            向PLC中字软元件写入short数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.Int16)">
            <summary>
            向PLC中字软元件写入short数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.UInt16[])">
            <summary>
            向PLC中字软元件写入ushort数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.UInt16)">
            <summary>
            向PLC中字软元件写入ushort数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.Int32[])">
            <summary>
            向PLC中字软元件写入int数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.Int32)">
            <summary>
            向PLC中字软元件写入int数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.UInt32[])">
            <summary>
            向PLC中字软元件写入uint数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.UInt32)">
            <summary>
            向PLC中字软元件写入uint数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.Single[])">
            <summary>
            向PLC中字软元件写入float数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.Single)">
            <summary>
            向PLC中字软元件写入float数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.Int64[])">
            <summary>
            向PLC中字软元件写入long数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.Int64)">
            <summary>
            向PLC中字软元件写入long数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.UInt64[])">
            <summary>
            向PLC中字软元件写入ulong数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.UInt64)">
            <summary>
            向PLC中字软元件写入ulong数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.Double[])">
            <summary>
            向PLC中字软元件写入double数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.Double)">
            <summary>
            向PLC中字软元件写入double数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecA1ENet.ToString">
            <summary>
            获取当前对象的字符串标识形式
            </summary>
            <returns>字符串信息</returns>
        </member>
        <member name="T:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet">
            <summary>
            三菱PLC通讯类，采用Qna兼容3E帧协议实现，需要在PLC侧先的以太网模块先进行配置，必须为ASCII通讯格式
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.#ctor">
            <summary>
            实例化三菱的Qna兼容3E帧协议的通讯对象
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个三菱的Qna兼容3E帧协议的通讯对象
            </summary>
            <param name="ipAddress">PLCd的Ip地址</param>
            <param name="port">PLC的端口</param>
        </member>
        <member name="P:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.NetworkNumber">
            <summary>
            网络号
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.NetworkStationNumber">
            <summary>
            网络站号
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.AnalysisAddress(System.String)">
            <summary>
            解析数据地址
            </summary>
            <param name="address">数据地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.BuildReadCommand(System.String,System.UInt16)">
            <summary>
            根据类型地址长度确认需要读取的指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="length">长度</param>
            <returns>带有成功标志的指令数据</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.BuildWriteCommand(System.String,System.Byte[])">
            <summary>
            根据类型地址以及需要写入的数据来生成指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.ReadCustomer``1(System.String)">
            <summary>
            读取自定义的数据类型，只要规定了写入和解析规则
            </summary>
            <typeparam name="T">类型名称</typeparam>
            <param name="address">起始地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.WriteCustomer``1(System.String,``0)">
            <summary>
            写入自定义的数据类型到PLC去，只要规定了生成字节的方法即可
            </summary>
            <typeparam name="T">自定义类型</typeparam>
            <param name="address">起始地址</param>
            <param name="data">实例对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Read(System.String,System.UInt16)">
            <summary>
            从三菱PLC中读取想要的数据，返回读取结果
            </summary>
            <param name="address">读取地址，格式为"M100","D100","W1A0"</param>
            <param name="length">读取的数据长度，字最大值960，位最大值7168</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.ReadBool(System.String,System.UInt16)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取的长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.ReadBool(System.String)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.ReadInt16(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的short数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.ReadUInt16(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的ushort数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.ReadInt32(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的int数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.ReadUInt32(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的uint数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.ReadFloat(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的float数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.ReadInt64(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的long数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.ReadUInt64(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的ulong数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.ReadDouble(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的double数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.ReadString(System.String,System.UInt16)">
            <summary>
            读取三菱PLC中字软元件地址地址的String数据，编码为ASCII
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <param name="length">字符串长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.String)">
            <summary>
            向PLC中字软元件写入字符串，编码格式为ASCII
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.String,System.Int32)">
            <summary>
            向PLC中字软元件写入指定长度的字符串,超出截断，不够补0，编码格式为ASCII
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.WriteUnicodeString(System.String,System.String)">
            <summary>
            向PLC中字软元件写入字符串，编码格式为Unicode
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.WriteUnicodeString(System.String,System.String,System.Int32)">
            <summary>
            向PLC中字软元件写入指定长度的字符串,超出截断，不够补0，编码格式为Unicode
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.Boolean)">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据，长度为8的倍数</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.Boolean[])">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据，可以指定任意的长度</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.Int16[])">
            <summary>
            向PLC中字软元件写入short数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.Int16)">
            <summary>
            向PLC中字软元件写入short数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.UInt16[])">
            <summary>
            向PLC中字软元件写入ushort数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.UInt16)">
            <summary>
            向PLC中字软元件写入ushort数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.Int32[])">
            <summary>
            向PLC中字软元件写入int数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.Int32)">
            <summary>
            向PLC中字软元件写入int数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.UInt32[])">
            <summary>
            向PLC中字软元件写入uint数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.UInt32)">
            <summary>
            向PLC中字软元件写入uint数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.Single[])">
            <summary>
            向PLC中字软元件写入float数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.Single)">
            <summary>
            向PLC中字软元件写入float数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.Int64[])">
            <summary>
            向PLC中字软元件写入long数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.Int64)">
            <summary>
            向PLC中字软元件写入long数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.UInt64[])">
            <summary>
            向PLC中字软元件写入ulong数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.UInt64)">
            <summary>
            向PLC中字软元件写入ulong数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.Double[])">
            <summary>
            向PLC中字软元件写入double数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.Double)">
            <summary>
            向PLC中字软元件写入double数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcAsciiNet.ToString">
            <summary>
            获取当前对象的字符串标识形式
            </summary>
            <returns>字符串信息</returns>
        </member>
        <member name="T:HslCommunication.Profinet.Melsec.MelsecMcDataType">
            <summary>
            三菱PLC的数据类型，此处包含了几个常用的类型
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcDataType.#ctor(System.Byte,System.Byte,System.String,System.Int32)">
            <summary>
            如果您清楚类型代号，可以根据值进行扩展
            </summary>
            <param name="code">数据类型的代号</param>
            <param name="type">0或1，默认为0</param>
            <param name="asciiCode">ASCII格式的类型信息</param>
            <param name="fromBase">指示地址的多少进制的，10或是16</param>
        </member>
        <member name="P:HslCommunication.Profinet.Melsec.MelsecMcDataType.DataCode">
            <summary>
            类型的代号值
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.Melsec.MelsecMcDataType.DataType">
            <summary>
            数据的类型，0代表按字，1代表按位
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.Melsec.MelsecMcDataType.AsciiCode">
            <summary>
            当以ASCII格式通讯时的类型描述
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.Melsec.MelsecMcDataType.FromBase">
            <summary>
            指示地址是10进制，还是16进制的
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Melsec.MelsecMcDataType.X">
            <summary>
            X输入寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Melsec.MelsecMcDataType.Y">
            <summary>
            Y输出寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Melsec.MelsecMcDataType.M">
            <summary>
            M中间寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Melsec.MelsecMcDataType.D">
            <summary>
            D数据寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Melsec.MelsecMcDataType.W">
            <summary>
            W链接寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Melsec.MelsecMcDataType.L">
            <summary>
            L锁存继电器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Melsec.MelsecMcDataType.F">
            <summary>
            F报警器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Melsec.MelsecMcDataType.V">
            <summary>
            V边沿继电器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Melsec.MelsecMcDataType.B">
            <summary>
            B链接继电器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Melsec.MelsecMcDataType.R">
            <summary>
            R文件寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Melsec.MelsecMcDataType.S">
            <summary>
            S步进继电器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Melsec.MelsecMcDataType.Z">
            <summary>
            变址寄存器
            </summary>
        </member>
        <member name="T:HslCommunication.Profinet.Melsec.MelsecMcNet">
            <summary>
            三菱PLC通讯类，采用Qna兼容3E帧协议实现，需要在PLC侧先的以太网模块先进行配置，必须为二进制通讯
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.#ctor">
            <summary>
            实例化三菱的Qna兼容3E帧协议的通讯对象
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个三菱的Qna兼容3E帧协议的通讯对象
            </summary>
            <param name="ipAddress">PLCd的Ip地址</param>
            <param name="port">PLC的端口</param>
        </member>
        <member name="P:HslCommunication.Profinet.Melsec.MelsecMcNet.NetworkNumber">
            <summary>
            网络号
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.Melsec.MelsecMcNet.NetworkStationNumber">
            <summary>
            网络站号
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.AnalysisAddress(System.String)">
            <summary>
            解析数据地址
            </summary>
            <param name="address">数据地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.BuildReadCommand(System.String,System.UInt16)">
            <summary>
            根据类型地址长度确认需要读取的指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="length">长度</param>
            <returns>带有成功标志的指令数据</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.BuildWriteCommand(System.String,System.Byte[],System.Int32)">
            <summary>
            根据类型地址以及需要写入的数据来生成指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="value"></param>
            <param name="length">指定长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.ReadCustomer``1(System.String)">
            <summary>
            读取自定义的数据类型，只要规定了写入和解析规则
            </summary>
            <typeparam name="T">类型名称</typeparam>
            <param name="address">起始地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.WriteCustomer``1(System.String,``0)">
            <summary>
            写入自定义的数据类型到PLC去，只要规定了生成字节的方法即可
            </summary>
            <typeparam name="T">自定义类型</typeparam>
            <param name="address">起始地址</param>
            <param name="data">实例对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Read(System.String,System.UInt16)">
            <summary>
            从三菱PLC中读取想要的数据，返回读取结果
            </summary>
            <param name="address">读取地址，格式为"M100","D100","W1A0"</param>
            <param name="length">读取的数据长度，字最大值960，位最大值7168</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.ReadBool(System.String,System.UInt16)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取的长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.ReadBool(System.String)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.ReadInt16(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的short数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.ReadUInt16(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的ushort数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.ReadInt32(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的int数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.ReadUInt32(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的uint数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.ReadFloat(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的float数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.ReadInt64(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的long数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.ReadUInt64(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的ulong数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.ReadDouble(System.String)">
            <summary>
            读取三菱PLC中字软元件指定地址的double数据
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.ReadString(System.String,System.UInt16)">
            <summary>
            读取三菱PLC中字软元件地址地址的String数据，编码为ASCII
            </summary>
            <param name="address">起始地址，格式为"D100"，"W1A0"</param>
            <param name="length">字符串长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.String)">
            <summary>
            向PLC中字软元件写入字符串，编码格式为ASCII
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.String,System.Int32)">
            <summary>
            向PLC中字软元件写入指定长度的字符串,超出截断，不够补0，编码格式为ASCII
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.WriteUnicodeString(System.String,System.String)">
            <summary>
            向PLC中字软元件写入字符串，编码格式为Unicode
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.WriteUnicodeString(System.String,System.String,System.Int32)">
            <summary>
            向PLC中字软元件写入指定长度的字符串,超出截断，不够补0，编码格式为Unicode
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.Boolean)">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据，长度为8的倍数</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.Boolean[])">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据，可以指定任意的长度</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.Int16[])">
            <summary>
            向PLC中字软元件写入short数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.Int16)">
            <summary>
            向PLC中字软元件写入short数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.UInt16[])">
            <summary>
            向PLC中字软元件写入ushort数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.UInt16)">
            <summary>
            向PLC中字软元件写入ushort数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.Int32[])">
            <summary>
            向PLC中字软元件写入int数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.Int32)">
            <summary>
            向PLC中字软元件写入int数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.UInt32[])">
            <summary>
            向PLC中字软元件写入uint数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.UInt32)">
            <summary>
            向PLC中字软元件写入uint数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.Single[])">
            <summary>
            向PLC中字软元件写入float数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.Single)">
            <summary>
            向PLC中字软元件写入float数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.Int64[])">
            <summary>
            向PLC中字软元件写入long数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.Int64)">
            <summary>
            向PLC中字软元件写入long数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.UInt64[])">
            <summary>
            向PLC中字软元件写入ulong数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.UInt64)">
            <summary>
            向PLC中字软元件写入ulong数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.Double[])">
            <summary>
            向PLC中字软元件写入double数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.Write(System.String,System.Double)">
            <summary>
            向PLC中字软元件写入double数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Melsec.MelsecMcNet.ToString">
            <summary>
            获取当前对象的字符串标识形式
            </summary>
            <returns>字符串信息</returns>
        </member>
        <member name="T:HslCommunication.Profinet.Omron.OmronFinsDataType">
            <summary>
            欧姆龙的Fins协议的数据类型
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsDataType.#ctor(System.Byte,System.Byte)">
            <summary>
            实例化一个Fins的数据类型
            </summary>
            <param name="bitCode"></param>
            <param name="wordCode"></param>
        </member>
        <member name="P:HslCommunication.Profinet.Omron.OmronFinsDataType.BitCode">
            <summary>
            进行位操作的指令
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.Omron.OmronFinsDataType.WordCode">
            <summary>
            进行字操作的指令
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Omron.OmronFinsDataType.DM">
            <summary>
            DM Area
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Omron.OmronFinsDataType.CIO">
            <summary>
            CIO Area
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Omron.OmronFinsDataType.WR">
            <summary>
            Work Area
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Omron.OmronFinsDataType.HR">
            <summary>
            Holding Bit Area
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Omron.OmronFinsDataType.AR">
            <summary>
            Auxiliary Bit Area
            </summary>
        </member>
        <member name="T:HslCommunication.Profinet.Omron.OmronFinsNet">
            <summary>
            欧姆龙PLC通讯类，采用Fins-Tcp通信协议实现
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.#ctor">
            <summary>
            实例化三菱的Qna兼容3E帧协议的通讯对象
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个三菱的Qna兼容3E帧协议的通讯对象
            </summary>
            <param name="ipAddress">PLCd的Ip地址</param>
            <param name="port">PLC的端口</param>
        </member>
        <member name="P:HslCommunication.Profinet.Omron.OmronFinsNet.ICF">
            <summary>
            信息控制字段，默认0x80
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.Omron.OmronFinsNet.RSV">
            <summary>
            系统使用的内部信息
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.Omron.OmronFinsNet.GCT">
            <summary>
            网络层信息，默认0x02，如果有八层消息，就设置为0x07
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.Omron.OmronFinsNet.DNA">
            <summary>
            PLC的网络号地址，默认0x00
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.Omron.OmronFinsNet.DA1">
            <summary>
            PLC的节点地址，默认0x13
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.Omron.OmronFinsNet.DA2">
            <summary>
            PLC的单元号地址
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.Omron.OmronFinsNet.SNA">
            <summary>
            上位机的网络号地址
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.Omron.OmronFinsNet.SA1">
            <summary>
            上位机的节点地址，默认0x0B
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.Omron.OmronFinsNet.SA2">
            <summary>
            上位机的单元号地址
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.Omron.OmronFinsNet.SID">
            <summary>
            设备的标识号
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.AnalysisAddress(System.String,System.Boolean)">
            <summary>
            解析数据地址，Omron手册第188页
            </summary>
            <param name="address">数据地址</param>
            <param name="isBit">是否是位地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.PackCommand(System.Byte[])">
            <summary>
            将普通的指令打包成完整的指令
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.BuildReadCommand(System.String,System.UInt16,System.Boolean)">
            <summary>
            根据类型地址长度确认需要读取的指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="length">长度</param>
            <param name="isBit">是否是位读取</param>
            <returns>带有成功标志的指令数据</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.BuildWriteCommand(System.String,System.Byte[],System.Boolean)">
            <summary>
            根据类型地址以及需要写入的数据来生成指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="value"></param>
            <param name="isBit">是否是位操作</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.ReadCustomer``1(System.String)">
            <summary>
            读取自定义的数据类型，只要规定了写入和解析规则
            </summary>
            <typeparam name="T">类型名称</typeparam>
            <param name="address">起始地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.WriteCustomer``1(System.String,``0)">
            <summary>
            写入自定义的数据类型到PLC去，只要规定了生成字节的方法即可
            </summary>
            <typeparam name="T">自定义类型</typeparam>
            <param name="address">起始地址</param>
            <param name="data">实例对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.InitilizationOnConnect(System.Net.Sockets.Socket)">
            <summary>
            在连接上欧姆龙PLC后，需要进行一步握手协议
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Read(System.String,System.UInt16)">
            <summary>
            从欧姆龙PLC中读取想要的数据，返回读取结果，读取单位为字
            </summary>
            <param name="address">读取地址，格式为"D100","C100","W100","H100","A100"</param>
            <param name="length">读取的数据长度，字最大值960，位最大值7168</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.ReadBool(System.String,System.UInt16)">
            <summary>
            从欧姆龙PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">读取地址，格式为"D100","C100","W100","H100","A100"</param>
            <param name="length">读取的长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.ReadBool(System.String)">
            <summary>
            从欧姆龙PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">读取地址，格式为"D100.0","C100.15","W100.7","H100.4","A100.9"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.ReadInt16(System.String)">
            <summary>
            读取欧姆龙PLC中字软元件指定地址的short数据
            </summary>
            <param name="address">读取地址，格式为"D100","C100","W100","H100","A100"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.ReadUInt16(System.String)">
            <summary>
            读取欧姆龙PLC中字软元件指定地址的ushort数据
            </summary>
            <param name="address">读取地址，格式为"D100","C100","W100","H100","A100"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.ReadInt32(System.String)">
            <summary>
            读取欧姆龙PLC中字软元件指定地址的int数据
            </summary>
            <param name="address">读取地址，格式为"D100","C100","W100","H100","A100"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.ReadUInt32(System.String)">
            <summary>
            读取欧姆龙PLC中字软元件指定地址的uint数据
            </summary>
            <param name="address">读取地址，格式为"D100","C100","W100","H100","A100"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.ReadFloat(System.String)">
            <summary>
            读取欧姆龙PLC中字软元件指定地址的float数据
            </summary>
            <param name="address">读取地址，格式为"D100","C100","W100","H100","A100"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.ReadInt64(System.String)">
            <summary>
            读取欧姆龙PLC中字软元件指定地址的long数据
            </summary>
            <param name="address">读取地址，格式为"D100","C100","W100","H100","A100"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.ReadUInt64(System.String)">
            <summary>
            读取欧姆龙PLC中字软元件指定地址的ulong数据
            </summary>
            <param name="address">读取地址，格式为"D100","C100","W100","H100","A100"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.ReadDouble(System.String)">
            <summary>
            读取欧姆龙PLC中字软元件指定地址的double数据
            </summary>
            <param name="address">读取地址，格式为"D100","C100","W100","H100","A100"</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.ReadString(System.String,System.UInt16)">
            <summary>
            读取欧姆龙PLC中字软元件地址地址的String数据，编码为ASCII
            </summary>
            <param name="address">读取地址，格式为"D100","C100","W100","H100","A100"</param>
            <param name="length">字符串长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.String)">
            <summary>
            向PLC中字软元件写入字符串，编码格式为ASCII
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.String,System.Int32)">
            <summary>
            向PLC中字软元件写入指定长度的字符串,超出截断，不够补0，编码格式为ASCII
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.WriteUnicodeString(System.String,System.String)">
            <summary>
            向PLC中字软元件写入字符串，编码格式为Unicode
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.WriteUnicodeString(System.String,System.String,System.Int32)">
            <summary>
            向PLC中字软元件写入指定长度的字符串,超出截断，不够补0，编码格式为Unicode
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.Boolean)">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入D100,values[0]对应D100.0
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据，长度为8的倍数</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.Boolean[])">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入D100,values[0]对应D100.0
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据，可以指定任意的长度</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.Int16[])">
            <summary>
            向PLC中字软元件写入short数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.Int16)">
            <summary>
            向PLC中字软元件写入short数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.UInt16[])">
            <summary>
            向PLC中字软元件写入ushort数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.UInt16)">
            <summary>
            向PLC中字软元件写入ushort数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.Int32[])">
            <summary>
            向PLC中字软元件写入int数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.Int32)">
            <summary>
            向PLC中字软元件写入int数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.UInt32[])">
            <summary>
            向PLC中字软元件写入uint数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.UInt32)">
            <summary>
            向PLC中字软元件写入uint数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.Single[])">
            <summary>
            向PLC中字软元件写入float数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.Single)">
            <summary>
            向PLC中字软元件写入float数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.Int64[])">
            <summary>
            向PLC中字软元件写入long数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.Int64)">
            <summary>
            向PLC中字软元件写入long数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.UInt64[])">
            <summary>
            向PLC中字软元件写入ulong数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.UInt64)">
            <summary>
            向PLC中字软元件写入ulong数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.Double[])">
            <summary>
            向PLC中字软元件写入double数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.Write(System.String,System.Double)">
            <summary>
            向PLC中字软元件写入double数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronFinsNet.ToString">
            <summary>
            获取当前对象的字符串标识形式
            </summary>
            <returns>字符串信息</returns>
        </member>
        <member name="T:HslCommunication.Profinet.Omron.OmronInfo">
            <summary>
            欧姆龙的一般信息类
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.Omron.OmronInfo.GetStatusDescription(System.Int32)">
            <summary>
            获取错误信息的字符串描述文本
            </summary>
            <param name="err">错误码</param>
            <returns>文本描述</returns>
        </member>
        <member name="T:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet">
            <summary>
            使用了Fetch/Write协议来和西门子进行通讯，该种方法需要在PLC侧进行一些配置
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.#ctor">
            <summary>
            实例化一个西门子的Fetch/Write协议的通讯对象
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个西门子的Fetch/Write协议的通讯对象
            </summary>
            <param name="ipAddress">PLCd的Ip地址</param>
            <param name="port">PLC的端口</param>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.CalculateAddressStarted(System.String)">
            <summary>
            计算特殊的地址信息
            </summary>
            <param name="address">字符串信息</param>
            <returns>实际值</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.AnalysisAddress(System.String)">
            <summary>
            解析数据地址，解析出地址类型，起始地址，DB块的地址
            </summary>
            <param name="address">数据地址</param>
            <returns>解析出地址类型，起始地址，DB块的地址</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.BuildReadCommand(System.String,System.UInt16)">
            <summary>
            生成一个读取字数据指令头的通用方法
            </summary>
            <param name="address"></param>
            <param name="count"></param>
            <returns>携带有命令字节</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.BuildWriteByteCommand(System.String,System.Byte[])">
            <summary>
            生成一个写入字节数据的指令
            </summary>
            <param name="address"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.ReadCustomer``1(System.String)">
            <summary>
            读取自定义的数据类型，只要规定了写入和解析规则
            </summary>
            <typeparam name="T">类型名称</typeparam>
            <param name="address">起始地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.WriteCustomer``1(System.String,``0)">
            <summary>
            写入自定义的数据类型到PLC去，只要规定了生成字节的方法即可
            </summary>
            <typeparam name="T">自定义类型</typeparam>
            <param name="address">起始地址</param>
            <param name="data">实例对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Read(System.String,System.UInt16)">
            <summary>
            从PLC读取数据，地址格式为I100，Q100，DB20.100，M100，T100，C100，以字节为单位
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100，T100，C100，</param>
            <param name="length">读取的数量，以字节为单位</param>
            <returns>带有成功标志的字节信息</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.ReadByte(System.String)">
            <summary>
            读取指定地址的byte数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.ReadInt16(System.String)">
            <summary>
            读取指定地址的short数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.ReadUInt16(System.String)">
            <summary>
            读取指定地址的ushort数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.ReadInt32(System.String)">
            <summary>
            读取指定地址的int数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.ReadUInt32(System.String)">
            <summary>
            读取指定地址的uint数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.ReadFloat(System.String)">
            <summary>
            读取指定地址的float数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.ReadInt64(System.String)">
            <summary>
            读取指定地址的long数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.ReadUInt64(System.String)">
            <summary>
            读取指定地址的ulong数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.ReadDouble(System.String)">
            <summary>
            读取指定地址的double数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.ReadString(System.String,System.UInt16)">
            <summary>
            读取地址地址的String数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <param name="length">字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.Byte[])">
            <summary>
            将数据写入到PLC数据，地址格式为I100，Q100，DB20.100，M100，以字节为单位
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <param name="value">写入的数据，长度根据data的长度来指示</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.String)">
            <summary>
            向PLC中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.String,System.Int32)">
            <summary>
            向PLC中写入指定长度的字符串,超出截断，不够补0，编码格式为ASCII
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.WriteUnicodeString(System.String,System.String)">
            <summary>
            向PLC中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.WriteUnicodeString(System.String,System.String,System.Int32)">
            <summary>
            向PLC中写入指定长度的字符串,超出截断，不够补0，编码格式为Unicode
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.Boolean[])">
            <summary>
            向PLC中写入bool数组，返回值说明，比如你写入M100,那么data[0]对应M100.0
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据，长度为8的倍数</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.Byte)">
            <summary>
            向PLC中写入byte数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.Int16[])">
            <summary>
            向PLC中写入short数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.Int16)">
            <summary>
            向PLC中写入short数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.UInt16[])">
            <summary>
            向PLC中写入ushort数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.UInt16)">
            <summary>
            向PLC中写入ushort数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.Int32[])">
            <summary>
            向PLC中写入int数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.Int32)">
            <summary>
            向PLC中写入int数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.UInt32[])">
            <summary>
            向PLC中写入uint数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.UInt32)">
            <summary>
            向PLC中写入uint数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.Single[])">
            <summary>
            向PLC中写入float数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.Single)">
            <summary>
            向PLC中写入float数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.Int64[])">
            <summary>
            向PLC中写入long数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.Int64)">
            <summary>
            向PLC中写入long数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.UInt64[])">
            <summary>
            向PLC中写入ulong数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.UInt64)">
            <summary>
            向PLC中写入ulong数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.Double[])">
            <summary>
            向PLC中写入double数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.Double)">
            <summary>
            向PLC中写入double数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensFetchWriteNet.ToString">
            <summary>
            获取当前对象的字符串标识形式
            </summary>
            <returns>字符串信息</returns>
        </member>
        <member name="T:HslCommunication.Profinet.Siemens.SiemensPLCS">
            <summary>
            西门子的PLC类型，目前支持的访问类型
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Siemens.SiemensPLCS.S1200">
            <summary>
            1200系列
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Siemens.SiemensPLCS.S300">
            <summary>
            300系列
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Siemens.SiemensPLCS.S1500">
            <summary>
            1500系列PLC
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.Siemens.SiemensPLCS.S200Smart">
            <summary>
            200的smart系列
            </summary>
        </member>
        <member name="T:HslCommunication.Profinet.Siemens.SiemensS7Net">
            <summary>
            一个西门子的客户端类，使用S7协议来进行数据交互
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.#ctor(HslCommunication.Profinet.Siemens.SiemensPLCS)">
            <summary>
            实例化一个西门子的S7协议的通讯对象
            </summary>
            <param name="siemens">指定西门子的型号</param>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.#ctor(HslCommunication.Profinet.Siemens.SiemensPLCS,System.String)">
            <summary>
            实例化一个西门子的S7协议的通讯对象并指定Ip地址
            </summary>
            <param name="siemens">指定西门子的型号</param>
            <param name="ipAddress">Ip地址</param>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Initialization(HslCommunication.Profinet.Siemens.SiemensPLCS,System.String)">
            <summary>
            初始化方法
            </summary>
            <param name="siemens"></param>
            <param name="ipAddress"></param>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.InitilizationOnConnect(System.Net.Sockets.Socket)">
            <summary>
            在客户端连接上服务器后，所做的一些初始化操作
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.CalculateAddressStarted(System.String)">
            <summary>
            计算特殊的地址信息
            </summary>
            <param name="address">字符串信息</param>
            <returns>实际值</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.AnalysisAddress(System.String)">
            <summary>
            解析数据地址，解析出地址类型，起始地址，DB块的地址
            </summary>
            <param name="address">数据地址</param>
            <returns>解析出地址类型，起始地址，DB块的地址</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.BuildReadCommand(HslCommunication.OperateResult{System.Byte,System.Int32,System.UInt16}[],System.UInt16[])">
            <summary>
            生成一个读取字数据指令头的通用方法
            </summary>
            <param name="address">解析后的地址</param>
            <param name="length">每个地址的读取长度</param>
            <returns>携带有命令字节</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.BuildBitReadCommand(System.String)">
            <summary>
            生成一个位读取数据指令头的通用方法
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.BuildWriteByteCommand(System.String,System.Byte[])">
            <summary>
            生成一个写入字节数据的指令
            </summary>
            <param name="address"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.BuildWriteBitCommand(System.String,System.Boolean)">
            <summary>
            生成一个写入位数据的指令
            </summary>
            <param name="address"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.ReadOrderNumber">
            <summary>
            从PLC读取订货号信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.ReadCustomer``1(System.String)">
            <summary>
            读取自定义的数据类型，只要规定了写入和解析规则
            </summary>
            <typeparam name="T">类型名称</typeparam>
            <param name="address">起始地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.WriteCustomer``1(System.String,``0)">
            <summary>
            写入自定义的数据类型到PLC去，只要规定了生成字节的方法即可
            </summary>
            <typeparam name="T">自定义类型</typeparam>
            <param name="address">起始地址</param>
            <param name="data">实例对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Read(System.String,System.UInt16)">
            <summary>
            从PLC读取数据，地址格式为I100，Q100，DB20.100，M100，T100，C100以字节为单位
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <param name="length">读取的数量，以字节为单位</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.ReadBitFromPLC(System.String)">
            <summary>
            从PLC读取数据，地址格式为I100，Q100，DB20.100，M100，以位为单位
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Read(System.String[],System.UInt16[])">
            <summary>
            一次性从PLC获取所有的数据，按照先后顺序返回一个统一的Buffer，需要按照顺序处理，两个数组长度必须一致
            </summary>
            <param name="address">起始地址数组</param>
            <param name="length">数据长度数组</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.ReadBool(System.String)">
            <summary>
            读取指定地址的bool数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.ReadByte(System.String)">
            <summary>
            读取指定地址的byte数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.ReadInt16(System.String)">
            <summary>
            读取指定地址的short数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.ReadUInt16(System.String)">
            <summary>
            读取指定地址的ushort数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.ReadInt32(System.String)">
            <summary>
            读取指定地址的int数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.ReadUInt32(System.String)">
            <summary>
            读取指定地址的uint数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.ReadFloat(System.String)">
            <summary>
            读取指定地址的float数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.ReadInt64(System.String)">
            <summary>
            读取指定地址的long数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.ReadUInt64(System.String)">
            <summary>
            读取指定地址的ulong数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.ReadDouble(System.String)">
            <summary>
            读取指定地址的double数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.ReadString(System.String,System.UInt16)">
            <summary>
            读取地址地址的String数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <param name="length">字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.WriteBase(System.Byte[])">
            <summary>
            基础的写入数据的操作支持
            </summary>
            <param name="entireValue">完整的字节数据</param>
            <returns>写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.Byte[])">
            <summary>
            将数据写入到PLC数据，地址格式为I100，Q100，DB20.100，M100，以字节为单位
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <param name="value">写入的数据，长度根据data的长度来指示</param>
            <returns>写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.Boolean)">
            <summary>
            写入PLC的一个位，例如"M100.6"，"I100.7"，"Q100.0"，"DB20.100.0"，如果只写了"M100"默认为"M100.0
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <param name="value">写入的数据，True或是False</param>
            <returns>写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.String)">
            <summary>
            向PLC中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.String,System.Int32)">
            <summary>
            向PLC中写入指定长度的字符串,超出截断，不够补0，编码格式为ASCII
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.WriteUnicodeString(System.String,System.String)">
            <summary>
            向PLC中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.WriteUnicodeString(System.String,System.String,System.Int32)">
            <summary>
            向PLC中写入指定长度的字符串,超出截断，不够补0，编码格式为Unicode
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.Boolean[])">
            <summary>
            向PLC中写入bool数组，返回值说明，比如你写入M100,那么data[0]对应M100.0
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据，长度为8的倍数</param>
            <returns>写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.Byte)">
            <summary>
            向PLC中写入byte数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.Int16[])">
            <summary>
            向PLC中写入short数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.Int16)">
            <summary>
            向PLC中写入short数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.UInt16[])">
            <summary>
            向PLC中写入ushort数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.UInt16)">
            <summary>
            向PLC中写入ushort数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.Int32[])">
            <summary>
            向PLC中写入int数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.Int32)">
            <summary>
            向PLC中写入int数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.UInt32[])">
            <summary>
            向PLC中写入uint数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.UInt32)">
            <summary>
            向PLC中写入uint数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.Single[])">
            <summary>
            向PLC中写入float数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.Single)">
            <summary>
            向PLC中写入float数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.Int64[])">
            <summary>
            向PLC中写入long数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.Int64)">
            <summary>
            向PLC中写入long数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.UInt64[])">
            <summary>
            向PLC中写入ulong数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.UInt64)">
            <summary>
            向PLC中写入ulong数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.Double[])">
            <summary>
            向PLC中写入double数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.Write(System.String,System.Double)">
            <summary>
            向PLC中写入double数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.Siemens.SiemensS7Net.ToString">
            <summary>
            获取当前对象的字符串标识形式
            </summary>
            <returns>字符串信息</returns>
        </member>
        <member name="T:HslCommunication.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.abstr1">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.abstr11">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Activity_16xLG">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.AddressViewer">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.alipay">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.asset_progressBar_24x24_on">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.asset_progressBar_24x24_on1">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.AudioRecording">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.brackets_Square_16xMD">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Class_489">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.ClassIcon">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Cloud_16xLG">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Copy_6524">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Delegate_8339">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.docview_xaml_on_16x16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Enum_582">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Event_594">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Event_594_exp">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.glasses_16xLG">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.grid_Data_16xLG">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.lightningBolt_16xLG">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.ListView_687">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Method_636">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.mm_facetoface_collect_qrcode_1525331158525">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Module_648">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.PropertyIcon">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.qrcode_for_gh_319218678954_258">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Soundfile_461">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Structure_507">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.TabControl_707">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Table_748">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Tag_7213">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Textfile_818_16x">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.TreeView_713">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.usbcontroller">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.UseCaseDiagramFile_usecasediagram_13447_16x">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.VirtualMachine">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.WebFormTemplate_11274_16x_color">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.WindowsForm_817_16x">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="M:HslCommunication.HslSecurity.ByteEncrypt(System.Byte[])">
            <summary>
            加密方法，只对当前的程序集开放
            </summary>
            <param name="enBytes">等待加密的数据</param>
            <returns>加密后的字节数据</returns>
        </member>
        <member name="M:HslCommunication.HslSecurity.ByteDecrypt(System.Byte[])">
            <summary>
            解密方法，只对当前的程序集开放
            </summary>
            <param name="deBytes">等待解密的数据</param>
            <returns>解密后的字节数据</returns>
        </member>
        <member name="T:HslCommunication.Robot.EFORT.EfortData">
            <summary>
            埃夫特机器人的数据结构
            </summary>
        </member>
        <member name="M:HslCommunication.Robot.EFORT.EfortData.#ctor">
            <summary>
            实例化一个默认的对象
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.PacketStart">
            <summary>
            报文开始的字符串
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.PacketOrders">
            <summary>
            数据命令
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.PacketHeartbeat">
            <summary>
            数据心跳
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.ErrorStatus">
            <summary>
            报警状态，1:有报警，0：无报警
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.HstopStatus">
            <summary>
            急停状态，1：无急停，0：有急停
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.AuthorityStatus">
            <summary>
            权限状态，1：有权限，0：无权限
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.ServoStatus">
            <summary>
            伺服状态，1：有使能，0：未使能
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.AxisMoveStatus">
            <summary>
            轴运动状态，1：有运动，0：未运动
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.ProgMoveStatus">
            <summary>
            程序运行状态，1：有运行，0：未运行
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.ProgLoadStatus">
            <summary>
            程序加载状态，1：有加载，0：无加载
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.ProgHoldStatus">
            <summary>
            程序暂停状态，1：有暂停，0：无暂停
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.ModeStatus">
            <summary>
            模式状态，1:手动，2:自动，3:远程
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.SpeedStatus">
            <summary>
            读读状态，百分比（单位）
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.IoDOut">
            <summary>
            IoDOut状态
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.IoDIn">
            <summary>
            IoDIn状态
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.IoIOut">
            <summary>
            IoIOut状态
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.IoIIn">
            <summary>
            IoIIn状态
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.ProjectName">
            <summary>
            加载工程名
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.ProgramName">
            <summary>
            加载程序名
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.ErrorText">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.DbAxisPos">
            <summary>
            一到七轴的角度
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.DbCartPos">
            <summary>
            X,Y,Z,A,B,C方向，也叫笛卡尔坐标系
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.DbAxisSpeed">
            <summary>
            一到七轴的速度
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.DbAxisAcc">
            <summary>
            一到七轴的加速度
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.DbAxisAccAcc">
            <summary>
            一到七轴的加加速度
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.DbAxisTorque">
            <summary>
            一到七轴的力矩
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.DbAxisDirCnt">
            <summary>
            轴反向计数
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.DbAxisTime">
            <summary>
            轴工作总时长
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.DbDeviceTime">
            <summary>
            设备开机总时长
            </summary>
        </member>
        <member name="P:HslCommunication.Robot.EFORT.EfortData.PacketEnd">
            <summary>
            报文结束标记
            </summary>
        </member>
        <member name="T:HslCommunication.Robot.EFORT.ER7BC10">
            <summary>
            埃夫特机器人对应型号为ER7B-C10
            </summary>
        </member>
        <member name="M:HslCommunication.Robot.EFORT.ER7BC10.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个默认的对象，并指定IP地址和端口号，端口号通常为8008
            </summary>
            <param name="ipAddress">Ip地址</param>
            <param name="port">端口号</param>
        </member>
        <member name="M:HslCommunication.Robot.EFORT.ER7BC10.GetReadCommand">
            <summary>
            获取发送的消息的命令
            </summary>
            <returns>字节数组命令</returns>
        </member>
        <member name="M:HslCommunication.Robot.EFORT.ER7BC10.Read">
            <summary>
            读取机器人的详细信息
            </summary>
            <returns>结果数据信息</returns>
        </member>
        <member name="T:HslCommunication.Serial.SoftCRC16">
            <summary>
            用于CRC16验证的类，提供了标准的验证方法
            </summary>
        </member>
        <member name="M:HslCommunication.Serial.SoftCRC16.CheckCRC16(System.Byte[])">
            <summary>
            来校验对应的接收数据的CRC校验码，默认多项式码为0xA001
            </summary>
            <param name="data">需要校验的数据，带CRC校验码</param>
            <returns>返回校验成功与否</returns>
        </member>
        <member name="M:HslCommunication.Serial.SoftCRC16.CheckCRC16(System.Byte[],System.Byte,System.Byte)">
            <summary>
            指定多项式码来校验对应的接收数据的CRC校验码
            </summary>
            <param name="data">需要校验的数据，带CRC校验码</param>
            <param name="CH">多项式码高位</param>
            <param name="CL">多项式码低位</param>
            <returns>返回校验成功与否</returns>
        </member>
        <member name="M:HslCommunication.Serial.SoftCRC16.CRC16(System.Byte[])">
            <summary>
            获取对应的数据的CRC校验码，默认多项式码为0xA001
            </summary>
            <param name="data">需要校验的数据，不包含CRC字节</param>
            <returns>返回带CRC校验码的字节数组，可用于串口发送</returns>
        </member>
        <member name="M:HslCommunication.Serial.SoftCRC16.CRC16(System.Byte[],System.Byte,System.Byte)">
            <summary>
            通过指定多项式码来获取对应的数据的CRC校验码
            </summary>
            <param name="data">需要校验的数据，不包含CRC字节</param>
            <param name="CL">多项式码地位</param>
            <param name="CH">多项式码高位</param>
            <returns>返回带CRC校验码的字节数组，可用于串口发送</returns>
        </member>
        <member name="T:HslCommunication.Serial.SerialBase">
            <summary>
            所有串行通信类的基类，提供了一些基础的服务
            </summary>
        </member>
        <member name="M:HslCommunication.Serial.SerialBase.#ctor">
            <summary>
            实例化一个无参的构造方法
            </summary>
        </member>
        <member name="M:HslCommunication.Serial.SerialBase.SerialPortInni(System.String)">
            <summary>
            初始化串口信息，9600波特率，8位数据位，1位停止位，无奇偶校验
            </summary>
        </member>
        <member name="M:HslCommunication.Serial.SerialBase.SerialPortInni(System.Action{System.IO.Ports.SerialPort})">
            <summary>
            根据自定义初始化方法进行初始化串口信息
            </summary>
        </member>
        <member name="M:HslCommunication.Serial.SerialBase.Open">
            <summary>
            打开一个新的串行端口连接
            </summary>
        </member>
        <member name="M:HslCommunication.Serial.SerialBase.Close">
            <summary>
            关闭端口连接
            </summary>
        </member>
        <member name="M:HslCommunication.Serial.SerialBase.ReadBase(System.Byte[])">
            <summary>
            读取串口的数据
            </summary>
            <param name="send"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Serial.SerialBase.ToString">
            <summary>
            返回表示当前对象的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:HslCommunication.Serial.SerialBase.LogNet">
            <summary>
            当前的日志情况
            </summary>
        </member>
        <member name="P:HslCommunication.Serial.SerialBase.ReceiveTimeout">
            <summary>
            接收数据的超时时间
            </summary>
        </member>
    </members>
</doc>
